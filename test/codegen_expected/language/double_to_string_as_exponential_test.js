dart_library.library('language/double_to_string_as_exponential_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__double_to_string_as_exponential_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const double_to_string_as_exponential_test = Object.create(null);
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.definiteFunctionType(dart.dynamic, [])))();
  double_to_string_as_exponential_test.main = function() {
    expect$.Expect.equals("1e+0", 1.0[dartx.toStringAsExponential]());
    expect$.Expect.equals("1.1e+1", 11.0[dartx.toStringAsExponential]());
    expect$.Expect.equals("1.12e+2", 112.0[dartx.toStringAsExponential]());
    expect$.Expect.equals("1e+0", 1.0[dartx.toStringAsExponential](null));
    expect$.Expect.equals("1.1e+1", 11.0[dartx.toStringAsExponential](null));
    expect$.Expect.equals("1.12e+2", 112.0[dartx.toStringAsExponential](null));
    expect$.Expect.equals("1e+0", 1.0[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1e+1", 11.0[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1e+2", 112.0[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1.0e+0", 1.0[dartx.toStringAsExponential](1));
    expect$.Expect.equals("1.1e+1", 11.0[dartx.toStringAsExponential](1));
    expect$.Expect.equals("1.1e+2", 112.0[dartx.toStringAsExponential](1));
    expect$.Expect.equals("1.00e+0", 1.0[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1.10e+1", 11.0[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1.12e+2", 112.0[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1.000e+0", 1.0[dartx.toStringAsExponential](3));
    expect$.Expect.equals("1.100e+1", 11.0[dartx.toStringAsExponential](3));
    expect$.Expect.equals("1.120e+2", 112.0[dartx.toStringAsExponential](3));
    expect$.Expect.equals("1e-1", 0.1[dartx.toStringAsExponential]());
    expect$.Expect.equals("1.1e-1", 0.11[dartx.toStringAsExponential]());
    expect$.Expect.equals("1.12e-1", 0.112[dartx.toStringAsExponential]());
    expect$.Expect.equals("1e-1", 0.1[dartx.toStringAsExponential](null));
    expect$.Expect.equals("1.1e-1", 0.11[dartx.toStringAsExponential](null));
    expect$.Expect.equals("1.12e-1", 0.112[dartx.toStringAsExponential](null));
    expect$.Expect.equals("1e-1", 0.1[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1e-1", 0.11[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1e-1", 0.112[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1.0e-1", 0.1[dartx.toStringAsExponential](1));
    expect$.Expect.equals("1.1e-1", 0.11[dartx.toStringAsExponential](1));
    expect$.Expect.equals("1.1e-1", 0.112[dartx.toStringAsExponential](1));
    expect$.Expect.equals("1.00e-1", 0.1[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1.10e-1", 0.11[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1.12e-1", 0.112[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1.000e-1", 0.1[dartx.toStringAsExponential](3));
    expect$.Expect.equals("1.100e-1", 0.11[dartx.toStringAsExponential](3));
    expect$.Expect.equals("1.120e-1", 0.112[dartx.toStringAsExponential](3));
    expect$.Expect.equals("-0e+0", (-0.0)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1e+0", (-1.0)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1.1e+1", (-11.0)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1.12e+2", (-112.0)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-0e+0", (-0.0)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1e+0", (-1.0)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1.1e+1", (-11.0)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1.12e+2", (-112.0)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1e+0", (-1.0)[dartx.toStringAsExponential](0));
    expect$.Expect.equals("-1e+1", (-11.0)[dartx.toStringAsExponential](0));
    expect$.Expect.equals("-1e+2", (-112.0)[dartx.toStringAsExponential](0));
    expect$.Expect.equals("-1.0e+0", (-1.0)[dartx.toStringAsExponential](1));
    expect$.Expect.equals("-1.1e+1", (-11.0)[dartx.toStringAsExponential](1));
    expect$.Expect.equals("-1.1e+2", (-112.0)[dartx.toStringAsExponential](1));
    expect$.Expect.equals("-1.00e+0", (-1.0)[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-1.10e+1", (-11.0)[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-1.12e+2", (-112.0)[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-1.000e+0", (-1.0)[dartx.toStringAsExponential](3));
    expect$.Expect.equals("-1.100e+1", (-11.0)[dartx.toStringAsExponential](3));
    expect$.Expect.equals("-1.120e+2", (-112.0)[dartx.toStringAsExponential](3));
    expect$.Expect.equals("-1e-1", (-0.1)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1.1e-1", (-0.11)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1.12e-1", (-0.112)[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1e-1", (-0.1)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1.1e-1", (-0.11)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1.12e-1", (-0.112)[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1e-1", (-0.1)[dartx.toStringAsExponential](0));
    expect$.Expect.equals("-1e-1", (-0.11)[dartx.toStringAsExponential](0));
    expect$.Expect.equals("-1e-1", (-0.112)[dartx.toStringAsExponential](0));
    expect$.Expect.equals("-1.0e-1", (-0.1)[dartx.toStringAsExponential](1));
    expect$.Expect.equals("-1.1e-1", (-0.11)[dartx.toStringAsExponential](1));
    expect$.Expect.equals("-1.1e-1", (-0.112)[dartx.toStringAsExponential](1));
    expect$.Expect.equals("-1.00e-1", (-0.1)[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-1.10e-1", (-0.11)[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-1.12e-1", (-0.112)[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-1.000e-1", (-0.1)[dartx.toStringAsExponential](3));
    expect$.Expect.equals("-1.100e-1", (-0.11)[dartx.toStringAsExponential](3));
    expect$.Expect.equals("-1.120e-1", (-0.112)[dartx.toStringAsExponential](3));
    expect$.Expect.equals("NaN", core.double.NAN[dartx.toStringAsExponential](2));
    expect$.Expect.equals("Infinity", core.double.INFINITY[dartx.toStringAsExponential](2));
    expect$.Expect.equals("-Infinity", (-dart.notNull(core.double.INFINITY))[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1e+0", 1.0[dartx.toStringAsExponential](0));
    expect$.Expect.equals("0e+0", 0.0[dartx.toStringAsExponential]());
    expect$.Expect.equals("0e+0", 0.0[dartx.toStringAsExponential](null));
    expect$.Expect.equals("0.00e+0", 0.0[dartx.toStringAsExponential](2));
    expect$.Expect.equals("1e+1", 11.2356[dartx.toStringAsExponential](0));
    expect$.Expect.equals("1.1236e+1", 11.2356[dartx.toStringAsExponential](4));
    expect$.Expect.equals("1.1236e-4", 0.000112356[dartx.toStringAsExponential](4));
    expect$.Expect.equals("-1.1236e-4", (-0.000112356)[dartx.toStringAsExponential](4));
    expect$.Expect.equals("1.12356e-4", 0.000112356[dartx.toStringAsExponential]());
    expect$.Expect.equals("-1.12356e-4", (-0.000112356)[dartx.toStringAsExponential]());
    expect$.Expect.equals("1.12356e-4", 0.000112356[dartx.toStringAsExponential](null));
    expect$.Expect.equals("-1.12356e-4", (-0.000112356)[dartx.toStringAsExponential](null));
  };
  dart.fn(double_to_string_as_exponential_test.main, VoidTodynamic());
  // Exports:
  exports.double_to_string_as_exponential_test = double_to_string_as_exponential_test;
});
