dart_library.library('lib/typed_data/float32x4_shuffle_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__float32x4_shuffle_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const float32x4_shuffle_test = Object.create(null);
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [])))();
  let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic])))();
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.definiteFunctionType(dart.dynamic, [])))();
  float32x4_shuffle_test.testShuffle00 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.XXXX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXXY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXXZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXXW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXYX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXYY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXYZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXYW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXZX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXZY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXZZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXZW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXWX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXWY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXWZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XXWW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle00, VoidTovoid());
  float32x4_shuffle_test.testShuffle01 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.XYXX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYXY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYXZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYXW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYYX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYYY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYYZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYYW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYZX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYZY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYZZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYZW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYWX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYWY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYWZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XYWW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle01, VoidTovoid());
  float32x4_shuffle_test.testShuffle02 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.XZXX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZXY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZXZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZXW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZYX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZYY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZYZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZYW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZZX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZZY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZZZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZZW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZWX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZWY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZWZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XZWW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle02, VoidTovoid());
  float32x4_shuffle_test.testShuffle03 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.XWXX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWXY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWXZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWXW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWYX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWYY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWYZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWYW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWZX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWZY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWZZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWZW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWWX);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWWY);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWWZ);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.XWWW);
    expect$.Expect.equals(1.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle03, VoidTovoid());
  float32x4_shuffle_test.testShuffle10 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.YXXX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXXY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXXZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXXW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXYX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXYY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXYZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXYW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXZX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXZY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXZZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXZW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXWX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXWY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXWZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YXWW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle10, VoidTovoid());
  float32x4_shuffle_test.testShuffle11 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.YYXX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYXY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYXZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYXW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYYX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYYY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYYZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYYW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYZX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYZY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYZZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYZW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYWX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYWY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYWZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YYWW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle11, VoidTovoid());
  float32x4_shuffle_test.testShuffle12 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.YZXX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZXY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZXZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZXW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZYX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZYY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZYZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZYW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZZX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZZY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZZZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZZW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZWX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZWY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZWZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YZWW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle12, VoidTovoid());
  float32x4_shuffle_test.testShuffle13 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.YWXX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWXY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWXZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWXW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWYX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWYY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWYZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWYW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWZX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWZY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWZZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWZW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWWX);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWWY);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWWZ);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.YWWW);
    expect$.Expect.equals(2.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle13, VoidTovoid());
  float32x4_shuffle_test.testShuffle20 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.ZXXX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXXY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXXZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXXW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXYX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXYY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXYZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXYW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXZX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXZY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXZZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXZW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXWX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXWY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXWZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZXWW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle20, VoidTovoid());
  float32x4_shuffle_test.testShuffle21 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.ZYXX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYXY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYXZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYXW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYYX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYYY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYYZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYYW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYZX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYZY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYZZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYZW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYWX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYWY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYWZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZYWW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle21, VoidTovoid());
  float32x4_shuffle_test.testShuffle22 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.ZZXX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZXY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZXZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZXW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZYX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZYY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZYZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZYW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZZX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZZY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZZZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZZW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZWX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZWY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZWZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZZWW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle22, VoidTovoid());
  float32x4_shuffle_test.testShuffle23 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.ZWXX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWXY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWXZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWXW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWYX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWYY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWYZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWYW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWZX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWZY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWZZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWZW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWWX);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWWY);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWWZ);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.ZWWW);
    expect$.Expect.equals(3.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle23, VoidTovoid());
  float32x4_shuffle_test.testShuffle30 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.WXXX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXXY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXXZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXXW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXYX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXYY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXYZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXYW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXZX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXZY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXZZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXZW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXWX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXWY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXWZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WXWW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(1.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle30, VoidTovoid());
  float32x4_shuffle_test.testShuffle31 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.WYXX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYXY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYXZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYXW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYYX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYYY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYYZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYYW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYZX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYZY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYZZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYZW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYWX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYWY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYWZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WYWW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(2.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle31, VoidTovoid());
  float32x4_shuffle_test.testShuffle32 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.WZXX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZXY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZXZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZXW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZYX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZYY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZYZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZYW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZZX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZZY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZZZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZZW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZWX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZWY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZWZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WZWW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle32, VoidTovoid());
  float32x4_shuffle_test.testShuffle33 = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.WWXX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWXY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWXZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWXW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(1.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWYX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWYY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWYZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWYW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWZX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWZY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWZZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWZW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(3.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWWX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWWY);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWWZ);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(3.0, dart.dload(c, 'w'));
    c = m.shuffle(typed_data.Float32x4.WWWW);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(4.0, dart.dload(c, 'y'));
    expect$.Expect.equals(4.0, dart.dload(c, 'z'));
    expect$.Expect.equals(4.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle33, VoidTovoid());
  float32x4_shuffle_test.testShuffleNonConstant = function(mask) {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(core.int._check(mask));
    if (dart.equals(mask, 1)) {
      expect$.Expect.equals(2.0, dart.dload(c, 'x'));
      expect$.Expect.equals(1.0, dart.dload(c, 'y'));
      expect$.Expect.equals(1.0, dart.dload(c, 'z'));
      expect$.Expect.equals(1.0, dart.dload(c, 'w'));
    } else {
      expect$.Expect.equals(dart.notNull(typed_data.Float32x4.YYYY) + 1, mask);
      expect$.Expect.equals(3.0, dart.dload(c, 'x'));
      expect$.Expect.equals(2.0, dart.dload(c, 'y'));
      expect$.Expect.equals(2.0, dart.dload(c, 'z'));
      expect$.Expect.equals(2.0, dart.dload(c, 'w'));
    }
  };
  dart.fn(float32x4_shuffle_test.testShuffleNonConstant, dynamicTovoid());
  float32x4_shuffle_test.testInvalidShuffle = function(mask) {
    expect$.Expect.isFalse(dart.test(dart.dsend(mask, '<=', 255)) && dart.test(dart.dsend(mask, '>=', 0)));
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    expect$.Expect.throws(dart.fn(() => {
      c = m.shuffle(core.int._check(mask));
    }, VoidTovoid()));
  };
  dart.fn(float32x4_shuffle_test.testInvalidShuffle, dynamicTovoid());
  float32x4_shuffle_test.testShuffle = function() {
    let m = typed_data.Float32x4.new(1.0, 2.0, 3.0, 4.0);
    let c = null;
    c = m.shuffle(typed_data.Float32x4.WZYX);
    expect$.Expect.equals(4.0, dart.dload(c, 'x'));
    expect$.Expect.equals(3.0, dart.dload(c, 'y'));
    expect$.Expect.equals(2.0, dart.dload(c, 'z'));
    expect$.Expect.equals(1.0, dart.dload(c, 'w'));
  };
  dart.fn(float32x4_shuffle_test.testShuffle, VoidTovoid());
  float32x4_shuffle_test.main = function() {
    let xxxx = dart.notNull(typed_data.Float32x4.XXXX) + 1;
    let yyyy = dart.notNull(typed_data.Float32x4.YYYY) + 1;
    for (let i = 0; i < 20; i++) {
      float32x4_shuffle_test.testShuffle();
      float32x4_shuffle_test.testShuffle00();
      float32x4_shuffle_test.testShuffle01();
      float32x4_shuffle_test.testShuffle02();
      float32x4_shuffle_test.testShuffle03();
      float32x4_shuffle_test.testShuffle10();
      float32x4_shuffle_test.testShuffle11();
      float32x4_shuffle_test.testShuffle12();
      float32x4_shuffle_test.testShuffle13();
      float32x4_shuffle_test.testShuffle20();
      float32x4_shuffle_test.testShuffle21();
      float32x4_shuffle_test.testShuffle22();
      float32x4_shuffle_test.testShuffle23();
      float32x4_shuffle_test.testShuffle30();
      float32x4_shuffle_test.testShuffle31();
      float32x4_shuffle_test.testShuffle32();
      float32x4_shuffle_test.testShuffle33();
      float32x4_shuffle_test.testShuffleNonConstant(xxxx);
      float32x4_shuffle_test.testShuffleNonConstant(yyyy);
      float32x4_shuffle_test.testInvalidShuffle(256);
      float32x4_shuffle_test.testInvalidShuffle(-1);
    }
  };
  dart.fn(float32x4_shuffle_test.main, VoidTodynamic());
  // Exports:
  exports.float32x4_shuffle_test = float32x4_shuffle_test;
});
