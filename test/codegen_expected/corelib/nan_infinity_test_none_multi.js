dart_library.library('corelib/nan_infinity_test_none_multi', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__nan_infinity_test_none_multi(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const nan_infinity_test_none_multi = Object.create(null);
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [])))();
  nan_infinity_test_none_multi.main = function() {
    expect$.Expect.isFalse(1.5[dartx.isNaN]);
    expect$.Expect.isFalse(1.5[dartx.isInfinite]);
    expect$.Expect.isTrue(1.5[dartx.isFinite]);
    expect$.Expect.isFalse(1.5[dartx.isNegative]);
    expect$.Expect.isTrue((-1.5)[dartx.isNegative]);
    expect$.Expect.isFalse(0.0[dartx.isNegative]);
    expect$.Expect.isTrue((-0.0)[dartx.isNegative]);
    expect$.Expect.isTrue((-0.0)[dartx.isFinite]);
    expect$.Expect.isFalse((1)[dartx.isNaN]);
    expect$.Expect.isFalse((1)[dartx.isInfinite]);
    expect$.Expect.isTrue((1)[dartx.isFinite]);
    expect$.Expect.isFalse((1)[dartx.isNegative]);
    expect$.Expect.isTrue((-1)[dartx.isNegative]);
    expect$.Expect.isTrue(core.double.NAN[dartx.isNaN]);
    expect$.Expect.isFalse(core.double.NAN[dartx.isInfinite]);
    expect$.Expect.isFalse(core.double.NAN[dartx.isFinite]);
    expect$.Expect.isFalse(core.double.NAN[dartx.isNegative]);
    expect$.Expect.isFalse((-core.double.NAN)[dartx.isNegative]);
    expect$.Expect.isFalse(core.double.INFINITY[dartx.isNaN]);
    expect$.Expect.isTrue(core.double.INFINITY[dartx.isInfinite]);
    expect$.Expect.isFalse(core.double.INFINITY[dartx.isFinite]);
    expect$.Expect.isFalse(core.double.INFINITY[dartx.isNegative]);
    expect$.Expect.isTrue((-core.double.INFINITY)[dartx.isNegative]);
    expect$.Expect.isFalse(core.double.NEGATIVE_INFINITY[dartx.isNaN]);
    expect$.Expect.isTrue(core.double.NEGATIVE_INFINITY[dartx.isInfinite]);
    expect$.Expect.isFalse(core.double.NEGATIVE_INFINITY[dartx.isFinite]);
    expect$.Expect.isTrue(core.double.NEGATIVE_INFINITY[dartx.isNegative]);
    expect$.Expect.isFalse((-core.double.NEGATIVE_INFINITY)[dartx.isNegative]);
    expect$.Expect.equals("NaN", dart.toString(core.double.NAN));
    expect$.Expect.equals("Infinity", dart.toString(core.double.INFINITY));
    expect$.Expect.equals("-Infinity", dart.toString(core.double.NEGATIVE_INFINITY));
    expect$.Expect.isTrue(core.identical(core.double.INFINITY, core.double.INFINITY));
    expect$.Expect.isTrue(core.identical(core.double.NEGATIVE_INFINITY, core.double.NEGATIVE_INFINITY));
    expect$.Expect.isFalse(core.identical(core.double.NAN, core.double.INFINITY));
    expect$.Expect.isFalse(core.identical(core.double.NAN, core.double.NEGATIVE_INFINITY));
    expect$.Expect.isFalse(core.identical(core.double.INFINITY, core.double.NEGATIVE_INFINITY));
    expect$.Expect.isFalse(core.identical(core.double.NAN, -core.double.NAN));
    expect$.Expect.isTrue(core.identical(core.double.INFINITY, -core.double.NEGATIVE_INFINITY));
    expect$.Expect.isTrue(core.identical(core.double.NEGATIVE_INFINITY, -core.double.INFINITY));
    expect$.Expect.isTrue(core.double.INFINITY == core.double.INFINITY);
    expect$.Expect.isTrue(core.double.NEGATIVE_INFINITY == core.double.NEGATIVE_INFINITY);
    expect$.Expect.isFalse(core.double.INFINITY == core.double.NEGATIVE_INFINITY);
    expect$.Expect.isFalse(core.double.NEGATIVE_INFINITY == core.double.INFINITY);
    expect$.Expect.isFalse(core.double.NAN == core.double.NAN);
    expect$.Expect.isFalse(core.double.NAN == core.double.INFINITY);
    expect$.Expect.isFalse(core.double.NAN == core.double.NEGATIVE_INFINITY);
    expect$.Expect.isFalse(core.double.INFINITY == core.double.NAN);
    expect$.Expect.isFalse(core.double.NEGATIVE_INFINITY == core.double.NAN);
    expect$.Expect.isFalse(core.double.NAN < core.double.NAN);
    expect$.Expect.isFalse(core.double.NAN < core.double.INFINITY);
    expect$.Expect.isFalse(core.double.NAN < core.double.NEGATIVE_INFINITY);
    expect$.Expect.isFalse(core.double.NAN > core.double.NAN);
    expect$.Expect.isFalse(core.double.NAN > core.double.INFINITY);
    expect$.Expect.isFalse(core.double.NAN > core.double.NEGATIVE_INFINITY);
    expect$.Expect.isFalse(core.double.INFINITY < core.double.NAN);
    expect$.Expect.isFalse(core.double.NEGATIVE_INFINITY < core.double.NAN);
    expect$.Expect.isFalse(core.double.INFINITY > core.double.NAN);
    expect$.Expect.isFalse(core.double.NEGATIVE_INFINITY > core.double.NAN);
    expect$.Expect.isTrue(core.double.INFINITY > core.double.NEGATIVE_INFINITY);
    expect$.Expect.isFalse(core.double.INFINITY < core.double.NEGATIVE_INFINITY);
    expect$.Expect.isTrue((3.0 * core.double.NAN)[dartx.isNaN]);
    expect$.Expect.isTrue((3.0 + core.double.NAN)[dartx.isNaN]);
    expect$.Expect.isTrue((-core.double.NAN)[dartx.isNaN]);
  };
  dart.fn(nan_infinity_test_none_multi.main, VoidTovoid());
  // Exports:
  exports.nan_infinity_test_none_multi = nan_infinity_test_none_multi;
});
