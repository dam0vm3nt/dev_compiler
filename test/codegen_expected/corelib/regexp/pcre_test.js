dart_library.library('corelib/regexp/pcre_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__pcre_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const pcre_test = Object.create(null);
  const v8_regexp_utils = Object.create(null);
  let JSArrayOfRegExp = () => (JSArrayOfRegExp = dart.constFn(_interceptors.JSArray$(core.RegExp)))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.functionType(dart.void, [])))();
  let ListOfString = () => (ListOfString = dart.constFn(core.List$(core.String)))();
  let VoidToRegExp = () => (VoidToRegExp = dart.constFn(dart.definiteFunctionType(core.RegExp, [])))();
  let VoidTovoid$ = () => (VoidTovoid$ = dart.constFn(dart.definiteFunctionType(dart.void, [])))();
  let dynamicAnddynamic__Tovoid = () => (dynamicAnddynamic__Tovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic, dart.dynamic], [core.String])))();
  let dynamic__Tovoid = () => (dynamic__Tovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic], [core.String])))();
  let dynamic__Tovoid$ = () => (dynamic__Tovoid$ = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic], [core.num])))();
  let dynamicAnddynamicAndnumTovoid = () => (dynamicAnddynamicAndnumTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic, dart.dynamic, core.num])))();
  let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic])))();
  let StringAndRegExpToMatch = () => (StringAndRegExpToMatch = dart.constFn(dart.definiteFunctionType(core.Match, [core.String, core.RegExp])))();
  let MatchToString = () => (MatchToString = dart.constFn(dart.definiteFunctionType(core.String, [core.Match])))();
  let StringAndRegExpToListOfString = () => (StringAndRegExpToListOfString = dart.constFn(dart.definiteFunctionType(ListOfString(), [core.String, core.RegExp])))();
  pcre_test.main = function() {
    let res = JSArrayOfRegExp().of([]);
    res[dartx.add](core.RegExp.new("(a)b|", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a+bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a{3}bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|a+z)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab\\idef"));
    res[dartx.add](core.RegExp.new(".*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("cat|dog|elephant", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("cat|dog|elephant", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("cat|dog|elephant", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a|[bcd]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|[^\\dZ])", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|b)*[\\s]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(ab\\2)"));
    res[dartx.add](core.RegExp.new("(a)(b)(c)\\2", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)bc|(a)(b)\\2", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)(b)(c)(d)(e)\\6"));
    res[dartx.add](core.RegExp.new("the quick brown fox", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc|def", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*((abc)$|(def))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc|def", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*((abc)$|(def))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("the quick brown fox", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("the quick brown fox", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc.def", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc)\\2", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc\\1)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[]b"));
    res[dartx.add](core.RegExp.new("[^aeiou ]{3,}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("<.*>", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("<.*?>", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[abcd]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(^a|^b)", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a$", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\Aabc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?!alphabet)[ab]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("The next three are in testinput2 because they have variable length branches"));
    res[dartx.add](core.RegExp.new("This one is here because Perl 5.005_02 doesn't fail it", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("This one is here because I think Perl 5.005_02 gets the setting of $1 wrong", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(a\\1?){4}$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("These are syntax tests from Perl 5.005", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[]b"));
    res[dartx.add](core.RegExp.new("\\1"));
    res[dartx.add](core.RegExp.new("\\2"));
    res[dartx.add](core.RegExp.new("(a)|\\2"));
    res[dartx.add](core.RegExp.new("a[]b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc"));
    res[dartx.add](core.RegExp.new("abc"));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)bc(d)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.{20})", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.{15})", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.{16})", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(a|(bc))de(f)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc\\00def", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("word ((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+\\n)((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+\\n)?)?)?)?)?)?)?)?)?otherword", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*X", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*X", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*X|^B)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*X|^B)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\Biss\\B", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\Biss\\B", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("iss", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\Biss\\B", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\Biss\\B", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^iss", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*iss", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".i.", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^.is", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^ab\\n", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^ab\\n", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc|bac", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|bac)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|(c|dc))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|(d|de)c)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(baa|a+)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a{0,3}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("baa{3,}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new('"([^\\\\"]+|\\.)*"', {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|ab[cd])", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|.)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a|ba|\\w", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc(?=pqr)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc(?!pqr)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab.", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab[xyz]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab.c*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.c*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".c*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ac*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a.c*|b.c*)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.c*|aba", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".+a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?=abcda)a.*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?=a)a.*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a(b)*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\d*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab\\d*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a(\\d)*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcde{0,0}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab\\d+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab\\d{0}e", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a?b?", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("|-", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*(b+)(z)(z)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^.?abcd", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[[:alnum:]]"));
    res[dartx.add](core.RegExp.new("^[[:^alnum:]]"));
    res[dartx.add](core.RegExp.new("^[[:alpha:]]"));
    res[dartx.add](core.RegExp.new("^[[:^alpha:]]"));
    res[dartx.add](core.RegExp.new("[_[:alpha:]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[[:ascii:]]"));
    res[dartx.add](core.RegExp.new("^[[:^ascii:]]"));
    res[dartx.add](core.RegExp.new("^[[:blank:]]"));
    res[dartx.add](core.RegExp.new("^[[:^blank:]]"));
    res[dartx.add](core.RegExp.new("[\\n\\x0b\\x0c\\x0d[:blank:]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[[:cntrl:]]"));
    res[dartx.add](core.RegExp.new("^[[:digit:]]"));
    res[dartx.add](core.RegExp.new("^[[:graph:]]"));
    res[dartx.add](core.RegExp.new("^[[:lower:]]"));
    res[dartx.add](core.RegExp.new("^[[:print:]]"));
    res[dartx.add](core.RegExp.new("^[[:punct:]]"));
    res[dartx.add](core.RegExp.new("^[[:space:]]"));
    res[dartx.add](core.RegExp.new("^[[:upper:]]"));
    res[dartx.add](core.RegExp.new("^[[:xdigit:]]"));
    res[dartx.add](core.RegExp.new("^[[:word:]]"));
    res[dartx.add](core.RegExp.new("^[[:^cntrl:]]"));
    res[dartx.add](core.RegExp.new("^[12[:^digit:]]"));
    res[dartx.add](core.RegExp.new("^[[:^blank:]]"));
    res[dartx.add](core.RegExp.new("[01[:alpha:]%]"));
    res[dartx.add](core.RegExp.new("[[.ch.]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[=ch=]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[:rhubarb:]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[:upper:]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[:lower:]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("This one's here because of the large output vector needed", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\d+(?:\\s|$))(\\w+)\\s+(\\270)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("This one's here because Perl does this differently and PCRE can't at present", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(main(O)?)+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("These are all cases where Perl does it differently (nested captures)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(a(b)?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(aa(bb)?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(aa|aa(bb))+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(aa(bb)??)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(bb)?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(aa(b(b))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(b(b))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(b(?:b))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(bb(?:b))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(b(?:bb))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(?:b(b))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:aa(?:b(bb))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(aa(b(bb))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(aa(bb(bb))?)+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[\\s]"));
    res[dartx.add](core.RegExp.new("[\\S]"));
    res[dartx.add](core.RegExp.new("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"));
    res[dartx.add](core.RegExp.new("\\Q123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"));
    res[dartx.add](core.RegExp.new("\\Q\\E"));
    res[dartx.add](core.RegExp.new("\\Q\\Ex"));
    res[dartx.add](core.RegExp.new(" \\Q\\E"));
    res[dartx.add](core.RegExp.new("a\\Q\\E"));
    res[dartx.add](core.RegExp.new("a\\Q\\Eb"));
    res[dartx.add](core.RegExp.new("\\Q\\Eabc"));
    res[dartx.add](core.RegExp.new("[.x.]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[=x=]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[:x:]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\l", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\L", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\N{name}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\u", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\U", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[:space:]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[\\s]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[:space:]]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[[:space:]abcde]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)\\d+\\1", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)\\d+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)\\d+\\1", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)\\d+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*(xyz))\\d+\\2", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((.*))\\d+\\1", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[b]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?=a).*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?=abc).xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?=a)(?=b)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?=.)a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((?=abcda)a)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((?=abcda)ab)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("()a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a){2,3}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[a]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[ab]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[ab]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^a]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\d456", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\d456", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a^b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("c|abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)a\\1", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)a(b)\\2", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((.*)a|(.*)b)z", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((.*)a|(.*)b)z\\1", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((.*)a|(.*)b)z\\2", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((.*)a|(.*)b)z\\3", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((.*)a|^(.*)b)z\\3", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a\\31", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a\\32", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)(bc)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+)*zz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((w\\/|-|with)*(free|immediate)*.*?shipping\\s*[!.-]*)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((w\\/|-|with)*(free|immediate)*.*?shipping\\s*[!.-]*)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*.*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|b)*.?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcde", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a+b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|def)x", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(ab|cd){3,4}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("([ab]{,4}c|xy)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("([ab]{1,4}c|xy){4,5}?123", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\b.*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\b.*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?!.bcd).*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcde", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("0{0,2}ABC", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\d{3,}ABC", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\d*ABC", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[abc]+DE", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[abc]?123", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(?:\\d){3,5}X", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("line\\nbreak", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("line\\nbreak", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("line\\nbreak", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab.cd", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab.cd", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a(b)c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("Inthisnexttest,Jisnotsetattheouterlevel;consequentlyitisn'tsetinthepattern'soptions;consequentlypcre_get_named_substring()producesarandomvalue.", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\777", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\s*,\\s*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc$", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\w+(.)(.)?def", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(.(.))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("()[ab]xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(|)[ab]xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(|c)[ab]xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(|c?)[ab]xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(d?|c?)[ab]xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(d?|c)[ab]xyz", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a*b\\d"));
    res[dartx.add](core.RegExp.new("^a*?b\\d"));
    res[dartx.add](core.RegExp.new("^a+A\\d"));
    res[dartx.add](core.RegExp.new("^a*A\\d", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a*|b*)[cd]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b*)[cd]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a*|b+)[cd]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b+)[cd]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*\\d"));
    res[dartx.add](core.RegExp.new("a*\\D"));
    res[dartx.add](core.RegExp.new("0*\\d"));
    res[dartx.add](core.RegExp.new("0*\\D"));
    res[dartx.add](core.RegExp.new("a*\\s"));
    res[dartx.add](core.RegExp.new("a*\\S"));
    res[dartx.add](core.RegExp.new(" *\\s"));
    res[dartx.add](core.RegExp.new(" *\\S"));
    res[dartx.add](core.RegExp.new("a*\\w"));
    res[dartx.add](core.RegExp.new("a*\\W"));
    res[dartx.add](core.RegExp.new("=*\\w"));
    res[dartx.add](core.RegExp.new("=*\\W"));
    res[dartx.add](core.RegExp.new("\\d*a"));
    res[dartx.add](core.RegExp.new("\\d*2"));
    res[dartx.add](core.RegExp.new("\\d*\\d"));
    res[dartx.add](core.RegExp.new("\\d*\\D"));
    res[dartx.add](core.RegExp.new("\\d*\\s"));
    res[dartx.add](core.RegExp.new("\\d*\\S"));
    res[dartx.add](core.RegExp.new("\\d*\\w"));
    res[dartx.add](core.RegExp.new("\\d*\\W"));
    res[dartx.add](core.RegExp.new("\\D*a"));
    res[dartx.add](core.RegExp.new("\\D*2"));
    res[dartx.add](core.RegExp.new("\\D*\\d"));
    res[dartx.add](core.RegExp.new("\\D*\\D"));
    res[dartx.add](core.RegExp.new("\\D*\\s"));
    res[dartx.add](core.RegExp.new("\\D*\\S"));
    res[dartx.add](core.RegExp.new("\\D*\\w"));
    res[dartx.add](core.RegExp.new("\\D*\\W"));
    res[dartx.add](core.RegExp.new("\\s*a"));
    res[dartx.add](core.RegExp.new("\\s*2"));
    res[dartx.add](core.RegExp.new("\\s*\\d"));
    res[dartx.add](core.RegExp.new("\\s*\\D"));
    res[dartx.add](core.RegExp.new("\\s*\\s"));
    res[dartx.add](core.RegExp.new("\\s*\\S"));
    res[dartx.add](core.RegExp.new("\\s*\\w"));
    res[dartx.add](core.RegExp.new("\\s*\\W"));
    res[dartx.add](core.RegExp.new("\\S*a"));
    res[dartx.add](core.RegExp.new("\\S*2"));
    res[dartx.add](core.RegExp.new("\\S*\\d"));
    res[dartx.add](core.RegExp.new("\\S*\\D"));
    res[dartx.add](core.RegExp.new("\\S*\\s"));
    res[dartx.add](core.RegExp.new("\\S*\\S"));
    res[dartx.add](core.RegExp.new("\\S*\\w"));
    res[dartx.add](core.RegExp.new("\\S*\\W"));
    res[dartx.add](core.RegExp.new("\\w*a"));
    res[dartx.add](core.RegExp.new("\\w*2"));
    res[dartx.add](core.RegExp.new("\\w*\\d"));
    res[dartx.add](core.RegExp.new("\\w*\\D"));
    res[dartx.add](core.RegExp.new("\\w*\\s"));
    res[dartx.add](core.RegExp.new("\\w*\\S"));
    res[dartx.add](core.RegExp.new("\\w*\\w"));
    res[dartx.add](core.RegExp.new("\\w*\\W"));
    res[dartx.add](core.RegExp.new("\\W*a"));
    res[dartx.add](core.RegExp.new("\\W*2"));
    res[dartx.add](core.RegExp.new("\\W*\\d"));
    res[dartx.add](core.RegExp.new("\\W*\\D"));
    res[dartx.add](core.RegExp.new("\\W*\\s"));
    res[dartx.add](core.RegExp.new("\\W*\\S"));
    res[dartx.add](core.RegExp.new("\\W*\\w"));
    res[dartx.add](core.RegExp.new("\\W*\\W"));
    res[dartx.add](core.RegExp.new("[^a]+a"));
    res[dartx.add](core.RegExp.new("[^a]+a", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^a]+A", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^a]+b"));
    res[dartx.add](core.RegExp.new("[^a]+\\d"));
    res[dartx.add](core.RegExp.new("a*[^a]"));
    res[dartx.add](core.RegExp.new("^(?:(?:\\1|X)(a|b))+"));
    res[dartx.add](core.RegExp.new("^[\\E\\Qa\\E-\\Qz\\E]+"));
    res[dartx.add](core.RegExp.new("^[a\\Q]bc\\E]"));
    res[dartx.add](core.RegExp.new("(?=(\\w+))\\1:", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|)*\\d"));
    res[dartx.add](core.RegExp.new("^a.b"));
    res[dartx.add](core.RegExp.new("^abc.", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc.$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("a"));
    res[dartx.add](core.RegExp.new("a"));
    res[dartx.add](core.RegExp.new("^a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R+b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R{1,3}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a[\\R]b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(a(b))\\1\\g1\\g{1}\\g-1\\g{-1}\\g{-02}Z"));
    res[dartx.add](core.RegExp.new("^(a)\\g-2"));
    res[dartx.add](core.RegExp.new("^(a)\\g"));
    res[dartx.add](core.RegExp.new("^(a)\\g{0}"));
    res[dartx.add](core.RegExp.new("^(a)\\g{3"));
    res[dartx.add](core.RegExp.new("^(a)\\g{4a}"));
    res[dartx.add](core.RegExp.new("^a.b"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new("^$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc.$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^X", {multiLine: true}));
    res[dartx.add](core.RegExp.new("(foo)\\Kbar"));
    res[dartx.add](core.RegExp.new("(foo)(\\Kbar|baz)"));
    res[dartx.add](core.RegExp.new("(foo\\Kbar)baz"));
    res[dartx.add](core.RegExp.new("\\g{A"));
    res[dartx.add](core.RegExp.new("\\H\\h\\V\\v"));
    res[dartx.add](core.RegExp.new("\\H*\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\H{3,4}"));
    res[dartx.add](core.RegExp.new(".\\h{3,4}."));
    res[dartx.add](core.RegExp.new("\\h*X\\h?\\H+Y\\H?Z"));
    res[dartx.add](core.RegExp.new("\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c"));
    res[dartx.add](core.RegExp.new("[\\h]"));
    res[dartx.add](core.RegExp.new("[\\h]+"));
    res[dartx.add](core.RegExp.new("[\\v]"));
    res[dartx.add](core.RegExp.new("[\\H]"));
    res[dartx.add](core.RegExp.new("[^\\h]"));
    res[dartx.add](core.RegExp.new("[\\V]"));
    res[dartx.add](core.RegExp.new("[\\x0a\\V]"));
    res[dartx.add](core.RegExp.new("\\H+\\hY"));
    res[dartx.add](core.RegExp.new("\\H+ Y"));
    res[dartx.add](core.RegExp.new("\\h+A"));
    res[dartx.add](core.RegExp.new("\\v*B"));
    res[dartx.add](core.RegExp.new("\\V+\\x0a"));
    res[dartx.add](core.RegExp.new("A+\\h"));
    res[dartx.add](core.RegExp.new(" *\\H"));
    res[dartx.add](core.RegExp.new("A*\\v"));
    res[dartx.add](core.RegExp.new("\\x0b*\\V"));
    res[dartx.add](core.RegExp.new("\\d+\\h"));
    res[dartx.add](core.RegExp.new("\\d*\\v"));
    res[dartx.add](core.RegExp.new("S+\\h\\S+\\v"));
    res[dartx.add](core.RegExp.new("\\w{3,}\\h\\w+\\v"));
    res[dartx.add](core.RegExp.new("\\h+\\d\\h+\\w\\h+\\S\\h+\\H"));
    res[dartx.add](core.RegExp.new("\\v+\\d\\v+\\w\\v+\\S\\v+\\V"));
    res[dartx.add](core.RegExp.new("\\H+\\h\\H+\\d"));
    res[dartx.add](core.RegExp.new("\\V+\\v\\V+\\w"));
    res[dartx.add](core.RegExp.new("[\\E]AAA"));
    res[dartx.add](core.RegExp.new("[\\Q\\E]AAA"));
    res[dartx.add](core.RegExp.new("[^\\E]AAA"));
    res[dartx.add](core.RegExp.new("[^\\Q\\E]AAA"));
    res[dartx.add](core.RegExp.new("[\\E^]AAA"));
    res[dartx.add](core.RegExp.new("[\\Q\\E^]AAA"));
    res[dartx.add](core.RegExp.new("\\g6666666666"));
    res[dartx.add](core.RegExp.new("[\\g6666666666]"));
    res[dartx.add](core.RegExp.new(".+A"));
    res[dartx.add](core.RegExp.new("\\nA"));
    res[dartx.add](core.RegExp.new("[\\r\\n]A"));
    res[dartx.add](core.RegExp.new("(\\r|\\n)A"));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R{2,4}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R{2,4}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\k''"));
    res[dartx.add](core.RegExp.new("\\k<>"));
    res[dartx.add](core.RegExp.new("\\k{}"));
    res[dartx.add](core.RegExp.new("[[:foo:]]"));
    res[dartx.add](core.RegExp.new("[[:1234:]]"));
    res[dartx.add](core.RegExp.new("[[:f\\oo:]]"));
    res[dartx.add](core.RegExp.new("[[: :]]"));
    res[dartx.add](core.RegExp.new("[[:...:]]"));
    res[dartx.add](core.RegExp.new("[[:l\\ower:]]"));
    res[dartx.add](core.RegExp.new("[[:abc\\:]]"));
    res[dartx.add](core.RegExp.new("[abc[:x\\]pqr:]]"));
    res[dartx.add](core.RegExp.new("[[:a\\dz:]]"));
    res[dartx.add](core.RegExp.new("^(a|b\\g<1>c)"));
    res[dartx.add](core.RegExp.new("^(a|b\\g'1'c)"));
    res[dartx.add](core.RegExp.new("^(a|b\\g'-1'c)"));
    res[dartx.add](core.RegExp.new("(^(a|b\\g<-1>c))"));
    res[dartx.add](core.RegExp.new("(^(a|b\\g<-1'c))"));
    res[dartx.add](core.RegExp.new("(^(a|b\\g{-1}))"));
    res[dartx.add](core.RegExp.new("(\\3)(\\1)(a)"));
    res[dartx.add](core.RegExp.new("(\\3)(\\1)(a)"));
    res[dartx.add](core.RegExp.new("TA]"));
    res[dartx.add](core.RegExp.new("TA]"));
    res[dartx.add](core.RegExp.new("a[]b"));
    res[dartx.add](core.RegExp.new("a[^]b"));
    res[dartx.add](core.RegExp.new("a[]b"));
    res[dartx.add](core.RegExp.new("a[]+b"));
    res[dartx.add](core.RegExp.new("a[^]b"));
    res[dartx.add](core.RegExp.new("a[^]+b"));
    res[dartx.add](core.RegExp.new("a(?!)+b"));
    res[dartx.add](core.RegExp.new("(abc|pqr|123){0}[xyz]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(" End of testinput2 "));
    res[dartx.add](core.RegExp.new("a.b"));
    res[dartx.add](core.RegExp.new("a(.{3})b"));
    res[dartx.add](core.RegExp.new("a(.*?)(.)"));
    res[dartx.add](core.RegExp.new("a(.*?)(.)"));
    res[dartx.add](core.RegExp.new("a(.*)(.)"));
    res[dartx.add](core.RegExp.new("a(.*)(.)"));
    res[dartx.add](core.RegExp.new("a(.)(.)"));
    res[dartx.add](core.RegExp.new("a(.)(.)"));
    res[dartx.add](core.RegExp.new("a(.?)(.)"));
    res[dartx.add](core.RegExp.new("a(.?)(.)"));
    res[dartx.add](core.RegExp.new("a(.??)(.)"));
    res[dartx.add](core.RegExp.new("a(.??)(.)"));
    res[dartx.add](core.RegExp.new("a(.{3})b"));
    res[dartx.add](core.RegExp.new("a(.{3,})b"));
    res[dartx.add](core.RegExp.new("a(.{3,}?)b"));
    res[dartx.add](core.RegExp.new("a(.{3,5})b"));
    res[dartx.add](core.RegExp.new("a(.{3,5}?)b"));
    res[dartx.add](core.RegExp.new("X(\\C{3})"));
    res[dartx.add](core.RegExp.new("X(\\C{4})"));
    res[dartx.add](core.RegExp.new("X\\C*"));
    res[dartx.add](core.RegExp.new("X\\C*?"));
    res[dartx.add](core.RegExp.new("X\\C{3,5}"));
    res[dartx.add](core.RegExp.new("X\\C{3,5}?"));
    res[dartx.add](core.RegExp.new("[^a]+"));
    res[dartx.add](core.RegExp.new("^[^a]{2}"));
    res[dartx.add](core.RegExp.new("^[^a]{2,}"));
    res[dartx.add](core.RegExp.new("^[^a]{2,}?"));
    res[dartx.add](core.RegExp.new("[^a]+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^a]{2}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^a]{2,}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^a]{2,}?", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\D*"));
    res[dartx.add](core.RegExp.new("\\D*"));
    res[dartx.add](core.RegExp.new("\\D"));
    res[dartx.add](core.RegExp.new(">\\S"));
    res[dartx.add](core.RegExp.new("\\d"));
    res[dartx.add](core.RegExp.new("\\s"));
    res[dartx.add](core.RegExp.new("\\D+"));
    res[dartx.add](core.RegExp.new("\\D{2,3}"));
    res[dartx.add](core.RegExp.new("\\D{2,3}?"));
    res[dartx.add](core.RegExp.new("\\d+"));
    res[dartx.add](core.RegExp.new("\\d{2,3}"));
    res[dartx.add](core.RegExp.new("\\d{2,3}?"));
    res[dartx.add](core.RegExp.new("\\S+"));
    res[dartx.add](core.RegExp.new("\\S{2,3}"));
    res[dartx.add](core.RegExp.new("\\S{2,3}?"));
    res[dartx.add](core.RegExp.new(">\\s+<"));
    res[dartx.add](core.RegExp.new(">\\s{2,3}<"));
    res[dartx.add](core.RegExp.new(">\\s{2,3}?<"));
    res[dartx.add](core.RegExp.new("\\w+"));
    res[dartx.add](core.RegExp.new("\\w{2,3}"));
    res[dartx.add](core.RegExp.new("\\w{2,3}?"));
    res[dartx.add](core.RegExp.new("\\W+"));
    res[dartx.add](core.RegExp.new("\\W{2,3}"));
    res[dartx.add](core.RegExp.new("\\W{2,3}?"));
    res[dartx.add](core.RegExp.new("a\\Cb"));
    res[dartx.add](core.RegExp.new("a\\Cb"));
    res[dartx.add](core.RegExp.new("[\\xFF]"));
    res[dartx.add](core.RegExp.new("[\\xff]"));
    res[dartx.add](core.RegExp.new("[^\\xFF]"));
    res[dartx.add](core.RegExp.new("[^\\xff]"));
    res[dartx.add](core.RegExp.new("^[ac]*b"));
    res[dartx.add](core.RegExp.new("^[^x]*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^x]*b"));
    res[dartx.add](core.RegExp.new("^\\d*b"));
    res[dartx.add](core.RegExp.new("(|a)"));
    res[dartx.add](core.RegExp.new("\\S\\S"));
    res[dartx.add](core.RegExp.new("\\S{2}"));
    res[dartx.add](core.RegExp.new("\\W\\W"));
    res[dartx.add](core.RegExp.new("\\W{2}"));
    res[dartx.add](core.RegExp.new("\\S"));
    res[dartx.add](core.RegExp.new("[\\S]"));
    res[dartx.add](core.RegExp.new("\\D"));
    res[dartx.add](core.RegExp.new("[\\D]"));
    res[dartx.add](core.RegExp.new("\\W"));
    res[dartx.add](core.RegExp.new("[\\W]"));
    res[dartx.add](core.RegExp.new("[\\S\\s]*"));
    res[dartx.add](core.RegExp.new(".[^\\S]."));
    res[dartx.add](core.RegExp.new(".[^\\S\\n]."));
    res[dartx.add](core.RegExp.new("[[:^alnum:]]"));
    res[dartx.add](core.RegExp.new("[[:^alpha:]]"));
    res[dartx.add](core.RegExp.new("[[:^ascii:]]"));
    res[dartx.add](core.RegExp.new("[[:^blank:]]"));
    res[dartx.add](core.RegExp.new("[[:^cntrl:]]"));
    res[dartx.add](core.RegExp.new("[[:^digit:]]"));
    res[dartx.add](core.RegExp.new("[[:^graph:]]"));
    res[dartx.add](core.RegExp.new("[[:^lower:]]"));
    res[dartx.add](core.RegExp.new("[[:^print:]]"));
    res[dartx.add](core.RegExp.new("[[:^punct:]]"));
    res[dartx.add](core.RegExp.new("[[:^space:]]"));
    res[dartx.add](core.RegExp.new("[[:^upper:]]"));
    res[dartx.add](core.RegExp.new("[[:^word:]]"));
    res[dartx.add](core.RegExp.new("[[:^xdigit:]]"));
    res[dartx.add](core.RegExp.new("^[^d]*?$"));
    res[dartx.add](core.RegExp.new("^[^d]*?$"));
    res[dartx.add](core.RegExp.new("^[^d]*?$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^d]*?$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(" End of testinput4 "));
    res[dartx.add](core.RegExp.new("\\x80"));
    res[dartx.add](core.RegExp.new("\\xff"));
    res[dartx.add](core.RegExp.new(".{3,5}X"));
    res[dartx.add](core.RegExp.new(".{3,5}?"));
    res[dartx.add](core.RegExp.new("X(\\C)(.*)"));
    res[dartx.add](core.RegExp.new("^[ab]"));
    res[dartx.add](core.RegExp.new("^[^ab]"));
    res[dartx.add](core.RegExp.new("[^ab\\xC0-\\xF0]"));
    res[dartx.add](core.RegExp.new("[\\xFF]"));
    res[dartx.add](core.RegExp.new("[\\xff]"));
    res[dartx.add](core.RegExp.new("[^\\xFF]"));
    res[dartx.add](core.RegExp.new("[^\\xff]"));
    res[dartx.add](core.RegExp.new("anything"));
    res[dartx.add](core.RegExp.new("\\W"));
    res[dartx.add](core.RegExp.new("\\w"));
    res[dartx.add](core.RegExp.new("\\777", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\777", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc.", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc.$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R+b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R{1,3}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\H\\h\\V\\v"));
    res[dartx.add](core.RegExp.new("\\H*\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\H\\h\\V\\v"));
    res[dartx.add](core.RegExp.new("\\H*\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("[\\h]"));
    res[dartx.add](core.RegExp.new("[\\h]{3,}"));
    res[dartx.add](core.RegExp.new("[\\v]"));
    res[dartx.add](core.RegExp.new("[\\H]"));
    res[dartx.add](core.RegExp.new("[\\V]"));
    res[dartx.add](core.RegExp.new(".*$"));
    res[dartx.add](core.RegExp.new("X"));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".*a.*=.b.*"));
    res[dartx.add](core.RegExp.new("a[^]b"));
    res[dartx.add](core.RegExp.new("a[^]+b"));
    res[dartx.add](core.RegExp.new("X"));
    res[dartx.add](core.RegExp.new(" End of testinput5 "));
    res[dartx.add](core.RegExp.new("^\\pC\\pL\\pM\\pN\\pP\\pS\\pZ<"));
    res[dartx.add](core.RegExp.new("^\\PC"));
    res[dartx.add](core.RegExp.new("^\\PL"));
    res[dartx.add](core.RegExp.new("^\\PM"));
    res[dartx.add](core.RegExp.new("^\\PN"));
    res[dartx.add](core.RegExp.new("^\\PP"));
    res[dartx.add](core.RegExp.new("^\\PS"));
    res[dartx.add](core.RegExp.new("^\\PZ"));
    res[dartx.add](core.RegExp.new("^\\p{Cc}"));
    res[dartx.add](core.RegExp.new("^\\p{Cf}"));
    res[dartx.add](core.RegExp.new("^\\p{Cn}"));
    res[dartx.add](core.RegExp.new("^\\p{Co}"));
    res[dartx.add](core.RegExp.new("^\\p{Cs}"));
    res[dartx.add](core.RegExp.new("^\\p{Ll}"));
    res[dartx.add](core.RegExp.new("^\\p{Lm}"));
    res[dartx.add](core.RegExp.new("^\\p{Lo}"));
    res[dartx.add](core.RegExp.new("^\\p{Lt}"));
    res[dartx.add](core.RegExp.new("^\\p{Lu}"));
    res[dartx.add](core.RegExp.new("^\\p{Mc}"));
    res[dartx.add](core.RegExp.new("^\\p{Me}"));
    res[dartx.add](core.RegExp.new("^\\p{Mn}"));
    res[dartx.add](core.RegExp.new("^\\p{Nl}"));
    res[dartx.add](core.RegExp.new("^\\p{No}"));
    res[dartx.add](core.RegExp.new("^\\p{Pc}"));
    res[dartx.add](core.RegExp.new("^\\p{Pd}"));
    res[dartx.add](core.RegExp.new("^\\p{Pe}"));
    res[dartx.add](core.RegExp.new("^\\p{Pf}"));
    res[dartx.add](core.RegExp.new("^\\p{Pi}"));
    res[dartx.add](core.RegExp.new("^\\p{Po}"));
    res[dartx.add](core.RegExp.new("^\\p{Ps}"));
    res[dartx.add](core.RegExp.new("^\\p{Sk}"));
    res[dartx.add](core.RegExp.new("^\\p{So}"));
    res[dartx.add](core.RegExp.new("^\\p{Zl}"));
    res[dartx.add](core.RegExp.new("^\\p{Zp}"));
    res[dartx.add](core.RegExp.new("^\\p{Zs}"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,}(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,}?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}*(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}*?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2}(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,3}(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,3}?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}??(..)"));
    res[dartx.add](core.RegExp.new("\\p{Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\p{^Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\P{Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[\\p{L}]"));
    res[dartx.add](core.RegExp.new("[\\p{^L}]"));
    res[dartx.add](core.RegExp.new("[\\P{L}]"));
    res[dartx.add](core.RegExp.new("[\\P{^L}]"));
    res[dartx.add](core.RegExp.new("[\\p{Nd}]"));
    res[dartx.add](core.RegExp.new("[\\P{Nd}]+"));
    res[dartx.add](core.RegExp.new("\\D+"));
    res[dartx.add](core.RegExp.new("[\\D]+"));
    res[dartx.add](core.RegExp.new("[\\P{Nd}]+"));
    res[dartx.add](core.RegExp.new("[\\D\\P{Nd}]+"));
    res[dartx.add](core.RegExp.new("\\pL"));
    res[dartx.add](core.RegExp.new("\\pL", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\p{Lu}"));
    res[dartx.add](core.RegExp.new("\\p{Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\p{Ll}"));
    res[dartx.add](core.RegExp.new("\\p{Ll}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^\\X"));
    res[dartx.add](core.RegExp.new("^[\\X]"));
    res[dartx.add](core.RegExp.new("^(\\X*)C"));
    res[dartx.add](core.RegExp.new("^(\\X*?)C"));
    res[dartx.add](core.RegExp.new("^(\\X*)(.)"));
    res[dartx.add](core.RegExp.new("^(\\X*?)(.)"));
    res[dartx.add](core.RegExp.new("^\\X(.)"));
    res[dartx.add](core.RegExp.new("^\\X{2,3}(.)"));
    res[dartx.add](core.RegExp.new("^\\X{2,3}?(.)"));
    res[dartx.add](core.RegExp.new("^[\\p{Arabic}]"));
    res[dartx.add](core.RegExp.new("^[\\P{Yi}]"));
    res[dartx.add](core.RegExp.new("^\\p{Any}X"));
    res[dartx.add](core.RegExp.new("^\\P{Any}X"));
    res[dartx.add](core.RegExp.new("^\\p{Any}?X"));
    res[dartx.add](core.RegExp.new("^\\P{Any}?X"));
    res[dartx.add](core.RegExp.new("^\\p{Any}*X"));
    res[dartx.add](core.RegExp.new("^\\P{Any}*X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]?X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]?X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]+X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]+X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]*X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]*X"));
    res[dartx.add](core.RegExp.new("^\\p{Any}{3,5}?"));
    res[dartx.add](core.RegExp.new("^\\p{Any}{3,5}"));
    res[dartx.add](core.RegExp.new("^\\P{Any}{3,5}?"));
    res[dartx.add](core.RegExp.new("^\\p{L&}X"));
    res[dartx.add](core.RegExp.new("^[\\p{L&}]X"));
    res[dartx.add](core.RegExp.new("^[\\p{L&}]+X"));
    res[dartx.add](core.RegExp.new("^[\\p{L&}]+?X"));
    res[dartx.add](core.RegExp.new("^\\P{L&}X"));
    res[dartx.add](core.RegExp.new("^[\\P{L&}]X"));
    res[dartx.add](core.RegExp.new("^(\\p{Z}[^\\p{C}\\p{Z}]+)*$"));
    res[dartx.add](core.RegExp.new("([\\pL]=(abc))*X"));
    res[dartx.add](core.RegExp.new("^\\p{Balinese}\\p{Cuneiform}\\p{Nko}\\p{Phags_Pa}\\p{Phoenician}"));
    res[dartx.add](core.RegExp.new("The next two are special cases where the lengths of the different cases of the \\nsame character differ. The first went wrong with heap frame storage; the 2nd\\nwas broken in all cases."));
    res[dartx.add](core.RegExp.new("Check property support in non-UTF-8 mode"));
    res[dartx.add](core.RegExp.new("\\p{L}{4}"));
    res[dartx.add](core.RegExp.new("\\X{1,3}\\d"));
    res[dartx.add](core.RegExp.new("\\X?\\d"));
    res[dartx.add](core.RegExp.new("\\P{L}?\\d"));
    res[dartx.add](core.RegExp.new("[\\PPP\\x8a]{1,}\\x80"));
    res[dartx.add](core.RegExp.new("(?:[\\PPa*]*){8,}"));
    res[dartx.add](core.RegExp.new("[\\P{Any}]"));
    res[dartx.add](core.RegExp.new("[\\P{Any}\\E]"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}{2}\\277)?"));
    res[dartx.add](core.RegExp.new("[\\P{Yi}A]"));
    res[dartx.add](core.RegExp.new("[\\P{Yi}\\P{Yi}\\P{Yi}A]"));
    res[dartx.add](core.RegExp.new("[^\\P{Yi}A]"));
    res[dartx.add](core.RegExp.new("[^\\P{Yi}\\P{Yi}\\P{Yi}A]"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}*\\277)*"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}*?\\277)*"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}?\\277)*"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}??\\277)*"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}{0,3}\\277)*"));
    res[dartx.add](core.RegExp.new("(\\P{Yi}{0,3}?\\277)*"));
    res[dartx.add](core.RegExp.new("^[\\p{Arabic}]"));
    res[dartx.add](core.RegExp.new("^\\p{Cyrillic}"));
    res[dartx.add](core.RegExp.new("^\\p{Common}"));
    res[dartx.add](core.RegExp.new("^\\p{Inherited}"));
    res[dartx.add](core.RegExp.new("^\\p{Shavian}"));
    res[dartx.add](core.RegExp.new("^\\p{Deseret}"));
    res[dartx.add](core.RegExp.new("^\\p{Osmanya}"));
    res[dartx.add](core.RegExp.new("\\p{Zl}"));
    res[dartx.add](core.RegExp.new("\\p{Carian}\\p{Cham}\\p{Kayah_Li}\\p{Lepcha}\\p{Lycian}\\p{Lydian}\\p{Ol_Chiki}\\p{Rejang}\\p{Saurashtra}\\p{Sundanese}\\p{Vai}"));
    res[dartx.add](core.RegExp.new("(A)\\1", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(" End of testinput6 "));
    res[dartx.add](core.RegExp.new("abc"));
    res[dartx.add](core.RegExp.new("ab*c"));
    res[dartx.add](core.RegExp.new("ab+c"));
    res[dartx.add](core.RegExp.new("a*"));
    res[dartx.add](core.RegExp.new("(a|abcd|african)"));
    res[dartx.add](core.RegExp.new("^abc"));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\Aabc"));
    res[dartx.add](core.RegExp.new("\\Aabc", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\Gabc"));
    res[dartx.add](core.RegExp.new("x\\dy\\Dz"));
    res[dartx.add](core.RegExp.new("x\\sy\\Sz"));
    res[dartx.add](core.RegExp.new("x\\wy\\Wz"));
    res[dartx.add](core.RegExp.new("x.y"));
    res[dartx.add](core.RegExp.new("x.y"));
    res[dartx.add](core.RegExp.new("a\\d\\z"));
    res[dartx.add](core.RegExp.new("a\\d\\z", {multiLine: true}));
    res[dartx.add](core.RegExp.new("a\\d\\Z"));
    res[dartx.add](core.RegExp.new("a\\d\\Z", {multiLine: true}));
    res[dartx.add](core.RegExp.new("a\\d$"));
    res[dartx.add](core.RegExp.new("a\\d$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^a]"));
    res[dartx.add](core.RegExp.new("ab?\\w"));
    res[dartx.add](core.RegExp.new("x{0,3}yz"));
    res[dartx.add](core.RegExp.new("x{3}yz"));
    res[dartx.add](core.RegExp.new("x{2,3}yz"));
    res[dartx.add](core.RegExp.new("[^a]+"));
    res[dartx.add](core.RegExp.new("[^a]*"));
    res[dartx.add](core.RegExp.new("[^a]{3,5}"));
    res[dartx.add](core.RegExp.new("\\d*"));
    res[dartx.add](core.RegExp.new("\\D*"));
    res[dartx.add](core.RegExp.new("\\d+"));
    res[dartx.add](core.RegExp.new("\\D+"));
    res[dartx.add](core.RegExp.new("\\d?A"));
    res[dartx.add](core.RegExp.new("\\D?A"));
    res[dartx.add](core.RegExp.new("a+"));
    res[dartx.add](core.RegExp.new("^.*xyz"));
    res[dartx.add](core.RegExp.new("^.+xyz"));
    res[dartx.add](core.RegExp.new("^.?xyz"));
    res[dartx.add](core.RegExp.new("^\\d{2,3}X"));
    res[dartx.add](core.RegExp.new("^[abcd]\\d"));
    res[dartx.add](core.RegExp.new("^[abcd]*\\d"));
    res[dartx.add](core.RegExp.new("^[abcd]+\\d"));
    res[dartx.add](core.RegExp.new("^a+X"));
    res[dartx.add](core.RegExp.new("^[abcd]?\\d"));
    res[dartx.add](core.RegExp.new("^[abcd]{2,3}\\d"));
    res[dartx.add](core.RegExp.new("^(abc)*\\d"));
    res[dartx.add](core.RegExp.new("^(abc)+\\d"));
    res[dartx.add](core.RegExp.new("^(abc)?\\d"));
    res[dartx.add](core.RegExp.new("^(abc){2,3}\\d"));
    res[dartx.add](core.RegExp.new("^(a*\\w|ab)=(a*\\w|ab)"));
    res[dartx.add](core.RegExp.new("^(?=abc)\\w{5}:$"));
    res[dartx.add](core.RegExp.new("^(?!abc)\\d\\d$"));
    res[dartx.add](core.RegExp.new("(ab|cd){3,4}"));
    res[dartx.add](core.RegExp.new("^abc"));
    res[dartx.add](core.RegExp.new("^(a*|xyz)"));
    res[dartx.add](core.RegExp.new("xyz$"));
    res[dartx.add](core.RegExp.new("xyz$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\Gabc"));
    res[dartx.add](core.RegExp.new("^abcdef"));
    res[dartx.add](core.RegExp.new("^a{2,4}\\d+z"));
    res[dartx.add](core.RegExp.new("^abcdef"));
    res[dartx.add](core.RegExp.new("(ab*(cd|ef))+X"));
    res[dartx.add](core.RegExp.new("the quick brown fox"));
    res[dartx.add](core.RegExp.new("The quick brown fox", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\$\\\\\\?caxyz"));
    res[dartx.add](core.RegExp.new("a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz"));
    res[dartx.add](core.RegExp.new("^(abc){1,2}zz"));
    res[dartx.add](core.RegExp.new("^(b+?|a){1,2}?c"));
    res[dartx.add](core.RegExp.new("^(b+|a){1,2}c"));
    res[dartx.add](core.RegExp.new("^(b*|ba){1,2}?bc"));
    res[dartx.add](core.RegExp.new("^(ba|b*){1,2}?bc"));
    res[dartx.add](core.RegExp.new("^[ab\\]cde]"));
    res[dartx.add](core.RegExp.new("^[]cde]"));
    res[dartx.add](core.RegExp.new("^[^ab\\]cde]"));
    res[dartx.add](core.RegExp.new("^[^]cde]"));
    res[dartx.add](core.RegExp.new("^[0-9]+$"));
    res[dartx.add](core.RegExp.new("^.*nter"));
    res[dartx.add](core.RegExp.new("^xxx[0-9]+$"));
    res[dartx.add](core.RegExp.new("^.+[0-9][0-9][0-9]$"));
    res[dartx.add](core.RegExp.new("^.+?[0-9][0-9][0-9]$"));
    res[dartx.add](core.RegExp.new("^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$"));
    res[dartx.add](core.RegExp.new(":"));
    res[dartx.add](core.RegExp.new("([\\da-f:]+)$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$"));
    res[dartx.add](core.RegExp.new("^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$"));
    res[dartx.add](core.RegExp.new("^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$"));
    res[dartx.add](core.RegExp.new("^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$"));
    res[dartx.add](core.RegExp.new("^(?=ab(de))(abd)(e)"));
    res[dartx.add](core.RegExp.new("^(?!(ab)de|x)(abd)(f)"));
    res[dartx.add](core.RegExp.new("^(?=(ab(cd)))(ab)"));
    res[dartx.add](core.RegExp.new("^[\\da-f](\\.[\\da-f])*$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new('^\\".*\\"\\s*(;.*)?$'));
    res[dartx.add](core.RegExp.new("^$"));
    res[dartx.add](core.RegExp.new("^ab\\sc$"));
    res[dartx.add](core.RegExp.new("^a\\ b[c]d$"));
    res[dartx.add](core.RegExp.new("^(a(b(c)))(d(e(f)))(h(i(j)))(k(l(m)))$"));
    res[dartx.add](core.RegExp.new("^(?:a(b(c)))(?:d(e(f)))(?:h(i(j)))(?:k(l(m)))$"));
    res[dartx.add](core.RegExp.new("^[\\w][\\W][\\s][\\S][\\d][\\D][\\b][\\n][\\c]][\\022]"));
    res[dartx.add](core.RegExp.new("^a*\\w"));
    res[dartx.add](core.RegExp.new("^a*?\\w"));
    res[dartx.add](core.RegExp.new("^a+\\w"));
    res[dartx.add](core.RegExp.new("^a+?\\w"));
    res[dartx.add](core.RegExp.new("^\\d{8}\\w{2,}"));
    res[dartx.add](core.RegExp.new("^[aeiou\\d]{4,5}$"));
    res[dartx.add](core.RegExp.new("^[aeiou\\d]{4,5}?"));
    res[dartx.add](core.RegExp.new("^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]"));
    res[dartx.add](core.RegExp.new("^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d"));
    res[dartx.add](core.RegExp.new("^12.34"));
    res[dartx.add](core.RegExp.new("\\w+(?=\\t)"));
    res[dartx.add](core.RegExp.new("foo(?!bar)(.*)"));
    res[dartx.add](core.RegExp.new("(?:(?!foo)...|^.{0,2})bar(.*)"));
    res[dartx.add](core.RegExp.new("^(\\D*)(?=\\d)(?!123)"));
    res[dartx.add](core.RegExp.new("^1234"));
    res[dartx.add](core.RegExp.new("^1234"));
    res[dartx.add](core.RegExp.new("abcd"));
    res[dartx.add](core.RegExp.new("^abcd"));
    res[dartx.add](core.RegExp.new("(?!^)abc"));
    res[dartx.add](core.RegExp.new("(?=^)abc"));
    res[dartx.add](core.RegExp.new("^[ab]{1,3}(ab*|b)"));
    res[dartx.add](core.RegExp.new("^[ab]{1,3}?(ab*|b)"));
    res[dartx.add](core.RegExp.new("^[ab]{1,3}?(ab*?|b)"));
    res[dartx.add](core.RegExp.new("^[ab]{1,3}(ab*?|b)"));
    res[dartx.add](core.RegExp.new('(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"(?:[^\\\\\\x80-\\xff\\n\\015"]|\\\\[^\\x80-\\xff])*")(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*\\.(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"(?:[^\\\\\\x80-\\xff\\n\\015"]|\\\\[^\\x80-\\xff])*"))*(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*@(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*\\.(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]))*|(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"(?:[^\\\\\\x80-\\xff\\n\\015"]|\\\\[^\\x80-\\xff])*")(?:[^()<>@,;:".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\)|"(?:[^\\\\\\x80-\\xff\\n\\015"]|\\\\[^\\x80-\\xff])*")*<(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:@(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*\\.(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]))*(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*,(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*@(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*\\.(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]))*)*:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*)?(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"(?:[^\\\\\\x80-\\xff\\n\\015"]|\\\\[^\\x80-\\xff])*")(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*\\.(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"(?:[^\\\\\\x80-\\xff\\n\\015"]|\\\\[^\\x80-\\xff])*"))*(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*@(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])(?:(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*\\.(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]))*(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*>)(?:[\\040\\t]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff]|\\((?:[^\\\\\\x80-\\xff\\n\\015()]|\\\\[^\\x80-\\xff])*\\))*\\))*'));
    res[dartx.add](core.RegExp.new('[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"[^\\\\\\x80-\\xff\\n\\015"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"]*)*")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"[^\\\\\\x80-\\xff\\n\\015"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"]*)*")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*|(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"[^\\\\\\x80-\\xff\\n\\015"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"]*)*")[^()<>@,;:".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*(?:(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)|"[^\\\\\\x80-\\xff\\n\\015"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"]*)*")[^()<>@,;:".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*)*<[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*(?:,[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*)*:[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)?(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"[^\\\\\\x80-\\xff\\n\\015"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"]*)*")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|"[^\\\\\\x80-\\xff\\n\\015"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"]*)*")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*>)'));
    res[dartx.add](core.RegExp.new("abc\\x0def\\x00pqr\\x000xyz\\x0000AB"));
    res[dartx.add](core.RegExp.new("^[\\000-\\037]"));
    res[dartx.add](core.RegExp.new("\\0*"));
    res[dartx.add](core.RegExp.new("A\\x0{2,3}Z"));
    res[dartx.add](core.RegExp.new("^\\s"));
    res[dartx.add](core.RegExp.new("^abc"));
    res[dartx.add](core.RegExp.new("ab{1,3}bc"));
    res[dartx.add](core.RegExp.new("([^.]*)\\.([^:]*):[T ]+(.*)"));
    res[dartx.add](core.RegExp.new("([^.]*)\\.([^:]*):[T ]+(.*)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("([^.]*)\\.([^:]*):[t ]+(.*)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[W-c]+$"));
    res[dartx.add](core.RegExp.new("^[W-c]+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[\\x3f-\\x5F]+$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^abc$"));
    res[dartx.add](core.RegExp.new("\\Aabc\\Z", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\A(.)*\\Z"));
    res[dartx.add](core.RegExp.new("\\A(.)*\\Z", {multiLine: true}));
    res[dartx.add](core.RegExp.new("(?:b)|(?::+)"));
    res[dartx.add](core.RegExp.new("[-az]+"));
    res[dartx.add](core.RegExp.new("[az-]+"));
    res[dartx.add](core.RegExp.new("[a\\-z]+"));
    res[dartx.add](core.RegExp.new("[a-z]+"));
    res[dartx.add](core.RegExp.new("[\\d-]+"));
    res[dartx.add](core.RegExp.new("[\\d-z]+"));
    res[dartx.add](core.RegExp.new("\\x5c"));
    res[dartx.add](core.RegExp.new("\\x20Z"));
    res[dartx.add](core.RegExp.new("ab{3cd"));
    res[dartx.add](core.RegExp.new("ab{3,cd"));
    res[dartx.add](core.RegExp.new("ab{3,4a}cd"));
    res[dartx.add](core.RegExp.new("{4,5a}bc"));
    res[dartx.add](core.RegExp.new("^a.b"));
    res[dartx.add](core.RegExp.new("abc$"));
    res[dartx.add](core.RegExp.new("(abc)\\123"));
    res[dartx.add](core.RegExp.new("(abc)\\223"));
    res[dartx.add](core.RegExp.new("(abc)\\323"));
    res[dartx.add](core.RegExp.new("(abc)\\100"));
    res[dartx.add](core.RegExp.new("abc\\81"));
    res[dartx.add](core.RegExp.new("abc\\91"));
    res[dartx.add](core.RegExp.new("(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\12\\123"));
    res[dartx.add](core.RegExp.new("ab\\idef"));
    res[dartx.add](core.RegExp.new("a{0}bc"));
    res[dartx.add](core.RegExp.new("(a|(bc)){0,0}?xyz"));
    res[dartx.add](core.RegExp.new("abc[\\10]de"));
    res[dartx.add](core.RegExp.new("abc[\\1]de"));
    res[dartx.add](core.RegExp.new("(abc)[\\1]de"));
    res[dartx.add](core.RegExp.new("^([^a])([^\\b])([^c]*)([^d]{3,4})"));
    res[dartx.add](core.RegExp.new("[^a]"));
    res[dartx.add](core.RegExp.new("[^a]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^a]+"));
    res[dartx.add](core.RegExp.new("[^a]+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^a]+"));
    res[dartx.add](core.RegExp.new("[^k]$"));
    res[dartx.add](core.RegExp.new("[^k]{2,3}$"));
    res[dartx.add](core.RegExp.new("^\\d{8,}\\@.+[^k]$"));
    res[dartx.add](core.RegExp.new("[^a]"));
    res[dartx.add](core.RegExp.new("[^a]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^az]"));
    res[dartx.add](core.RegExp.new("[^az]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new
    res[dartx.add](core.RegExp.new("P[^*]TAIRE[^*]{1,6}?LL"));
    res[dartx.add](core.RegExp.new("P[^*]TAIRE[^*]{1,}?LL"));
    res[dartx.add](core.RegExp.new("(\\.\\d\\d[1-9]?)\\d+"));
    res[dartx.add](core.RegExp.new("(\\.\\d\\d((?=0)|\\d(?=\\d)))"));
    res[dartx.add](core.RegExp.new("\\b(foo)\\s+(\\w+)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("foo(.*)bar"));
    res[dartx.add](core.RegExp.new("foo(.*?)bar"));
    res[dartx.add](core.RegExp.new("(.*)(\\d*)"));
    res[dartx.add](core.RegExp.new("(.*)(\\d+)"));
    res[dartx.add](core.RegExp.new("(.*?)(\\d*)"));
    res[dartx.add](core.RegExp.new("(.*?)(\\d+)"));
    res[dartx.add](core.RegExp.new("(.*)(\\d+)$"));
    res[dartx.add](core.RegExp.new("(.*?)(\\d+)$"));
    res[dartx.add](core.RegExp.new("(.*)\\b(\\d+)$"));
    res[dartx.add](core.RegExp.new("(.*\\D)(\\d+)$"));
    res[dartx.add](core.RegExp.new("^\\D*(?!123)"));
    res[dartx.add](core.RegExp.new("^(\\D*)(?=\\d)(?!123)"));
    res[dartx.add](core.RegExp.new("^[W-]46]"));
    res[dartx.add](core.RegExp.new("^[W-\\]46]"));
    res[dartx.add](core.RegExp.new("\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d"));
    res[dartx.add](core.RegExp.new("word (?:[a-zA-Z0-9]+ ){0,10}otherword"));
    res[dartx.add](core.RegExp.new("word (?:[a-zA-Z0-9]+ ){0,300}otherword"));
    res[dartx.add](core.RegExp.new("^(a){0,0}"));
    res[dartx.add](core.RegExp.new("^(a){0,1}"));
    res[dartx.add](core.RegExp.new("^(a){0,2}"));
    res[dartx.add](core.RegExp.new("^(a){0,3}"));
    res[dartx.add](core.RegExp.new("^(a){0,}"));
    res[dartx.add](core.RegExp.new("^(a){1,1}"));
    res[dartx.add](core.RegExp.new("^(a){1,2}"));
    res[dartx.add](core.RegExp.new("^(a){1,3}"));
    res[dartx.add](core.RegExp.new("^(a){1,}"));
    res[dartx.add](core.RegExp.new(".*\\.gif"));
    res[dartx.add](core.RegExp.new(".{0,}\\.gif"));
    res[dartx.add](core.RegExp.new(".*\\.gif", {multiLine: true}));
    res[dartx.add](core.RegExp.new(".*\\.gif"));
    res[dartx.add](core.RegExp.new(".*\\.gif", {multiLine: true}));
    res[dartx.add](core.RegExp.new(".*$"));
    res[dartx.add](core.RegExp.new(".*$", {multiLine: true}));
    res[dartx.add](core.RegExp.new(".*$"));
    res[dartx.add](core.RegExp.new(".*$", {multiLine: true}));
    res[dartx.add](core.RegExp.new(".*$"));
    res[dartx.add](core.RegExp.new(".*$", {multiLine: true}));
    res[dartx.add](core.RegExp.new(".*$"));
    res[dartx.add](core.RegExp.new(".*$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("(.*X|^B)"));
    res[dartx.add](core.RegExp.new("(.*X|^B)", {multiLine: true}));
    res[dartx.add](core.RegExp.new("(.*X|^B)"));
    res[dartx.add](core.RegExp.new("(.*X|^B)", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^.*B"));
    res[dartx.add](core.RegExp.new("^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"));
    res[dartx.add](core.RegExp.new("^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d"));
    res[dartx.add](core.RegExp.new("^[\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d]"));
    res[dartx.add](core.RegExp.new("^[abc]{12}"));
    res[dartx.add](core.RegExp.new("^[a-c]{12}"));
    res[dartx.add](core.RegExp.new("^(a|b|c){12}"));
    res[dartx.add](core.RegExp.new("^[abcdefghijklmnopqrstuvwxy0123456789]"));
    res[dartx.add](core.RegExp.new("abcde{0,0}"));
    res[dartx.add](core.RegExp.new("ab[cd]{0,0}e"));
    res[dartx.add](core.RegExp.new("ab(c){0,0}d"));
    res[dartx.add](core.RegExp.new("a(b*)"));
    res[dartx.add](core.RegExp.new("ab\\d{0}e"));
    res[dartx.add](core.RegExp.new('"([^\\\\"]+|\\\\.)*"'));
    res[dartx.add](core.RegExp.new(".*?"));
    res[dartx.add](core.RegExp.new("\\b"));
    res[dartx.add](core.RegExp.new("\\b"));
    res[dartx.add](core.RegExp.new("<tr([\\w\\W\\s\\d][^<>]{0,})><TD([\\w\\W\\s\\d][^<>]{0,})>([\\d]{0,}\\.)(.*)((<BR>([\\w\\W\\s\\d][^<>]{0,})|[\\s]{0,}))<\\/a><\\/TD><TD([\\w\\W\\s\\d][^<>]{0,})>([\\w\\W\\s\\d][^<>]{0,})<\\/TD><TD([\\w\\W\\s\\d][^<>]{0,})>([\\w\\W\\s\\d][^<>]{0,})<\\/TD><\\/TR>", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[^a]b"));
    res[dartx.add](core.RegExp.new("a.b"));
    res[dartx.add](core.RegExp.new("a[^a]b"));
    res[dartx.add](core.RegExp.new("a.b"));
    res[dartx.add](core.RegExp.new("^(b+?|a){1,2}?c"));
    res[dartx.add](core.RegExp.new("^(b+|a){1,2}?c"));
    res[dartx.add](core.RegExp.new("(?!\\A)x", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\x0{ab}"));
    res[dartx.add](core.RegExp.new("(A|B)*?CD"));
    res[dartx.add](core.RegExp.new("(A|B)*CD"));
    res[dartx.add](core.RegExp.new("\\Aabc\\z", {multiLine: true}));
    res[dartx.add](core.RegExp.new("(\\d+)(\\w)"));
    res[dartx.add](core.RegExp.new("(a+|b+|c+)*c"));
    res[dartx.add](core.RegExp.new("(abc|)+"));
    res[dartx.add](core.RegExp.new("([a]*)*"));
    res[dartx.add](core.RegExp.new("([ab]*)*"));
    res[dartx.add](core.RegExp.new("([^a]*)*"));
    res[dartx.add](core.RegExp.new("([^ab]*)*"));
    res[dartx.add](core.RegExp.new("([a]*?)*"));
    res[dartx.add](core.RegExp.new("([ab]*?)*"));
    res[dartx.add](core.RegExp.new("([^a]*?)*"));
    res[dartx.add](core.RegExp.new("([^ab]*?)*"));
    res[dartx.add](core.RegExp.new("The following tests are taken from the Perl 5.005 test suite; some of them"));
    res[dartx.add](core.RegExp.new("are compatible with 5.004, but I'd rather not have to sort them out."));
    res[dartx.add](core.RegExp.new("abc"));
    res[dartx.add](core.RegExp.new("ab*c"));
    res[dartx.add](core.RegExp.new("ab*bc"));
    res[dartx.add](core.RegExp.new(".{1}"));
    res[dartx.add](core.RegExp.new(".{3,4}"));
    res[dartx.add](core.RegExp.new("ab{0,}bc"));
    res[dartx.add](core.RegExp.new("ab+bc"));
    res[dartx.add](core.RegExp.new("ab{1,}bc"));
    res[dartx.add](core.RegExp.new("ab+bc"));
    res[dartx.add](core.RegExp.new("ab{1,}bc"));
    res[dartx.add](core.RegExp.new("ab{1,3}bc"));
    res[dartx.add](core.RegExp.new("ab{3,4}bc"));
    res[dartx.add](core.RegExp.new("ab{4,5}bc"));
    res[dartx.add](core.RegExp.new("ab?bc"));
    res[dartx.add](core.RegExp.new("ab{0,1}bc"));
    res[dartx.add](core.RegExp.new("ab?bc"));
    res[dartx.add](core.RegExp.new("ab?c"));
    res[dartx.add](core.RegExp.new("ab{0,1}c"));
    res[dartx.add](core.RegExp.new("^abc$"));
    res[dartx.add](core.RegExp.new("^abc"));
    res[dartx.add](core.RegExp.new("^abc$"));
    res[dartx.add](core.RegExp.new("abc$"));
    res[dartx.add](core.RegExp.new("^"));
    res[dartx.add](core.RegExp.new("$"));
    res[dartx.add](core.RegExp.new("a.c"));
    res[dartx.add](core.RegExp.new("a.*c"));
    res[dartx.add](core.RegExp.new("a[bc]d"));
    res[dartx.add](core.RegExp.new("a[b-d]e"));
    res[dartx.add](core.RegExp.new("a[b-d]"));
    res[dartx.add](core.RegExp.new("a[-b]"));
    res[dartx.add](core.RegExp.new("a[b-]"));
    res[dartx.add](core.RegExp.new("a]"));
    res[dartx.add](core.RegExp.new("a[]]b"));
    res[dartx.add](core.RegExp.new("a[^bc]d"));
    res[dartx.add](core.RegExp.new("a[^-b]c"));
    res[dartx.add](core.RegExp.new("a[^]b]c"));
    res[dartx.add](core.RegExp.new("\\ba\\b"));
    res[dartx.add](core.RegExp.new("\\by\\b"));
    res[dartx.add](core.RegExp.new("\\Ba\\B"));
    res[dartx.add](core.RegExp.new("\\By\\b"));
    res[dartx.add](core.RegExp.new("\\by\\B"));
    res[dartx.add](core.RegExp.new("\\By\\B"));
    res[dartx.add](core.RegExp.new("\\w"));
    res[dartx.add](core.RegExp.new("\\W"));
    res[dartx.add](core.RegExp.new("a\\sb"));
    res[dartx.add](core.RegExp.new("a\\Sb"));
    res[dartx.add](core.RegExp.new("\\d"));
    res[dartx.add](core.RegExp.new("\\D"));
    res[dartx.add](core.RegExp.new("[\\w]"));
    res[dartx.add](core.RegExp.new("[\\W]"));
    res[dartx.add](core.RegExp.new("a[\\s]b"));
    res[dartx.add](core.RegExp.new("a[\\S]b"));
    res[dartx.add](core.RegExp.new("[\\d]"));
    res[dartx.add](core.RegExp.new("[\\D]"));
    res[dartx.add](core.RegExp.new("ab|cd"));
    res[dartx.add](core.RegExp.new("()ef"));
    res[dartx.add](core.RegExp.new("$b"));
    res[dartx.add](core.RegExp.new("a\\(b"));
    res[dartx.add](core.RegExp.new("a\\\\b"));
    res[dartx.add](core.RegExp.new("((a))"));
    res[dartx.add](core.RegExp.new("(a)b(c)"));
    res[dartx.add](core.RegExp.new("a+b+c"));
    res[dartx.add](core.RegExp.new("a{1,}b{1,}c"));
    res[dartx.add](core.RegExp.new("a.+?c"));
    res[dartx.add](core.RegExp.new("(a+|b)*"));
    res[dartx.add](core.RegExp.new("(a+|b){0,}"));
    res[dartx.add](core.RegExp.new("(a+|b)+"));
    res[dartx.add](core.RegExp.new("(a+|b){1,}"));
    res[dartx.add](core.RegExp.new("(a+|b)?"));
    res[dartx.add](core.RegExp.new("(a+|b){0,1}"));
    res[dartx.add](core.RegExp.new("[^ab]*"));
    res[dartx.add](core.RegExp.new("abc"));
    res[dartx.add](core.RegExp.new("a*"));
    res[dartx.add](core.RegExp.new("([abc])*d"));
    res[dartx.add](core.RegExp.new("([abc])*bcd"));
    res[dartx.add](core.RegExp.new("a|b|c|d|e"));
    res[dartx.add](core.RegExp.new("(a|b|c|d|e)f"));
    res[dartx.add](core.RegExp.new("abcd*efg"));
    res[dartx.add](core.RegExp.new("ab*"));
    res[dartx.add](core.RegExp.new("(ab|cd)e"));
    res[dartx.add](core.RegExp.new("[abhgefdc]ij"));
    res[dartx.add](core.RegExp.new("^(ab|cd)e"));
    res[dartx.add](core.RegExp.new("(abc|)ef"));
    res[dartx.add](core.RegExp.new("(a|b)c*d"));
    res[dartx.add](core.RegExp.new("(ab|ab*)bc"));
    res[dartx.add](core.RegExp.new("a([bc]*)c*"));
    res[dartx.add](core.RegExp.new("a([bc]*)(c*d)"));
    res[dartx.add](core.RegExp.new("a([bc]+)(c*d)"));
    res[dartx.add](core.RegExp.new("a([bc]*)(c+d)"));
    res[dartx.add](core.RegExp.new("a[bcd]*dcdcde"));
    res[dartx.add](core.RegExp.new("a[bcd]+dcdcde"));
    res[dartx.add](core.RegExp.new("(ab|a)b*c"));
    res[dartx.add](core.RegExp.new("((a)(b)c)(d)"));
    res[dartx.add](core.RegExp.new("[a-zA-Z_][a-zA-Z0-9_]*"));
    res[dartx.add](core.RegExp.new("^a(bc+|b[eh])g|.h$"));
    res[dartx.add](core.RegExp.new("(bc+d$|ef*g.|h?i(j|k))"));
    res[dartx.add](core.RegExp.new("((((((((((a))))))))))"));
    res[dartx.add](core.RegExp.new("(((((((((a)))))))))"));
    res[dartx.add](core.RegExp.new("multiple words of text"));
    res[dartx.add](core.RegExp.new("multiple words"));
    res[dartx.add](core.RegExp.new("(.*)c(.*)"));
    res[dartx.add](core.RegExp.new("\\((.*), (.*)\\)"));
    res[dartx.add](core.RegExp.new("[k]"));
    res[dartx.add](core.RegExp.new("abcd"));
    res[dartx.add](core.RegExp.new("a(bc)d"));
    res[dartx.add](core.RegExp.new("a[-]?c"));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab*c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab*bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab*?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{0,}?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab+?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab+bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{1,}bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab+bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{1,}?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{1,3}?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{3,4}?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{4,5}?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab??bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{0,1}?bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab??bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab??c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab{0,1}?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^abc$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.*?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.*c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[bc]d", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[b-d]e", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[b-d]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[-b]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[b-]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[]]b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[^bc]d", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[^-b]c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[^]b]c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab|cd", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("()ef", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("$b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\(b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\\\b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((a))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a)b(c)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a+b+c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a{1,}b{1,}c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.+?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.*?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a.{0,5}?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b)*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b){0,}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b)+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b){1,}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b)?", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b){0,1}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a+|b){0,1}?", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[^ab]*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("([abc])*d", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("([abc])*bcd", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a|b|c|d|e", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|b|c|d|e)f", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcd*efg", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("ab*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(ab|cd)e", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[abhgefdc]ij", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^(ab|cd)e", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(abc|)ef", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(a|b)c*d", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(ab|ab*)bc", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a([bc]*)c*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a([bc]*)(c*d)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a([bc]+)(c*d)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a([bc]*)(c+d)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[bcd]*dcdcde", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[bcd]+dcdcde", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(ab|a)b*c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((a)(b)c)(d)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[a-zA-Z_][a-zA-Z0-9_]*", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a(bc+|b[eh])g|.h$", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(bc+d$|ef*g.|h?i(j|k))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("((((((((((a))))))))))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(((((((((a)))))))))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?:(?:(?:(?:(?:(?:(?:(?:(?:(a))))))))))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c))))))))))", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("multiple words of text", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("multiple words", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("(.*)c(.*)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\((.*), (.*)\\)", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[k]", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcd", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a(bc)d", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a[-]?c", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a(?!b)."));
    res[dartx.add](core.RegExp.new("a(?=d)."));
    res[dartx.add](core.RegExp.new("a(?=c|d)."));
    res[dartx.add](core.RegExp.new("a(?:b|c|d)(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d)*(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d)+?(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d)+(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){2}(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){4,5}(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){4,5}?(.)"));
    res[dartx.add](core.RegExp.new("((foo)|(bar))*"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){6,7}(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){6,7}?(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){5,6}(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){5,6}?(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){5,7}(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|c|d){5,7}?(.)"));
    res[dartx.add](core.RegExp.new("a(?:b|(c|e){1,2}?|d)+?(.)"));
    res[dartx.add](core.RegExp.new("^(.+)?B"));
    res[dartx.add](core.RegExp.new("^([^a-z])|(\\^)$"));
    res[dartx.add](core.RegExp.new("^[<>]&"));
    res[dartx.add](core.RegExp.new("(?:(f)(o)(o)|(b)(a)(r))*"));
    res[dartx.add](core.RegExp.new("(?:..)*a"));
    res[dartx.add](core.RegExp.new("(?:..)*?a"));
    res[dartx.add](core.RegExp.new("^(){3,5}"));
    res[dartx.add](core.RegExp.new("^(a+)*ax"));
    res[dartx.add](core.RegExp.new("^((a|b)+)*ax"));
    res[dartx.add](core.RegExp.new("^((a|bc)+)*ax"));
    res[dartx.add](core.RegExp.new("(a|x)*ab"));
    res[dartx.add](core.RegExp.new("(a)*ab"));
    res[dartx.add](core.RegExp.new("(?:c|d)(?:)(?:a(?:)(?:b)(?:b(?:))(?:b(?:)(?:b)))"));
    res[dartx.add](core.RegExp.new("(?:c|d)(?:)(?:aaaaaaaa(?:)(?:bbbbbbbb)(?:bbbbbbbb(?:))(?:bbbbbbbb(?:)(?:bbbbbbbb)))"));
    res[dartx.add](core.RegExp.new("foo\\w*\\d{4}baz"));
    res[dartx.add](core.RegExp.new("x(~~)*(?:(?:F)?)?"));
    res[dartx.add](core.RegExp.new("^a{3}c"));
    res[dartx.add](core.RegExp.new("^a{3}c"));
    res[dartx.add](core.RegExp.new("^(?:a?b?)*$"));
    res[dartx.add](core.RegExp.new("^b"));
    res[dartx.add](core.RegExp.new("()^b"));
    res[dartx.add](core.RegExp.new("(\\w+:)+"));
    res[dartx.add](core.RegExp.new("([\\w:]+::)?(\\w+)$"));
    res[dartx.add](core.RegExp.new("^[^bcd]*(c+)"));
    res[dartx.add](core.RegExp.new("(a*)b+"));
    res[dartx.add](core.RegExp.new("([\\w:]+::)?(\\w+)$"));
    res[dartx.add](core.RegExp.new("^[^bcd]*(c+)"));
    res[dartx.add](core.RegExp.new("(>a+)ab"));
    res[dartx.add](core.RegExp.new("([[:]+)"));
    res[dartx.add](core.RegExp.new("([[=]+)"));
    res[dartx.add](core.RegExp.new("([[.]+)"));
    res[dartx.add](core.RegExp.new("a\\Z"));
    res[dartx.add](core.RegExp.new("b\\Z"));
    res[dartx.add](core.RegExp.new("b\\z"));
    res[dartx.add](core.RegExp.new("b\\Z"));
    res[dartx.add](core.RegExp.new("b\\z"));
    res[dartx.add](core.RegExp.new("((Z)+|A)*"));
    res[dartx.add](core.RegExp.new("(Z()|A)*"));
    res[dartx.add](core.RegExp.new("(Z(())|A)*"));
    res[dartx.add](core.RegExp.new("a*"));
    res[dartx.add](core.RegExp.new("^[\\d-a]"));
    res[dartx.add](core.RegExp.new("[[:space:]]+"));
    res[dartx.add](core.RegExp.new("[[:blank:]]+"));
    res[dartx.add](core.RegExp.new("[\\s]+"));
    res[dartx.add](core.RegExp.new("\\s+"));
    res[dartx.add](core.RegExp.new("a\vb"));
    res[dartx.add](core.RegExp.new("(?!\\A)x", {multiLine: true}));
    res[dartx.add](core.RegExp.new("(?!^)x", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc\\Qabc\\Eabc"));
    res[dartx.add](core.RegExp.new("abc\\Qabc\\Eabc"));
    res[dartx.add](core.RegExp.new("abc\\Qliteral\\E"));
    res[dartx.add](core.RegExp.new("abc\\Qliteral"));
    res[dartx.add](core.RegExp.new("abc\\Qliteral\\E"));
    res[dartx.add](core.RegExp.new("abc\\Qliteral\\E"));
    res[dartx.add](core.RegExp.new("\\Qabc\\$xyz\\E"));
    res[dartx.add](core.RegExp.new("\\Qabc\\E\\$\\Qxyz\\E"));
    res[dartx.add](core.RegExp.new("\\Gabc"));
    res[dartx.add](core.RegExp.new("\\Gabc."));
    res[dartx.add](core.RegExp.new("abc."));
    res[dartx.add](core.RegExp.new("[z\\Qa-d]\\E]"));
    res[dartx.add](core.RegExp.new("[\\z\\C]"));
    res[dartx.add](core.RegExp.new("\\M"));
    res[dartx.add](core.RegExp.new("(a+)*b"));
    res[dartx.add](core.RegExp.new("line\\nbreak"));
    res[dartx.add](core.RegExp.new("line\\nbreak"));
    res[dartx.add](core.RegExp.new("line\\nbreak", {multiLine: true}));
    res[dartx.add](core.RegExp.new("1234"));
    res[dartx.add](core.RegExp.new("1234"));
    res[dartx.add](core.RegExp.new("^", {multiLine: true}));
    res[dartx.add](core.RegExp.new("Content-Type\\x3A[^\\r\\n]{6,}"));
    res[dartx.add](core.RegExp.new("Content-Type\\x3A[^\\r\\n]{6,}z"));
    res[dartx.add](core.RegExp.new("Content-Type\\x3A[^a]{6,}"));
    res[dartx.add](core.RegExp.new("Content-Type\\x3A[^a]{6,}z"));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^abc", {multiLine: true}));
    res[dartx.add](core.RegExp.new(".*"));
    res[dartx.add](core.RegExp.new("\\w+(.)(.)?def"));
    res[dartx.add](core.RegExp.new("^\\w+=.*(\\\\\\n.*)*"));
    res[dartx.add](core.RegExp.new("^(a()*)*"));
    res[dartx.add](core.RegExp.new("^(?:a(?:(?:))*)*"));
    res[dartx.add](core.RegExp.new("^(a()+)+"));
    res[dartx.add](core.RegExp.new("^(?:a(?:(?:))+)+"));
    res[dartx.add](core.RegExp.new("(a|)*\\d"));
    res[dartx.add](core.RegExp.new("(?:a|)*\\d"));
    res[dartx.add](core.RegExp.new("^a.b"));
    res[dartx.add](core.RegExp.new("^abc.", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc.$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R+b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R{1,3}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a[\\R]b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new(".+foo"));
    res[dartx.add](core.RegExp.new("^$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^X", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\H\\h\\V\\v"));
    res[dartx.add](core.RegExp.new("\\H*\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\H{3,4}"));
    res[dartx.add](core.RegExp.new(".\\h{3,4}."));
    res[dartx.add](core.RegExp.new("\\h*X\\h?\\H+Y\\H?Z"));
    res[dartx.add](core.RegExp.new("\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c"));
    res[dartx.add](core.RegExp.new(".+A"));
    res[dartx.add](core.RegExp.new("\\nA"));
    res[dartx.add](core.RegExp.new("[\\r\\n]A"));
    res[dartx.add](core.RegExp.new("(\\r|\\n)A"));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R{2,4}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R{2,4}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a(?!)|\\wbc"));
    res[dartx.add](core.RegExp.new("a[]b"));
    res[dartx.add](core.RegExp.new("a[]+b"));
    res[dartx.add](core.RegExp.new("a[^]b"));
    res[dartx.add](core.RegExp.new("a[^]+b"));
    res[dartx.add](core.RegExp.new(" End of testinput7 "));
    res[dartx.add](core.RegExp.new("\\bX"));
    res[dartx.add](core.RegExp.new("\\BX"));
    res[dartx.add](core.RegExp.new("X\\b"));
    res[dartx.add](core.RegExp.new("X\\B"));
    res[dartx.add](core.RegExp.new("[^a]"));
    res[dartx.add](core.RegExp.new("abc"));
    res[dartx.add](core.RegExp.new("a.b"));
    res[dartx.add](core.RegExp.new("a(.{3})b"));
    res[dartx.add](core.RegExp.new("a(.*?)(.)"));
    res[dartx.add](core.RegExp.new("a(.*?)(.)"));
    res[dartx.add](core.RegExp.new("a(.*)(.)"));
    res[dartx.add](core.RegExp.new("a(.*)(.)"));
    res[dartx.add](core.RegExp.new("a(.)(.)"));
    res[dartx.add](core.RegExp.new("a(.)(.)"));
    res[dartx.add](core.RegExp.new("a(.?)(.)"));
    res[dartx.add](core.RegExp.new("a(.?)(.)"));
    res[dartx.add](core.RegExp.new("a(.??)(.)"));
    res[dartx.add](core.RegExp.new("a(.??)(.)"));
    res[dartx.add](core.RegExp.new("a(.{3})b"));
    res[dartx.add](core.RegExp.new("a(.{3,})b"));
    res[dartx.add](core.RegExp.new("a(.{3,}?)b"));
    res[dartx.add](core.RegExp.new("a(.{3,5})b"));
    res[dartx.add](core.RegExp.new("a(.{3,5}?)b"));
    res[dartx.add](core.RegExp.new("[^a]+"));
    res[dartx.add](core.RegExp.new("^[^a]{2}"));
    res[dartx.add](core.RegExp.new("^[^a]{2,}"));
    res[dartx.add](core.RegExp.new("^[^a]{2,}?"));
    res[dartx.add](core.RegExp.new("[^a]+", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^a]{2}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^a]{2,}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^a]{2,}?", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\D*"));
    res[dartx.add](core.RegExp.new("\\D*"));
    res[dartx.add](core.RegExp.new("\\D"));
    res[dartx.add](core.RegExp.new(">\\S"));
    res[dartx.add](core.RegExp.new("\\d"));
    res[dartx.add](core.RegExp.new("\\s"));
    res[dartx.add](core.RegExp.new("\\D+"));
    res[dartx.add](core.RegExp.new("\\D{2,3}"));
    res[dartx.add](core.RegExp.new("\\D{2,3}?"));
    res[dartx.add](core.RegExp.new("\\d+"));
    res[dartx.add](core.RegExp.new("\\d{2,3}"));
    res[dartx.add](core.RegExp.new("\\d{2,3}?"));
    res[dartx.add](core.RegExp.new("\\S+"));
    res[dartx.add](core.RegExp.new("\\S{2,3}"));
    res[dartx.add](core.RegExp.new("\\S{2,3}?"));
    res[dartx.add](core.RegExp.new(">\\s+<"));
    res[dartx.add](core.RegExp.new(">\\s{2,3}<"));
    res[dartx.add](core.RegExp.new(">\\s{2,3}?<"));
    res[dartx.add](core.RegExp.new("\\w+"));
    res[dartx.add](core.RegExp.new("\\w{2,3}"));
    res[dartx.add](core.RegExp.new("\\w{2,3}?"));
    res[dartx.add](core.RegExp.new("\\W+"));
    res[dartx.add](core.RegExp.new("\\W{2,3}"));
    res[dartx.add](core.RegExp.new("\\W{2,3}?"));
    res[dartx.add](core.RegExp.new("[\\xFF]"));
    res[dartx.add](core.RegExp.new("[\\xff]"));
    res[dartx.add](core.RegExp.new("[^\\xFF]"));
    res[dartx.add](core.RegExp.new("[^\\xff]"));
    res[dartx.add](core.RegExp.new("^[ac]*b"));
    res[dartx.add](core.RegExp.new("^[^x]*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^[^x]*b"));
    res[dartx.add](core.RegExp.new("^\\d*b"));
    res[dartx.add](core.RegExp.new("(|a)"));
    res[dartx.add](core.RegExp.new("^abc.", {multiLine: true}));
    res[dartx.add](core.RegExp.new("abc.$", {multiLine: true}));
    res[dartx.add](core.RegExp.new("^a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R*b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R+b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^a\\R{1,3}b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\H\\h\\V\\v"));
    res[dartx.add](core.RegExp.new("\\H*\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("\\H\\h\\V\\v"));
    res[dartx.add](core.RegExp.new("\\H*\\h+\\V?\\v{3,4}"));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\Rb", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("a\\R?b", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("X"));
    res[dartx.add](core.RegExp.new(" End of testinput 8 "));
    res[dartx.add](core.RegExp.new("\\pL\\P{Nd}"));
    res[dartx.add](core.RegExp.new("\\X."));
    res[dartx.add](core.RegExp.new("\\X\\X"));
    res[dartx.add](core.RegExp.new("^\\pL+"));
    res[dartx.add](core.RegExp.new("^\\PL+"));
    res[dartx.add](core.RegExp.new("^\\X+"));
    res[dartx.add](core.RegExp.new("\\X?abc"));
    res[dartx.add](core.RegExp.new("^\\X?abc"));
    res[dartx.add](core.RegExp.new("\\X*abc"));
    res[dartx.add](core.RegExp.new("^\\X*abc"));
    res[dartx.add](core.RegExp.new("^\\pL?=."));
    res[dartx.add](core.RegExp.new("^\\pL*=."));
    res[dartx.add](core.RegExp.new("^\\X{2,3}X"));
    res[dartx.add](core.RegExp.new("^\\pC\\pL\\pM\\pN\\pP\\pS\\pZ<"));
    res[dartx.add](core.RegExp.new("^\\PC"));
    res[dartx.add](core.RegExp.new("^\\PL"));
    res[dartx.add](core.RegExp.new("^\\PM"));
    res[dartx.add](core.RegExp.new("^\\PN"));
    res[dartx.add](core.RegExp.new("^\\PP"));
    res[dartx.add](core.RegExp.new("^\\PS"));
    res[dartx.add](core.RegExp.new("^\\PZ"));
    res[dartx.add](core.RegExp.new("^\\p{Cc}"));
    res[dartx.add](core.RegExp.new("^\\p{Cf}"));
    res[dartx.add](core.RegExp.new("^\\p{Cn}"));
    res[dartx.add](core.RegExp.new("^\\p{Co}"));
    res[dartx.add](core.RegExp.new("^\\p{Cs}"));
    res[dartx.add](core.RegExp.new("^\\p{Ll}"));
    res[dartx.add](core.RegExp.new("^\\p{Lm}"));
    res[dartx.add](core.RegExp.new("^\\p{Lo}"));
    res[dartx.add](core.RegExp.new("^\\p{Lt}"));
    res[dartx.add](core.RegExp.new("^\\p{Lu}"));
    res[dartx.add](core.RegExp.new("^\\p{Mc}"));
    res[dartx.add](core.RegExp.new("^\\p{Me}"));
    res[dartx.add](core.RegExp.new("^\\p{Mn}"));
    res[dartx.add](core.RegExp.new("^\\p{Nl}"));
    res[dartx.add](core.RegExp.new("^\\p{No}"));
    res[dartx.add](core.RegExp.new("^\\p{Pc}"));
    res[dartx.add](core.RegExp.new("^\\p{Pd}"));
    res[dartx.add](core.RegExp.new("^\\p{Pe}"));
    res[dartx.add](core.RegExp.new("^\\p{Pf}"));
    res[dartx.add](core.RegExp.new("^\\p{Pi}"));
    res[dartx.add](core.RegExp.new("^\\p{Po}"));
    res[dartx.add](core.RegExp.new("^\\p{Ps}"));
    res[dartx.add](core.RegExp.new("^\\p{Sk}"));
    res[dartx.add](core.RegExp.new("^\\p{So}"));
    res[dartx.add](core.RegExp.new("^\\p{Zl}"));
    res[dartx.add](core.RegExp.new("^\\p{Zp}"));
    res[dartx.add](core.RegExp.new("^\\p{Zs}"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,}(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,}?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}*(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}*?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2}(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,3}(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}{2,3}?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}?(..)"));
    res[dartx.add](core.RegExp.new("\\p{Nd}??(..)"));
    res[dartx.add](core.RegExp.new("\\p{Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\p{^Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\P{Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("[\\p{Nd}]"));
    res[dartx.add](core.RegExp.new("[\\P{Nd}]+"));
    res[dartx.add](core.RegExp.new("\\D+"));
    res[dartx.add](core.RegExp.new("[\\D]+"));
    res[dartx.add](core.RegExp.new("[\\P{Nd}]+"));
    res[dartx.add](core.RegExp.new("[\\D\\P{Nd}]+"));
    res[dartx.add](core.RegExp.new("\\pL"));
    res[dartx.add](core.RegExp.new("\\pL", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\p{Lu}"));
    res[dartx.add](core.RegExp.new("\\p{Lu}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("\\p{Ll}"));
    res[dartx.add](core.RegExp.new("\\p{Ll}", {caseSensitive: false}));
    res[dartx.add](core.RegExp.new("^\\X"));
    res[dartx.add](core.RegExp.new("^[\\X]"));
    res[dartx.add](core.RegExp.new("^(\\X*)C"));
    res[dartx.add](core.RegExp.new("^(\\X*?)C"));
    res[dartx.add](core.RegExp.new("^(\\X*)(.)"));
    res[dartx.add](core.RegExp.new("^(\\X*?)(.)"));
    res[dartx.add](core.RegExp.new("^\\X(.)"));
    res[dartx.add](core.RegExp.new("^\\X{2,3}(.)"));
    res[dartx.add](core.RegExp.new("^\\X{2,3}?(.)"));
    res[dartx.add](core.RegExp.new("^\\pN{2,3}X"));
    res[dartx.add](core.RegExp.new("^[\\p{Arabic}]"));
    res[dartx.add](core.RegExp.new("^[\\P{Yi}]"));
    res[dartx.add](core.RegExp.new("^\\p{Any}X"));
    res[dartx.add](core.RegExp.new("^\\P{Any}X"));
    res[dartx.add](core.RegExp.new("^\\p{Any}?X"));
    res[dartx.add](core.RegExp.new("^\\P{Any}?X"));
    res[dartx.add](core.RegExp.new("^\\p{Any}*X"));
    res[dartx.add](core.RegExp.new("^\\P{Any}*X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]?X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]?X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]+X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]+X"));
    res[dartx.add](core.RegExp.new("^[\\p{Any}]*X"));
    res[dartx.add](core.RegExp.new("^[\\P{Any}]*X"));
    res[dartx.add](core.RegExp.new("^\\p{Any}{3,5}?"));
    res[dartx.add](core.RegExp.new("^\\p{Any}{3,5}"));
    res[dartx.add](core.RegExp.new("^\\P{Any}{3,5}?"));
    res[dartx.add](core.RegExp.new("^\\p{L&}X"));
    res[dartx.add](core.RegExp.new("^[\\p{L&}]X"));
    res[dartx.add](core.RegExp.new("^[\\p{L&}]+X"));
    res[dartx.add](core.RegExp.new("^[\\p{L&}]+?X"));
    res[dartx.add](core.RegExp.new("^\\P{L&}X"));
    res[dartx.add](core.RegExp.new("^[\\P{L&}]X"));
    res[dartx.add](core.RegExp.new("Check property support in non-UTF-8 mode"));
    res[dartx.add](core.RegExp.new("\\p{L}{4}"));
    res[dartx.add](core.RegExp.new("\\p{Carian}\\p{Cham}\\p{Kayah_Li}\\p{Lepcha}\\p{Lycian}\\p{Lydian}\\p{Ol_Chiki}\\p{Rejang}\\p{Saurashtra}\\p{Sundanese}\\p{Vai}"));
    res[dartx.add](core.RegExp.new(" End "));
    res[dartx.add](core.RegExp.new("^[[:alnum:]]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("a", {multiLine: true, caseSensitive: false}));
    res[dartx.add](core.RegExp.new("abcde", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\x80", {multiLine: true}));
    res[dartx.add](core.RegExp.new("\\xff", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\p{L}]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\p{^L}]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\P{L}]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\P{^L}]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\p{Nd}]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[a]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[a]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\xaa]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[\\xaa]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[^a]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[^a]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[^\\xaa]", {multiLine: true}));
    res[dartx.add](core.RegExp.new("[^\\xaa]", {multiLine: true}));
    res[dartx.add](core.RegExp.new(" End of testinput10 "));
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1).firstMatch("abc"), 0);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1).firstMatch("defabc"), 1);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1).firstMatch("Aabc"), 2);
    v8_regexp_utils.assertNull(res[dartx.get](1).firstMatch("*** Failers"), 3);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1).firstMatch("Adefabc"), 4);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1).firstMatch("ABC"), 5);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](2).firstMatch("abc"), 6);
    v8_regexp_utils.assertNull(res[dartx.get](2).firstMatch("Aabc"), 7);
    v8_regexp_utils.assertNull(res[dartx.get](2).firstMatch("*** Failers"), 8);
    v8_regexp_utils.assertNull(res[dartx.get](2).firstMatch("defabc"), 9);
    v8_regexp_utils.assertNull(res[dartx.get](2).firstMatch("Adefabc"), 10);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](7).firstMatch("abc"), 11);
    v8_regexp_utils.assertNull(res[dartx.get](7).firstMatch("*** Failers"), 12);
    v8_regexp_utils.assertNull(res[dartx.get](7).firstMatch("def\nabc"), 13);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("x{5,4}"), VoidToRegExp()));
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("[abcd"), VoidToRegExp()));
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("[z-a]"), VoidToRegExp()));
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("^*"), VoidToRegExp()));
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(abc"), VoidToRegExp()));
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(?# abc"), VoidToRegExp()));
    v8_regexp_utils.assertToStringEquals("cat", res[dartx.get](11).firstMatch("this sentence eventually mentions a cat"), 20);
    v8_regexp_utils.assertToStringEquals("elephant", res[dartx.get](11).firstMatch("this sentences rambles on and on for a while and then reaches elephant"), 21);
    v8_regexp_utils.assertToStringEquals("cat", res[dartx.get](12).firstMatch("this sentence eventually mentions a cat"), 22);
    v8_regexp_utils.assertToStringEquals("elephant", res[dartx.get](12).firstMatch("this sentences rambles on and on for a while and then reaches elephant"), 23);
    v8_regexp_utils.assertToStringEquals("CAT", res[dartx.get](13).firstMatch("this sentence eventually mentions a CAT cat"), 24);
    v8_regexp_utils.assertToStringEquals("elephant", res[dartx.get](13).firstMatch("this sentences rambles on and on for a while to elephant ElePhant"), 25);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("{4,5}abc"), VoidToRegExp()));
    v8_regexp_utils.assertToStringEquals("abcb,a,b,c", res[dartx.get](18).firstMatch("abcb"), 27);
    v8_regexp_utils.assertToStringEquals("abcb,a,b,c", res[dartx.get](18).firstMatch("O0abcb"), 28);
    v8_regexp_utils.assertToStringEquals("abcb,a,b,c", res[dartx.get](18).firstMatch("O3abcb"), 29);
    v8_regexp_utils.assertToStringEquals("abcb,a,b,c", res[dartx.get](18).firstMatch("O6abcb"), 30);
    v8_regexp_utils.assertToStringEquals("abcb,a,b,c", res[dartx.get](18).firstMatch("O9abcb"), 31);
    v8_regexp_utils.assertToStringEquals("abcb,a,b,c", res[dartx.get](18).firstMatch("O12abcb"), 32);
    v8_regexp_utils.assertToStringEquals("abc,a,,", res[dartx.get](19).firstMatch("abc"), 33);
    v8_regexp_utils.assertToStringEquals("abc,a,,", res[dartx.get](19).firstMatch("O0abc"), 34);
    v8_regexp_utils.assertToStringEquals("abc,a,,", res[dartx.get](19).firstMatch("O3abc"), 35);
    v8_regexp_utils.assertToStringEquals("abc,a,,", res[dartx.get](19).firstMatch("O6abc"), 36);
    v8_regexp_utils.assertToStringEquals("aba,,a,b", res[dartx.get](19).firstMatch("aba"), 37);
    v8_regexp_utils.assertToStringEquals("aba,,a,b", res[dartx.get](19).firstMatch("O0aba"), 38);
    v8_regexp_utils.assertToStringEquals("aba,,a,b", res[dartx.get](19).firstMatch("O3aba"), 39);
    v8_regexp_utils.assertToStringEquals("aba,,a,b", res[dartx.get](19).firstMatch("O6aba"), 40);
    v8_regexp_utils.assertToStringEquals("aba,,a,b", res[dartx.get](19).firstMatch("O9aba"), 41);
    v8_regexp_utils.assertToStringEquals("aba,,a,b", res[dartx.get](19).firstMatch("O12aba"), 42);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](20).firstMatch("abc"), 43);
    v8_regexp_utils.assertNull(res[dartx.get](20).firstMatch("*** Failers"), 44);
    v8_regexp_utils.assertNull(res[dartx.get](20).firstMatch("abc\n"), 45);
    v8_regexp_utils.assertNull(res[dartx.get](20).firstMatch("abc\ndef"), 46);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](22).firstMatch("the quick brown fox"), 47);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](22).firstMatch("this is a line with the quick brown fox"), 48);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](23).firstMatch("abcdef"), 49);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](23).firstMatch("abcdefB"), 50);
    v8_regexp_utils.assertToStringEquals("defabc,abc,abc,", res[dartx.get](24).firstMatch("defabc"), 51);
    v8_regexp_utils.assertToStringEquals("Zdefabc,abc,abc,", res[dartx.get](24).firstMatch("Zdefabc"), 52);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](25).firstMatch("abc"), 53);
    v8_regexp_utils.assertNull(res[dartx.get](25).firstMatch("*** Failers"), 54);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](26).firstMatch("abcdef"), 55);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](26).firstMatch("abcdefB"), 56);
    v8_regexp_utils.assertToStringEquals("defabc,abc,abc,", res[dartx.get](27).firstMatch("defabc"), 57);
    v8_regexp_utils.assertToStringEquals("Zdefabc,abc,abc,", res[dartx.get](27).firstMatch("Zdefabc"), 58);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](28).firstMatch("the quick brown fox"), 59);
    v8_regexp_utils.assertNull(res[dartx.get](28).firstMatch("*** Failers"), 60);
    v8_regexp_utils.assertToStringEquals("The Quick Brown Fox", res[dartx.get](28).firstMatch("The Quick Brown Fox"), 61);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](29).firstMatch("the quick brown fox"), 62);
    v8_regexp_utils.assertToStringEquals("The Quick Brown Fox", res[dartx.get](29).firstMatch("The Quick Brown Fox"), 63);
    v8_regexp_utils.assertNull(res[dartx.get](30).firstMatch("*** Failers"), 64);
    v8_regexp_utils.assertNull(res[dartx.get](30).firstMatch("abc\ndef"), 65);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](31).firstMatch("abc"), 66);
    v8_regexp_utils.assertNull(res[dartx.get](31).firstMatch("abc\n"), 67);
    v8_regexp_utils.assertToStringEquals("abc,abc", res[dartx.get](33).firstMatch("abc"), 68);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new(")"), VoidToRegExp()));
    v8_regexp_utils.assertToStringEquals("-pr", res[dartx.get](35).firstMatch("co-processors, and for"), 70);
    v8_regexp_utils.assertToStringEquals("<def>ghi<klm>", res[dartx.get](36).firstMatch("abc<def>ghi<klm>nop"), 71);
    v8_regexp_utils.assertToStringEquals("<def>", res[dartx.get](37).firstMatch("abc<def>ghi<klm>nop"), 72);
    v8_regexp_utils.assertToStringEquals("<def>", res[dartx.get](37).firstMatch("abc<def>ghi<klm>nop"), 73);
    v8_regexp_utils.assertNull(res[dartx.get](37).firstMatch("abc========def"), 74);
    v8_regexp_utils.assertNull(res[dartx.get](37).firstMatch("foo"), 75);
    v8_regexp_utils.assertNull(res[dartx.get](37).firstMatch("catfoo"), 76);
    v8_regexp_utils.assertNull(res[dartx.get](37).firstMatch("*** Failers"), 77);
    v8_regexp_utils.assertNull(res[dartx.get](37).firstMatch("the barfoo"), 78);
    v8_regexp_utils.assertNull(res[dartx.get](37).firstMatch("and cattlefoo"), 79);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](40).firstMatch("a"), 80);
    v8_regexp_utils.assertNull(res[dartx.get](40).firstMatch("a\n"), 81);
    v8_regexp_utils.assertNull(res[dartx.get](40).firstMatch("*** Failers"), 82);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](40).firstMatch("Za"), 83);
    v8_regexp_utils.assertNull(res[dartx.get](40).firstMatch("Za\n"), 84);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](41).firstMatch("a"), 85);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](41).firstMatch("a\n"), 86);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](41).firstMatch("Za\n"), 87);
    v8_regexp_utils.assertNull(res[dartx.get](41).firstMatch("*** Failers"), 88);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](41).firstMatch("Za"), 89);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](44).firstMatch("foo\nbarbar"), 90);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("***Failers"), 91);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](44).firstMatch("rhubarb"), 92);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](44).firstMatch("barbell"), 93);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("abc\nbarton"), 94);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](44).firstMatch("foo\nbarbar"), 95);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("***Failers"), 96);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](44).firstMatch("rhubarb"), 97);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](44).firstMatch("barbell"), 98);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("abc\nbarton"), 99);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("abc"), 100);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("def\nabc"), 101);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("*** Failers"), 102);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](44).firstMatch("defabc"), 103);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("the bullock-cart"), 104);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("a donkey-cart race"), 105);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("*** Failers"), 106);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("cart"), 107);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("horse-and-cart"), 108);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("alphabetabcd"), 109);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("endingxyz"), 110);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("abxyZZ"), 111);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("abXyZZ"), 112);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("ZZZ"), 113);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("zZZ"), 114);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("bZZ"), 115);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("BZZ"), 116);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("*** Failers"), 117);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("ZZ"), 118);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("abXYZZ"), 119);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("zzz"), 120);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("bzz"), 121);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("bar"), 122);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("foobbar"), 123);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("*** Failers"), 124);
    v8_regexp_utils.assertNull(res[dartx.get](45).firstMatch("fooabar"), 125);
    v8_regexp_utils.assertNull(res[dartx.get](46).firstMatch("*** Failers"), 126);
    v8_regexp_utils.assertNull(res[dartx.get](46).firstMatch("a"), 127);
    v8_regexp_utils.assertNull(res[dartx.get](48).firstMatch("aaaaaa"), 128);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a[b-a]"), VoidToRegExp()), 129);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a["), VoidToRegExp()), 130);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("*a"), VoidToRegExp()), 131);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("abc)"), VoidToRegExp()), 132);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(abc"), VoidToRegExp()), 133);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a**"), VoidToRegExp()), 134);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new(")("), VoidToRegExp()), 135);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a[b-a]"), VoidToRegExp()), 136);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a["), VoidToRegExp()), 137);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("*a"), VoidToRegExp()), 138);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("abc)"), VoidToRegExp()), 139);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(abc"), VoidToRegExp()), 140);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a**"), VoidToRegExp()), 141);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new(")("), VoidToRegExp()), 142);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new(":(?:"), VoidToRegExp()), 143);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a(?{)b"), VoidToRegExp()), 144);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a(?{{})b"), VoidToRegExp()), 145);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a(?{}})b"), VoidToRegExp()), 146);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new('a(?{\\"{\\"})b'), VoidToRegExp()), 147);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new('a(?{\\"{\\"}})b'), VoidToRegExp()), 148);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("[a[:xyz:"), VoidToRegExp()), 149);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a{37,17}"), VoidToRegExp()), 150);
    v8_regexp_utils.assertToStringEquals("abcd,a,d", res[dartx.get](58).firstMatch("abcd"), 151);
    v8_regexp_utils.assertToStringEquals("abcd,a,d", res[dartx.get](58).firstMatch("abcdC2"), 152);
    v8_regexp_utils.assertToStringEquals("abcd,a,d", res[dartx.get](58).firstMatch("abcdC5"), 153);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmnopqrst,abcdefghijklmnopqrst", res[dartx.get](59).firstMatch("abcdefghijklmnopqrstuvwxyz"), 154);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmnopqrst,abcdefghijklmnopqrst", res[dartx.get](59).firstMatch("abcdefghijklmnopqrstuvwxyzC1"), 155);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmnopqrst,abcdefghijklmnopqrst", res[dartx.get](59).firstMatch("abcdefghijklmnopqrstuvwxyzG1"), 156);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmno,abcdefghijklmno", res[dartx.get](60).firstMatch("abcdefghijklmnopqrstuvwxyz"), 157);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmno,abcdefghijklmno", res[dartx.get](60).firstMatch("abcdefghijklmnopqrstuvwxyzC1G1"), 158);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmnop,abcdefghijklmnop", res[dartx.get](61).firstMatch("abcdefghijklmnopqrstuvwxyz"), 159);
    v8_regexp_utils.assertToStringEquals("abcdefghijklmnop,abcdefghijklmnop", res[dartx.get](61).firstMatch("abcdefghijklmnopqrstuvwxyzC1G1L"), 160);
    v8_regexp_utils.assertToStringEquals("adef,a,,f", res[dartx.get](62).firstMatch("adefG1G2G3G4L"), 161);
    v8_regexp_utils.assertToStringEquals("bcdef,bc,bc,f", res[dartx.get](62).firstMatch("bcdefG1G2G3G4L"), 162);
    v8_regexp_utils.assertToStringEquals("adef,a,,f", res[dartx.get](62).firstMatch("adefghijkC0"), 163);
    v8_regexp_utils.assertToStringEquals("abc def", res[dartx.get](63).firstMatch("abc defLC0"), 164);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](69).firstMatch("Mississippi"), 165);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](70).firstMatch("Mississippi"), 166);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](71).firstMatch("Mississippi"), 167);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](72).firstMatch("Mississippi"), 168);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](73).firstMatch("Mississippi"), 169);
    v8_regexp_utils.assertNull(res[dartx.get](73).firstMatch("*** Failers"), 170);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](73).firstMatch("MississippiA"), 171);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](73).firstMatch("Mississippi"), 172);
    v8_regexp_utils.assertToStringEquals("iss", res[dartx.get](74).firstMatch("ississippi"), 174);
    v8_regexp_utils.assertToStringEquals("abciss", res[dartx.get](75).firstMatch("abciss\nxyzisspqr"), 175);
    v8_regexp_utils.assertToStringEquals("Mis", res[dartx.get](76).firstMatch("Mississippi"), 176);
    v8_regexp_utils.assertToStringEquals("Mis", res[dartx.get](77).firstMatch("Mississippi"), 180);
    v8_regexp_utils.assertToStringEquals("ab\n", res[dartx.get](78).firstMatch("ab\nab\ncd"), 181);
    v8_regexp_utils.assertToStringEquals("ab\n", res[dartx.get](79).firstMatch("ab\nab\ncd"), 182);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](115).firstMatch("a"), 183);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](115).firstMatch("b"), 184);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](115).firstMatch("ab"), 185);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](115).firstMatch("\\"), 186);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](115).firstMatch("*** Failers"), 187);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](115).firstMatch("N"), 188);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](116).firstMatch("abcd"), 189);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](116).firstMatch("-abc"), 190);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](116).firstMatch("Nab-c"), 191);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](116).firstMatch("*** Failers"), 192);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](116).firstMatch("Nabc"), 193);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzz"), 194);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzzO0"), 195);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzzO1"), 196);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzzO2"), 197);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzzO3"), 198);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzzO4"), 199);
    v8_regexp_utils.assertToStringEquals("aaaabbbbzz,bbbb,z,z", res[dartx.get](117).firstMatch("aaaabbbbzzzzO5"), 200);
    v8_regexp_utils.assertToStringEquals("(abcd", res[dartx.get](118).firstMatch("(abcd)"), 201);
    v8_regexp_utils.assertToStringEquals("(abcd", res[dartx.get](118).firstMatch("(abcd)xyz"), 202);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("xyz(abcd)"), 203);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)pqr"), 204);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xycd)pqr"), 205);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("() abc ()"), 206);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("12(abcde(fsh)xyz(foo(bar))lmno)89"), 207);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("*** Failers"), 208);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](118).firstMatch("abcd"), 209);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](118).firstMatch("abcd)"), 210);
    v8_regexp_utils.assertToStringEquals("(abcd", res[dartx.get](118).firstMatch("(abcd"), 211);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)pqr"), 212);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("1(abcd)(x(y)z)pqr"), 213);
    v8_regexp_utils.assertToStringEquals("(abcd", res[dartx.get](118).firstMatch("(abcd)"), 214);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)"), 215);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(a(b(c)d)e)"), 216);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("((ab))"), 217);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("*** Failers"), 218);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("()"), 219);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("()"), 220);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("12(abcde(fsh)xyz(foo(bar))lmno)89"), 221);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)"), 222);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)"), 223);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)"), 224);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(123ab(xy)cd)"), 225);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)"), 226);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(123ab(xy)cd)"), 227);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(xy)cd)"), 228);
    v8_regexp_utils.assertToStringEquals("(abcd", res[dartx.get](118).firstMatch("(abcd(xyz<p>qrs)123)"), 229);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(cd)ef)"), 230);
    v8_regexp_utils.assertNull(res[dartx.get](118).firstMatch("(ab(cd(ef)gh)ij)"), 231);
    v8_regexp_utils.assertNull(res[dartx.get](146).firstMatch("A"), 232);
    v8_regexp_utils.assertNull(res[dartx.get](146).firstMatch("a"), 233);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("A"), 234);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("a"), 235);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("ab"), 236);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("aB"), 237);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("*** Failers"), 238);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("Ab"), 239);
    v8_regexp_utils.assertNull(res[dartx.get](147).firstMatch("AB"), 240);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("[\\200-\\110]"), VoidToRegExp()), 241);
    v8_regexp_utils.assertToStringEquals("mainmain,main,", res[dartx.get](151).firstMatch("mainmain"), 243);
    v8_regexp_utils.assertToStringEquals("mainOmain,main,", res[dartx.get](151).firstMatch("mainOmain"), 244);
    v8_regexp_utils.assertToStringEquals("aba,a,", res[dartx.get](153).firstMatch("aba"), 245);
    v8_regexp_utils.assertToStringEquals("aabbaa,aa,", res[dartx.get](154).firstMatch("aabbaa"), 246);
    v8_regexp_utils.assertToStringEquals("aabbaa,aa,", res[dartx.get](155).firstMatch("aabbaa"), 247);
    v8_regexp_utils.assertToStringEquals("aabbaa,aa,", res[dartx.get](156).firstMatch("aabbaa"), 248);
    v8_regexp_utils.assertToStringEquals("aabbaa,", res[dartx.get](157).firstMatch("aabbaa"), 249);
    v8_regexp_utils.assertToStringEquals("aabbaa,aa,,", res[dartx.get](158).firstMatch("aabbaa"), 250);
    v8_regexp_utils.assertToStringEquals("aabbaa,,", res[dartx.get](159).firstMatch("aabbaa"), 251);
    v8_regexp_utils.assertToStringEquals("aabbaa,", res[dartx.get](160).firstMatch("aabbaa"), 252);
    v8_regexp_utils.assertToStringEquals("aabbbaa,", res[dartx.get](161).firstMatch("aabbbaa"), 253);
    v8_regexp_utils.assertToStringEquals("aabbbaa,", res[dartx.get](162).firstMatch("aabbbaa"), 254);
    v8_regexp_utils.assertToStringEquals("aabbaa,", res[dartx.get](163).firstMatch("aabbaa"), 255);
    v8_regexp_utils.assertToStringEquals("aabbbaa,", res[dartx.get](164).firstMatch("aabbbaa"), 256);
    v8_regexp_utils.assertToStringEquals("aabbbaa,aa,,", res[dartx.get](165).firstMatch("aabbbaa"), 257);
    v8_regexp_utils.assertToStringEquals("aabbbbaa,aa,,", res[dartx.get](166).firstMatch("aabbbbaa"), 258);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](169).firstMatch("ab"), 260);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](169).firstMatch("aB"), 261);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](169).firstMatch("*** Failers"), 262);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](169).firstMatch("AB"), 263);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](169).firstMatch("ab"), 264);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](169).firstMatch("aB"), 265);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](169).firstMatch("*** Failers"), 266);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](169).firstMatch("AB"), 267);
    v8_regexp_utils.assertNull(res[dartx.get](172).firstMatch("\\"), 268);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("*** Failers"), 269);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("xxxxx"), 270);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("now is the time for all good men to come to the aid of the party"), 271);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("*** Failers"), 272);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("this is not a line with only words and spaces!"), 273);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("12345a"), 274);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("*** Failers"), 275);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("12345+"), 276);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("aaab"), 277);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("aaab"), 278);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("aaab"), 279);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("((abc(ade)ufh()()x"), 280);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("(abc)"), 281);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("(abc(def)xyz)"), 282);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("*** Failers"), 283);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 284);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("xaaaab"), 285);
    v8_regexp_utils.assertNull(res[dartx.get](177).firstMatch("xaaaab"), 286);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("["), VoidToRegExp()), 287);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("[a-"), VoidToRegExp()), 288);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<>"), 289);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<abcd>"), 290);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<abc <123> hij>"), 291);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<abc <def> hij>"), 292);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<abc<>def>"), 293);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<abc<>"), 294);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("*** Failers"), 295);
    v8_regexp_utils.assertNull(res[dartx.get](189).firstMatch("<abc"), 296);
    v8_regexp_utils.assertToStringEquals("bc123bc,bc,bc", res[dartx.get](195).firstMatch("abc123bc"), 297);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcdef"), 298);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("1234abcdef"), 299);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 300);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcxyz"), 301);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcxyzf"), 302);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("123abcdef"), 303);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("1234abcdef"), 304);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 305);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcdef"), 306);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 307);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("x0abcdef"), 308);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("123abcdef"), 309);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("123abcdefC+"), 310);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("123abcdefC-"), 311);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 312);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("123abcdefC!1"), 313);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcabcabc"), 314);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcabcC!1!3"), 315);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 316);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcabcabcC!1!3"), 317);
    v8_regexp_utils.assertToStringEquals("C", res[dartx.get](215).firstMatch("123C+"), 318);
    v8_regexp_utils.assertToStringEquals("C", res[dartx.get](215).firstMatch("123456C+"), 319);
    v8_regexp_utils.assertToStringEquals("C", res[dartx.get](215).firstMatch("123456789C+"), 320);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("xyzabcC+"), 321);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("XxyzabcC+"), 322);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcdefC+"), 323);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcxyzC+"), 324);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("abbbbbcccC*1"), 325);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("abbbbbcccC*1"), 326);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xab"), 327);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("xbc"), 328);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xde"), 329);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xxab"), 330);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xxxab"), 331);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 332);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xyab"), 333);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abc"), 334);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("a(b)c"), 335);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("a(b(c))d"), 336);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers)"), 337);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("a(b(c)d"), 338);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("1221"), 339);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("Satan, oscillate my metallic sonatas!"), 340);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("A man, a plan, a canal: Panama!"), 341);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("Able was I ere I saw Elba."), 342);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 343);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("The quick brown fox"), 344);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("12"), 345);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("(((2+2)*-3)-7)"), 346);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("-12"), 347);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 348);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("((2+2)*-3)-7)"), 349);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xyz"), 350);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xxyzxyzz"), 351);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 352);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xxyzz"), 353);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("xxyzxyzxyzz"), 354);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("<>"), 355);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("<abcd>"), 356);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("<abc <123> hij>"), 357);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("<abc <def> hij>"), 358);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("<abc<>def>"), 359);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("<abc<>"), 360);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 361);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("<abc"), 362);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](215).firstMatch("abcdefabc"), 363);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("a=a"), 364);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("a=b"), 365);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("a=bc"), 366);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("a=a"), 367);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("a=b"), 368);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("a=bc"), 369);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("abde"), 370);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("acde"), 371);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("1221"), 372);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("Satan, oscillate my metallic sonatas!"), 373);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("A man, a plan, a canal: Panama!"), 374);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("Able was I ere I saw Elba."), 375);
    v8_regexp_utils.assertNull(res[dartx.get](215).firstMatch("*** Failers"), 376);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](215).firstMatch("The quick brown fox"), 377);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("abcdefgh"), 378);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("abcdefghC1Gtwo"), 379);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("abcdefghConeCtwo"), 380);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("abcdefghCthree"), 381);
    v8_regexp_utils.assertToStringEquals("zz,", res[dartx.get](228).firstMatch("zzaaCZ"), 382);
    v8_regexp_utils.assertToStringEquals("zz,", res[dartx.get](228).firstMatch("zzaaCA"), 383);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("[10,20,30,5,5,4,4,2,43,23,4234]"), 384);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("*** Failers"), 385);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("[]"), 386);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("[10,20,30,5,5,4,4,2,43,23,4234]"), 387);
    v8_regexp_utils.assertNull(res[dartx.get](228).firstMatch("[]"), 388);
    v8_regexp_utils.assertToStringEquals(" Baby Bjorn Active Carrier - With free SHIPPING!!, Baby Bjorn Active Carrier - With free SHIPPING!!,,", res[dartx.get](229).firstMatch(" Baby Bjorn Active Carrier - With free SHIPPING!!"), 389);
    v8_regexp_utils.assertToStringEquals(" Baby Bjorn Active Carrier - With free SHIPPING!!, Baby Bjorn Active Carrier - With free SHIPPING!!,,", res[dartx.get](230).firstMatch(" Baby Bjorn Active Carrier - With free SHIPPING!!"), 390);
    v8_regexp_utils.assertNull(res[dartx.get](238).firstMatch("Note: that { does NOT introduce a quantifier"), 391);
    v8_regexp_utils.assertToStringEquals("aacaacaacaacaac123,aac", res[dartx.get](239).firstMatch("aacaacaacaacaac123"), 392);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("abP"), 393);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("abcP"), 394);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("abcdP"), 395);
    v8_regexp_utils.assertToStringEquals("abcde", res[dartx.get](243).firstMatch("abcdeP"), 396);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("the quick brown abcP"), 397);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("** FailersP"), 398);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("the quick brown abxyz foxP"), 399);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("13/05/04P"), 400);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("13/5/2004P"), 401);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("02/05/09P"), 402);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("1P"), 403);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("1/2P"), 404);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("1/2/0P"), 405);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("1/2/04P"), 406);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("0P"), 407);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("02/P"), 408);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("02/0P"), 409);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("02/1P"), 410);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("** FailersP"), 411);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("P"), 412);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("123P"), 413);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("33/4/04P"), 414);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("3/13/04P"), 415);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("0/1/2003P"), 416);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("0/P"), 417);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("02/0/P"), 418);
    v8_regexp_utils.assertNull(res[dartx.get](243).firstMatch("02/13P"), 419);
    v8_regexp_utils.assertToStringEquals("123", res[dartx.get](248).firstMatch("123P"), 420);
    v8_regexp_utils.assertNull(res[dartx.get](248).firstMatch("aP"), 421);
    v8_regexp_utils.assertNull(res[dartx.get](248).firstMatch("bP"), 422);
    v8_regexp_utils.assertNull(res[dartx.get](248).firstMatch("cP"), 423);
    v8_regexp_utils.assertNull(res[dartx.get](248).firstMatch("c12P"), 424);
    v8_regexp_utils.assertToStringEquals("c123", res[dartx.get](248).firstMatch("c123P"), 425);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("1P"), 426);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("123P"), 427);
    v8_regexp_utils.assertToStringEquals("123X", res[dartx.get](249).firstMatch("123X"), 428);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("1234P"), 429);
    v8_regexp_utils.assertToStringEquals("1234X", res[dartx.get](249).firstMatch("1234X"), 430);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("12345P"), 431);
    v8_regexp_utils.assertToStringEquals("12345X", res[dartx.get](249).firstMatch("12345X"), 432);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("*** Failers"), 433);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("1X"), 434);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("123456P"), 435);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("abc"), 436);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("** Failers"), 437);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("bca"), 438);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("abc"), 439);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("** Failers"), 440);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("bca"), 441);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("abc"), 442);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("** Failers"), 443);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("def"), 444);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("abc"), 445);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("** Failers"), 446);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("def"), 447);
    v8_regexp_utils.assertNull(res[dartx.get](249).firstMatch("<!DOCTYPE seite SYSTEM \"http://www.lco.lineas.de/xmlCms.dtd\">\n<seite>\n<dokumenteninformation>\n<seitentitel>Partner der LCO</seitentitel>\n<sprache>de</sprache>\n<seitenbeschreibung>Partner der LINEAS Consulting\nGmbH</seitenbeschreibung>\n<schluesselworte>LINEAS Consulting GmbH Hamburg\nPartnerfirmen</schluesselworte>\n<revisit>30 days</revisit>\n<robots>index,follow</robots>\n<menueinformation>\n<aktiv>ja</aktiv>\n<menueposition>3</menueposition>\n<menuetext>Partner</menuetext>\n</menueinformation>\n<lastedited>\n<autor>LCO</autor>\n<firma>LINEAS Consulting</firma>\n<datum>15.10.2003</datum>\n</lastedited>\n</dokumenteninformation>\n<inhalt>\n\n<absatzueberschrift>Die Partnerfirmen der LINEAS Consulting\nGmbH</absatzueberschrift>\n\n<absatz><link ziel=\"http://www.ca.com/\" zielfenster=\"_blank\">\n<bild name=\"logo_ca.gif\" rahmen=\"no\"/></link> <link\nziel=\"http://www.ey.com/\" zielfenster=\"_blank\"><bild\nname=\"logo_euy.gif\" rahmen=\"no\"/></link>\n</absatz>\n\n<absatz><link ziel=\"http://www.cisco.de/\" zielfenster=\"_blank\">\n<bild name=\"logo_cisco.gif\" rahmen=\"ja\"/></link></absatz>\n\n<absatz><link ziel=\"http://www.atelion.de/\"\nzielfenster=\"_blank\"><bild\nname=\"logo_atelion.gif\" rahmen=\"no\"/></link>\n</absatz>\n\n<absatz><link ziel=\"http://www.line-information.de/\"\nzielfenster=\"_blank\">\n<bild name=\"logo_line_information.gif\" rahmen=\"no\"/></link>\n</absatz>\n\n<absatz><bild name=\"logo_aw.gif\" rahmen=\"no\"/></absatz>\n\n<absatz><link ziel=\"http://www.incognis.de/\"\nzielfenster=\"_blank\"><bild\nname=\"logo_incognis.gif\" rahmen=\"no\"/></link></absatz>\n\n<absatz><link ziel=\"http://www.addcraft.com/\"\nzielfenster=\"_blank\"><bild\nname=\"logo_addcraft.gif\" rahmen=\"no\"/></link></absatz>\n\n<absatz><link ziel=\"http://www.comendo.com/\"\nzielfenster=\"_blank\"><bild\nname=\"logo_comendo.gif\" rahmen=\"no\"/></link></absatz>\n\n</inhalt>\n</seite>"), 448);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](251).firstMatch("this is a line\nbreak"), 449);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](251).firstMatch("line one\nthis is a line\nbreak in the second line"), 450);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](252).firstMatch("this is a line\nbreak"), 451);
    v8_regexp_utils.assertNull(res[dartx.get](252).firstMatch("** Failers"), 452);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](252).firstMatch("line one\nthis is a line\nbreak in the second line"), 453);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](253).firstMatch("this is a line\nbreak"), 454);
    v8_regexp_utils.assertNull(res[dartx.get](253).firstMatch("** Failers"), 455);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](253).firstMatch("line one\nthis is a line\nbreak in the second line"), 456);
    v8_regexp_utils.assertToStringEquals("ab-cd", res[dartx.get](254).firstMatch("ab-cd"), 457);
    v8_regexp_utils.assertToStringEquals("ab=cd", res[dartx.get](254).firstMatch("ab=cd"), 458);
    v8_regexp_utils.assertNull(res[dartx.get](254).firstMatch("** Failers"), 459);
    v8_regexp_utils.assertNull(res[dartx.get](254).firstMatch("ab\ncd"), 460);
    v8_regexp_utils.assertToStringEquals("ab-cd", res[dartx.get](255).firstMatch("ab-cd"), 461);
    v8_regexp_utils.assertToStringEquals("ab=cd", res[dartx.get](255).firstMatch("ab=cd"), 462);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("ab\ncd"), 463);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("AbCd"), 464);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("** Failers"), 465);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("abcd"), 466);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("abcdefghijklAkB"), 468);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("abcdefghijklAkB"), 469);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("abcdefghijklAkB"), 470);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 471);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 472);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that"), 473);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that)"), 474);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that)stuff"), 475);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that"), 476);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that)"), 477);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that"), 478);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that)"), 479);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that"), 480);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that)"), 481);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("((this))"), 482);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that"), 483);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this(and)that)"), 484);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("(this)"), 485);
    v8_regexp_utils.assertNull(res[dartx.get](255).firstMatch("((this))"), 486);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](256).firstMatch("abc"), 487);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](256).firstMatch("abc"), 488);
    v8_regexp_utils.assertNull(res[dartx.get](256).firstMatch("a1bCA"), 489);
    v8_regexp_utils.assertNull(res[dartx.get](256).firstMatch("a2bCA"), 490);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("a bc dCACBCC"), 491);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("aabc"), 492);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("bc"), 493);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("** Failers"), 494);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("abc"), 495);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("bXaX"), 496);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("bbXaaX"), 497);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("(b)\\Xa\\X"), 498);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("bXXaYYaY"), 499);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("bXYaXXaX"), 500);
    v8_regexp_utils.assertNull(res[dartx.get](257).firstMatch("bXXaYYaY"), 501);
    v8_regexp_utils.assertToStringEquals("\v,\v", res[dartx.get](259).firstMatch("\v,\v"), 502);
    v8_regexp_utils.assertToStringEquals("\f,\r", res[dartx.get](259).firstMatch("\f,\r"), 503);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\nabc"), 504);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\nabc<lf>"), 505);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\r\nabc<lf>"), 506);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\rabc<cr>"), 507);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\r\nabc<crlf>"), 508);
    v8_regexp_utils.assertNull(res[dartx.get](260).firstMatch("** Failers"), 509);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\nabc<cr>"), 510);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\r\nabc<cr>"), 511);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\nabc<crlf>"), 512);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\rabc<crlf>"), 513);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](260).firstMatch("xyz\rabc<lf>"), 514);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc"), 515);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\n"), 516);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\npqr"), 517);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\r<cr>"), 518);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\rpqr<cr>"), 519);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\r\n<crlf>"), 520);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\r\npqr<crlf>"), 521);
    v8_regexp_utils.assertNull(res[dartx.get](261).firstMatch("** Failers"), 522);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\r"), 523);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\rpqr"), 524);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\r\n"), 525);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](261).firstMatch("xyzabc\r\npqr"), 526);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](262).firstMatch("xyz\rabcdef"), 527);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](262).firstMatch("xyz\nabcdef<lf>"), 528);
    v8_regexp_utils.assertNull(res[dartx.get](262).firstMatch("** Failers"), 529);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](262).firstMatch("xyz\nabcdef"), 530);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](263).firstMatch("xyz\nabcdef"), 531);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](263).firstMatch("xyz\rabcdef<cr>"), 532);
    v8_regexp_utils.assertNull(res[dartx.get](263).firstMatch("** Failers"), 533);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](263).firstMatch("xyz\rabcdef"), 534);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](264).firstMatch("xyz\r\nabcdef"), 535);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](264).firstMatch("xyz\rabcdef<cr>"), 536);
    v8_regexp_utils.assertNull(res[dartx.get](264).firstMatch("** Failers"), 537);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](264).firstMatch("xyz\rabcdef"), 538);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](266).firstMatch("xyz\rabc<bad>"), 539);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](266).firstMatch("abc"), 540);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](267).firstMatch("abc\ndef"), 541);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](267).firstMatch("abc\rdef"), 542);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](267).firstMatch("abc\r\ndef"), 543);
    v8_regexp_utils.assertToStringEquals("<cr>abc", res[dartx.get](267).firstMatch("<cr>abc\ndef"), 544);
    v8_regexp_utils.assertToStringEquals("<cr>abc", res[dartx.get](267).firstMatch("<cr>abc\rdef"), 545);
    v8_regexp_utils.assertToStringEquals("<cr>abc", res[dartx.get](267).firstMatch("<cr>abc\r\ndef"), 546);
    v8_regexp_utils.assertToStringEquals("<crlf>abc", res[dartx.get](267).firstMatch("<crlf>abc\ndef"), 547);
    v8_regexp_utils.assertToStringEquals("<crlf>abc", res[dartx.get](267).firstMatch("<crlf>abc\rdef"), 548);
    v8_regexp_utils.assertToStringEquals("<crlf>abc", res[dartx.get](267).firstMatch("<crlf>abc\r\ndef"), 549);
    v8_regexp_utils.assertNull(res[dartx.get](268).firstMatch("abc\ndef"), 550);
    v8_regexp_utils.assertNull(res[dartx.get](268).firstMatch("abc\rdef"), 551);
    v8_regexp_utils.assertNull(res[dartx.get](268).firstMatch("abc\r\ndef"), 552);
    v8_regexp_utils.assertToStringEquals("XY,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,XY,Y", res[dartx.get](269).firstMatch("XYO400"), 553);
    v8_regexp_utils.assertToStringEquals("aaaA5", res[dartx.get](278).firstMatch("aaaA5"), 554);
    v8_regexp_utils.assertNull(res[dartx.get](278).firstMatch("** Failers"), 555);
    v8_regexp_utils.assertNull(res[dartx.get](278).firstMatch("aaaa5"), 556);
    v8_regexp_utils.assertToStringEquals("aaaA5", res[dartx.get](279).firstMatch("aaaA5"), 557);
    v8_regexp_utils.assertToStringEquals("aaaa5", res[dartx.get](279).firstMatch("aaaa5"), 558);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("xyCabcCxyz"), 559);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("xyCabcCxyz"), 560);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](350).firstMatch("bXaX"), 561);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](350).firstMatch("bXbX"), 562);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](350).firstMatch("** Failers"), 563);
    v8_regexp_utils.assertToStringEquals("aX", res[dartx.get](350).firstMatch("aXaX"), 564);
    v8_regexp_utils.assertToStringEquals("aX", res[dartx.get](350).firstMatch("aXbX"), 565);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("xx"), 566);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("xy"), 567);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](350).firstMatch("yy"), 568);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](350).firstMatch("yx"), 569);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("xx"), 570);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("xy"), 571);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](350).firstMatch("yy"), 572);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](350).firstMatch("yx"), 573);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](350).firstMatch("bxay"), 574);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](350).firstMatch("bxby"), 575);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](350).firstMatch("** Failers"), 576);
    v8_regexp_utils.assertToStringEquals("ax", res[dartx.get](350).firstMatch("axby"), 577);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](350).firstMatch("XxXxxx"), 578);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](350).firstMatch("XxXyyx"), 579);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](350).firstMatch("XxXyxx"), 580);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](350).firstMatch("** Failers"), 581);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](350).firstMatch("x"), 582);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](350).firstMatch("abcabc"), 583);
    v8_regexp_utils.assertToStringEquals("Xaaa,a", res[dartx.get](351).firstMatch("Xaaa"), 584);
    v8_regexp_utils.assertToStringEquals("Xaba,a", res[dartx.get](351).firstMatch("Xaba"), 585);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("^[a-\\\\Q\\\\E]"), VoidToRegExp()), 586);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("(xy)x"), 587);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("1221"), 588);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("Satan, oscillate my metallic sonatas!"), 589);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("A man, a plan, a canal: Panama!"), 590);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("Able was I ere I saw Elba."), 591);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("*** Failers"), 592);
    v8_regexp_utils.assertNull(res[dartx.get](353).firstMatch("The quick brown fox"), 593);
    v8_regexp_utils.assertToStringEquals("abcd:,abcd", res[dartx.get](354).firstMatch("abcd:"), 594);
    v8_regexp_utils.assertToStringEquals("abcd:,abcd", res[dartx.get](354).firstMatch("abcd:"), 595);
    v8_regexp_utils.assertToStringEquals("a:,a", res[dartx.get](354).firstMatch("a:aaxyz"), 596);
    v8_regexp_utils.assertToStringEquals("ab:,ab", res[dartx.get](354).firstMatch("ab:ababxyz"), 597);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("** Failers"), 598);
    v8_regexp_utils.assertToStringEquals("a:,a", res[dartx.get](354).firstMatch("a:axyz"), 599);
    v8_regexp_utils.assertToStringEquals("ab:,ab", res[dartx.get](354).firstMatch("ab:abxyz"), 600);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("abd"), 601);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("ce"), 602);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("abcabc1Xabc2XabcXabcabc"), 603);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("abcabc1Xabc2XabcXabcabc"), 604);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("abcabc1Xabc2XabcXabcabc"), 605);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("abcd"), 606);
    v8_regexp_utils.assertNull(res[dartx.get](354).firstMatch("metcalfe 33"), 607);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\rb"), 608);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\nb<cr>"), 609);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](356).firstMatch("ab<anycrlf> "), 610);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("** Failers"), 611);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\nb"), 612);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\nb<any>"), 613);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\rb<cr>"), 614);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\rb<any>"), 615);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](356).firstMatch("ab<any> "), 616);
    v8_regexp_utils.assertNull(res[dartx.get](356).firstMatch("a\rb<anycrlf>"), 617);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](357).firstMatch("abc1 \nabc2 \vabc3xx \fabc4 \rabc5xx \r\nabc6 abc7 JUNK"), 618);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](358).firstMatch("abc1\n abc2\v abc3\f abc4\r abc5\r\n abc6 abc7 abc9"), 619);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("a\nb"), 620);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("a\rb"), 621);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("a\r\nb"), 622);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("a\vb"), 623);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("a\fb"), 624);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("ab"), 625);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("** Failers"), 626);
    v8_regexp_utils.assertNull(res[dartx.get](361).firstMatch("a\n\rb"), 627);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](362).firstMatch("ab"), 628);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\nb"), 629);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\rb"), 630);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\r\nb"), 631);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\vb"), 632);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\fb"), 633);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("ab"), 634);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\n\rb"), 635);
    v8_regexp_utils.assertNull(res[dartx.get](362).firstMatch("a\n\r\fb"), 636);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\nb"), 637);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\rb"), 638);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\r\nb"), 639);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\vb"), 640);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\fb"), 641);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("ab"), 642);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\n\rb"), 643);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("a\n\r\fb"), 644);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("** Failers"), 645);
    v8_regexp_utils.assertNull(res[dartx.get](363).firstMatch("ab"), 646);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\nb"), 647);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\n\rb"), 648);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\n\rb"), 649);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\r\n\r\nb"), 650);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\r\n\r\n\r\nb"), 651);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\n\r\n\rb"), 652);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\n\n\r\nb"), 653);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("** Failers"), 654);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\n\n\n\rb"), 655);
    v8_regexp_utils.assertNull(res[dartx.get](364).firstMatch("a\r"), 656);
    v8_regexp_utils.assertToStringEquals("aRb", res[dartx.get](365).firstMatch("aRb"), 657);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("** Failers"), 658);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("a\nb"), 659);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("abcPXP123"), 660);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("abcPXP123"), 661);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("1.2.3.4"), 662);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("131.111.10.206"), 663);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("10.0.0.0"), 664);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("** Failers"), 665);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("10.6"), 666);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("455.3.4.5"), 667);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("1.2.3.4"), 668);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("131.111.10.206"), 669);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("10.0.0.0"), 670);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("** Failers"), 671);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("10.6"), 672);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("455.3.4.5"), 673);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("123axbaxbaxbx456"), 674);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("123axbaxbaxb456"), 675);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("123axbaxbaxbx456"), 676);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("123axbaxbaxbx456"), 677);
    v8_regexp_utils.assertNull(res[dartx.get](365).firstMatch("123axbaxbaxbx456"), 678);
    v8_regexp_utils.assertNull(res[dartx.get](366).firstMatch("ababababbbabZXXXX"), 679);
    v8_regexp_utils.assertNull(res[dartx.get](372).firstMatch("a\rb"), 680);
    v8_regexp_utils.assertNull(res[dartx.get](372).firstMatch("*** Failers"), 681);
    v8_regexp_utils.assertNull(res[dartx.get](372).firstMatch("a\nb"), 682);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](373).firstMatch("afoo"), 683);
    v8_regexp_utils.assertNull(res[dartx.get](373).firstMatch("** Failers"), 684);
    v8_regexp_utils.assertNull(res[dartx.get](373).firstMatch("\r\nfoo"), 685);
    v8_regexp_utils.assertNull(res[dartx.get](373).firstMatch("\nfoo"), 686);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](374).firstMatch("afoo"), 687);
    v8_regexp_utils.assertNull(res[dartx.get](374).firstMatch("\nfoo"), 688);
    v8_regexp_utils.assertNull(res[dartx.get](374).firstMatch("** Failers"), 689);
    v8_regexp_utils.assertNull(res[dartx.get](374).firstMatch("\r\nfoo"), 690);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](375).firstMatch("afoo"), 691);
    v8_regexp_utils.assertNull(res[dartx.get](375).firstMatch("** Failers"), 692);
    v8_regexp_utils.assertNull(res[dartx.get](375).firstMatch("\nfoo"), 693);
    v8_regexp_utils.assertNull(res[dartx.get](375).firstMatch("\r\nfoo"), 694);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](376).firstMatch("afoo"), 695);
    v8_regexp_utils.assertNull(res[dartx.get](376).firstMatch("\r\nfoo"), 696);
    v8_regexp_utils.assertNull(res[dartx.get](376).firstMatch("\nfoo"), 697);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](377).firstMatch("abc\r\rxyz"), 698);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](377).firstMatch("abc\n\rxyz  "), 699);
    v8_regexp_utils.assertNull(res[dartx.get](377).firstMatch("** Failers "), 700);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](377).firstMatch("abc\r\nxyz"), 701);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](377).firstMatch("abc\r\n\r\n"), 702);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](377).firstMatch("abc\r\n\r\n"), 703);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](377).firstMatch("abc\r\n\r\n"), 704);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](378).firstMatch("abc1\n abc2\v abc3\f abc4\r abc5\r\n abc6 abc9"), 705);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](379).firstMatch("XABC"), 706);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("** Failers "), 707);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](379).firstMatch("XABCB"), 708);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(ab|c)(?-1)"), VoidToRegExp()), 709);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("abc"), 710);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("xyabcabc"), 711);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("** Failers"), 712);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("xyabc  "), 713);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("x(?-0)y"), VoidToRegExp()), 714);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("x(?-1)y"), VoidToRegExp()), 715);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("abcX"), 716);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("Y"), 717);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("** Failers"), 718);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("abcY   "), 719);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("YabcXabc"), 720);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("YabcXabcXabc"), 721);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("** Failers"), 722);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](379).firstMatch("XabcXabc  "), 723);
    v8_regexp_utils.assertNull(res[dartx.get](379).firstMatch("Y!"), 724);
    v8_regexp_utils.assertNull(res[dartx.get](380).firstMatch("foobar"), 725);
    v8_regexp_utils.assertNull(res[dartx.get](381).firstMatch("foobar"), 726);
    v8_regexp_utils.assertToStringEquals("foobaz,foo,baz", res[dartx.get](381).firstMatch("foobaz "), 727);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("foobarbaz"), 728);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("tom-tom"), 729);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("bon-bon "), 730);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("** Failers"), 731);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("tom-bon  "), 732);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("tom-tom"), 733);
    v8_regexp_utils.assertNull(res[dartx.get](382).firstMatch("bon-bon "), 734);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(?|(abc)|(xyz))"), VoidToRegExp()), 735);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(x)(?|(abc)|(xyz))(x)"), VoidToRegExp()), 736);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xabcx"), 737);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xxyzx "), 738);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(x)(?|(abc)(pqr)|(xyz))(x)"), VoidToRegExp()), 739);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xabcpqrx"), 740);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xxyzx "), 741);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(?|(abc)|(xyz))\\1"), VoidToRegExp()), 742);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("abcabc"), 743);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xyzxyz "), 744);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("** Failers"), 745);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("abcxyz"), 746);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xyzabc   "), 747);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("abcabc"), 748);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xyzabc "), 749);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("** Failers "), 750);
    v8_regexp_utils.assertNull(res[dartx.get](383).firstMatch("xyzxyz "), 751);
    v8_regexp_utils.assertNull(res[dartx.get](384).firstMatch("X X\n"), 752);
    v8_regexp_utils.assertNull(res[dartx.get](384).firstMatch("X\tX\v"), 753);
    v8_regexp_utils.assertNull(res[dartx.get](384).firstMatch("** Failers"), 754);
    v8_regexp_utils.assertNull(res[dartx.get](384).firstMatch("  X\n   "), 755);
    v8_regexp_utils.assertNull(res[dartx.get](385).firstMatch("\t  X\n\v\f\r\n"), 756);
    v8_regexp_utils.assertNull(res[dartx.get](385).firstMatch("\t  \n\v\f\r\n"), 757);
    v8_regexp_utils.assertNull(res[dartx.get](385).firstMatch("\t  \n\v\f"), 758);
    v8_regexp_utils.assertNull(res[dartx.get](385).firstMatch("** Failers "), 759);
    v8_regexp_utils.assertNull(res[dartx.get](385).firstMatch("\t  \n\v"), 760);
    v8_regexp_utils.assertNull(res[dartx.get](385).firstMatch(" "), 761);
    v8_regexp_utils.assertNull(res[dartx.get](386).firstMatch("XY  ABCDE"), 762);
    v8_regexp_utils.assertNull(res[dartx.get](386).firstMatch("XY  PQR ST "), 763);
    v8_regexp_utils.assertNull(res[dartx.get](387).firstMatch("XY  AB    PQRS"), 764);
    v8_regexp_utils.assertNull(res[dartx.get](388).firstMatch(">XNNNYZ"), 765);
    v8_regexp_utils.assertNull(res[dartx.get](388).firstMatch(">  X NYQZ"), 766);
    v8_regexp_utils.assertNull(res[dartx.get](388).firstMatch("** Failers"), 767);
    v8_regexp_utils.assertNull(res[dartx.get](388).firstMatch(">XYZ   "), 768);
    v8_regexp_utils.assertNull(res[dartx.get](388).firstMatch(">  X NY Z"), 769);
    v8_regexp_utils.assertNull(res[dartx.get](389).firstMatch(">XY\nZ\nA\vNN\f"), 770);
    v8_regexp_utils.assertNull(res[dartx.get](389).firstMatch(">\n\rX\nY\n\vZZZ\nAAA\vNNN\f"), 771);
    v8_regexp_utils.assertNull(res[dartx.get](390).firstMatch(">\t<"), 772);
    v8_regexp_utils.assertNull(res[dartx.get](391).firstMatch(">\t  <"), 773);
    v8_regexp_utils.assertNull(res[dartx.get](396).firstMatch("** Failers"), 774);
    v8_regexp_utils.assertNull(res[dartx.get](396).firstMatch("XXXX"), 775);
    v8_regexp_utils.assertNull(res[dartx.get](397).firstMatch("XXXX Y "), 776);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaaaaa"), 777);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 778);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 779);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 780);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabcccaaabccc"), 781);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaaxxxxxx"), 782);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaa++++++ "), 783);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("bbbxxxxx"), 784);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("bbb+++++ "), 785);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("cccxxxx"), 786);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("ccc++++ "), 787);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("dddddddd   "), 788);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaaxxxxxx"), 789);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaa++++++ "), 790);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("bbbxxxxx"), 791);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("bbb+++++ "), 792);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("cccxxxx"), 793);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("ccc++++ "), 794);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("dddddddd   "), 795);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 796);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("ABX"), 797);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("AADE"), 798);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("ACDE"), 799);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("** Failers"), 800);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("AD "), 801);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("    "), 802);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaaaaa"), 803);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 804);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 805);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 806);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabcccaaabccc"), 807);
    v8_regexp_utils.assertNull(res[dartx.get](419).firstMatch("aaabccc"), 808);
    v8_regexp_utils.assertNull(res[dartx.get](422).firstMatch("\r\nA"), 809);
    v8_regexp_utils.assertToStringEquals("\nA", res[dartx.get](423).firstMatch("\r\nA "), 810);
    v8_regexp_utils.assertToStringEquals("\nA", res[dartx.get](424).firstMatch("\r\nA "), 811);
    v8_regexp_utils.assertToStringEquals("\nA,\n", res[dartx.get](425).firstMatch("\r\nA "), 812);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\nb"), 813);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("** Failers"), 814);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\rb  "), 815);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\nb"), 816);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("** Failers"), 817);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\rb  "), 818);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\rb"), 819);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("** Failers"), 820);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\nb  "), 821);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\rb"), 822);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\nb  "), 823);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("** Failers"), 824);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\r\nb  "), 825);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("** Failers"), 826);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\rb"), 827);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\nb  "), 828);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\r\nb  "), 829);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("** Failers"), 830);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\rb"), 831);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\nb  "), 832);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("a\r\nb  "), 833);
    v8_regexp_utils.assertNull(res[dartx.get](425).firstMatch("ab "), 834);
    v8_regexp_utils.assertNull(res[dartx.get](426).firstMatch("a\rb"), 835);
    v8_regexp_utils.assertNull(res[dartx.get](426).firstMatch("a\nb"), 836);
    v8_regexp_utils.assertNull(res[dartx.get](426).firstMatch("a\r\nb"), 837);
    v8_regexp_utils.assertNull(res[dartx.get](426).firstMatch("** Failers"), 838);
    v8_regexp_utils.assertNull(res[dartx.get](426).firstMatch("ab"), 839);
    v8_regexp_utils.assertNull(res[dartx.get](426).firstMatch("a\vb     "), 840);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("a\rb"), 841);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("a\nb"), 842);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("a\r\nb"), 843);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("ab"), 844);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("a\vb     "), 845);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("** Failers "), 846);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("ab<bsr_anycrlf>"), 847);
    v8_regexp_utils.assertNull(res[dartx.get](427).firstMatch("a\vb<bsr_anycrlf>"), 848);
    v8_regexp_utils.assertNull(res[dartx.get](428).firstMatch("a\rb"), 849);
    v8_regexp_utils.assertNull(res[dartx.get](428).firstMatch("a\nb"), 850);
    v8_regexp_utils.assertNull(res[dartx.get](428).firstMatch("a\r\nb"), 851);
    v8_regexp_utils.assertNull(res[dartx.get](428).firstMatch("** Failers"), 852);
    v8_regexp_utils.assertNull(res[dartx.get](428).firstMatch("ab"), 853);
    v8_regexp_utils.assertNull(res[dartx.get](428).firstMatch("a\vb     "), 854);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("a\rb"), 855);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("a\nb"), 856);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("a\r\nb"), 857);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("ab"), 858);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("a\vb     "), 859);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("** Failers "), 860);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("ab<bsr_anycrlf>"), 861);
    v8_regexp_utils.assertNull(res[dartx.get](429).firstMatch("a\vb<bsr_anycrlf>"), 862);
    v8_regexp_utils.assertNull(res[dartx.get](430).firstMatch("a\r\n\nb"), 863);
    v8_regexp_utils.assertNull(res[dartx.get](430).firstMatch("a\n\r\rb"), 864);
    v8_regexp_utils.assertNull(res[dartx.get](430).firstMatch("a\r\n\r\n\r\n\r\nb"), 865);
    v8_regexp_utils.assertNull(res[dartx.get](430).firstMatch("** Failers"), 866);
    v8_regexp_utils.assertNull(res[dartx.get](430).firstMatch("a85b"), 867);
    v8_regexp_utils.assertNull(res[dartx.get](430).firstMatch("a\v bb     "), 868);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\r\rb"), 869);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\n\n\nb"), 870);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\r\n\n\r\rb"), 871);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a85b"), 872);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\v bb     "), 873);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("** Failers "), 874);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\r\r\r\r\rb "), 875);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a85b<bsr_anycrlf>"), 876);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\v bb<bsr_anycrlf>"), 877);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\nb"), 878);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\rb "), 879);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("ab"), 880);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\nb"), 881);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("a\rb "), 882);
    v8_regexp_utils.assertNull(res[dartx.get](431).firstMatch("ab"), 883);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(?-+a)"), VoidToRegExp()), 884);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("aaaa"), 885);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("bacxxx"), 886);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("bbaccxxx "), 887);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("bbbacccxx"), 888);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("aaaa"), 889);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("bacxxx"), 890);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("bbaccxxx "), 891);
    v8_regexp_utils.assertNull(res[dartx.get](443).firstMatch("bbbacccxx"), 892);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](444).firstMatch("aaaa"), 893);
    v8_regexp_utils.assertNull(res[dartx.get](444).firstMatch("bacxxx"), 894);
    v8_regexp_utils.assertNull(res[dartx.get](444).firstMatch("bbaccxxx "), 895);
    v8_regexp_utils.assertNull(res[dartx.get](444).firstMatch("bbbacccxx"), 896);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](445).firstMatch("aaaa"), 897);
    v8_regexp_utils.assertNull(res[dartx.get](445).firstMatch("bacxxx"), 898);
    v8_regexp_utils.assertNull(res[dartx.get](445).firstMatch("bbaccxxx "), 899);
    v8_regexp_utils.assertNull(res[dartx.get](445).firstMatch("bbbacccxx"), 900);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](446).firstMatch("aaaa"), 901);
    v8_regexp_utils.assertNull(res[dartx.get](446).firstMatch("bacxxx"), 902);
    v8_regexp_utils.assertNull(res[dartx.get](446).firstMatch("bbaccxxx "), 903);
    v8_regexp_utils.assertNull(res[dartx.get](446).firstMatch("bbbacccxx"), 904);
    v8_regexp_utils.assertToStringEquals("a,a,a", res[dartx.get](447).firstMatch("aaaa"), 905);
    v8_regexp_utils.assertNull(res[dartx.get](447).firstMatch("bacxxx"), 906);
    v8_regexp_utils.assertNull(res[dartx.get](447).firstMatch("bbaccxxx "), 907);
    v8_regexp_utils.assertNull(res[dartx.get](447).firstMatch("bbbacccxx"), 908);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("bacxxx"), 909);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("XaaX"), 910);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("XAAX "), 911);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("XaaX"), 912);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("** Failers "), 913);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("XAAX "), 914);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("XaaX"), 915);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("XAAX "), 916);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("xzxx"), 917);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("yzyy "), 918);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("** Failers"), 919);
    v8_regexp_utils.assertNull(res[dartx.get](449).firstMatch("xxz  "), 920);
    v8_regexp_utils.assertToStringEquals("a,,,a", res[dartx.get](450).firstMatch("cat"), 921);
    v8_regexp_utils.assertToStringEquals("a,,,a", res[dartx.get](451).firstMatch("cat"), 922);
    v8_regexp_utils.assertToStringEquals("TA]", res[dartx.get](452).firstMatch("The ACTA] comes "), 923);
    v8_regexp_utils.assertToStringEquals("TA]", res[dartx.get](453).firstMatch("The ACTA] comes "), 924);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("abcbabc"), 925);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("abcbabc"), 926);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("abcbabc"), 927);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("** Failers "), 928);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("abcXabc"), 929);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("abcXabc"), 930);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("** Failers "), 931);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("abcbabc"), 932);
    v8_regexp_utils.assertNull(res[dartx.get](453).firstMatch("xyzbabcxyz"), 933);
    v8_regexp_utils.assertNull(res[dartx.get](456).firstMatch("** Failers"), 934);
    v8_regexp_utils.assertNull(res[dartx.get](456).firstMatch("ab"), 935);
    v8_regexp_utils.assertNull(res[dartx.get](457).firstMatch("** Failers"), 936);
    v8_regexp_utils.assertNull(res[dartx.get](457).firstMatch("ab "), 937);
    v8_regexp_utils.assertNull(res[dartx.get](457).firstMatch("** Failers"), 938);
    v8_regexp_utils.assertNull(res[dartx.get](457).firstMatch("ab "), 939);
    v8_regexp_utils.assertToStringEquals("aXb", res[dartx.get](458).firstMatch("aXb"), 940);
    v8_regexp_utils.assertToStringEquals("a\nb", res[dartx.get](458).firstMatch("a\nb "), 941);
    v8_regexp_utils.assertNull(res[dartx.get](458).firstMatch("** Failers"), 942);
    v8_regexp_utils.assertNull(res[dartx.get](458).firstMatch("ab  "), 943);
    v8_regexp_utils.assertToStringEquals("aXb", res[dartx.get](459).firstMatch("aXb"), 944);
    v8_regexp_utils.assertToStringEquals("a\nX\nXb", res[dartx.get](459).firstMatch("a\nX\nXb "), 945);
    v8_regexp_utils.assertNull(res[dartx.get](459).firstMatch("** Failers"), 946);
    v8_regexp_utils.assertNull(res[dartx.get](459).firstMatch("ab  "), 947);
    v8_regexp_utils.assertToStringEquals("acb", res[dartx.get](463).firstMatch("acb"), 948);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](463).firstMatch("ab"), 949);
    v8_regexp_utils.assertNull(res[dartx.get](463).firstMatch("ax{100}b "), 950);
    v8_regexp_utils.assertNull(res[dartx.get](463).firstMatch("*** Failers"), 951);
    v8_regexp_utils.assertNull(res[dartx.get](463).firstMatch("a\nb  "), 952);
    v8_regexp_utils.assertNull(res[dartx.get](464).firstMatch("ax{4000}xyb "), 953);
    v8_regexp_utils.assertNull(res[dartx.get](464).firstMatch("ax{4000}yb "), 954);
    v8_regexp_utils.assertNull(res[dartx.get](464).firstMatch("ax{4000}x{100}yb "), 955);
    v8_regexp_utils.assertNull(res[dartx.get](464).firstMatch("*** Failers"), 956);
    v8_regexp_utils.assertNull(res[dartx.get](464).firstMatch("ax{4000}b "), 957);
    v8_regexp_utils.assertNull(res[dartx.get](464).firstMatch("ac\ncb "), 958);
    v8_regexp_utils.assertToStringEquals("aÀ,,À", res[dartx.get](465).firstMatch("aÀb"), 959);
    v8_regexp_utils.assertToStringEquals("ax,,x", res[dartx.get](466).firstMatch("ax{100}b"), 960);
    v8_regexp_utils.assertToStringEquals("aÀb,À,b", res[dartx.get](467).firstMatch("aÀb"), 961);
    v8_regexp_utils.assertToStringEquals("ax{100}b,x{100},b", res[dartx.get](468).firstMatch("ax{100}b"), 962);
    v8_regexp_utils.assertToStringEquals("aÀ,À,", res[dartx.get](469).firstMatch("aÀbcd"), 963);
    v8_regexp_utils.assertToStringEquals("ax{,x,{", res[dartx.get](470).firstMatch("ax{240}bcd"), 964);
    v8_regexp_utils.assertToStringEquals("aÀ,À,", res[dartx.get](471).firstMatch("aÀbcd"), 965);
    v8_regexp_utils.assertToStringEquals("ax{,x,{", res[dartx.get](472).firstMatch("ax{240}bcd"), 966);
    v8_regexp_utils.assertToStringEquals("aÀ,,À", res[dartx.get](473).firstMatch("aÀbcd"), 967);
    v8_regexp_utils.assertToStringEquals("ax,,x", res[dartx.get](474).firstMatch("ax{240}bcd"), 968);
    v8_regexp_utils.assertNull(res[dartx.get](475).firstMatch("ax{1234}xyb "), 969);
    v8_regexp_utils.assertNull(res[dartx.get](475).firstMatch("ax{1234}x{4321}yb "), 970);
    v8_regexp_utils.assertNull(res[dartx.get](475).firstMatch("ax{1234}x{4321}x{3412}b "), 971);
    v8_regexp_utils.assertNull(res[dartx.get](475).firstMatch("*** Failers"), 972);
    v8_regexp_utils.assertNull(res[dartx.get](475).firstMatch("ax{1234}b "), 973);
    v8_regexp_utils.assertNull(res[dartx.get](475).firstMatch("ac\ncb "), 974);
    v8_regexp_utils.assertToStringEquals("ax{1234}xyb,x{1234}xy", res[dartx.get](476).firstMatch("ax{1234}xyb "), 975);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}yb,x{1234}x{4321}y", res[dartx.get](476).firstMatch("ax{1234}x{4321}yb "), 976);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}b,x{1234}x{4321}x{3412}", res[dartx.get](476).firstMatch("ax{1234}x{4321}x{3412}b "), 977);
    v8_regexp_utils.assertToStringEquals("axxxxbcdefghijb,xxxxbcdefghij", res[dartx.get](476).firstMatch("axxxxbcdefghijb "), 978);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}x{3421}b,x{1234}x{4321}x{3412}x{3421}", res[dartx.get](476).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 979);
    v8_regexp_utils.assertNull(res[dartx.get](476).firstMatch("*** Failers"), 980);
    v8_regexp_utils.assertToStringEquals("ax{1234}b,x{1234}", res[dartx.get](476).firstMatch("ax{1234}b "), 981);
    v8_regexp_utils.assertToStringEquals("ax{1234}xyb,x{1234}xy", res[dartx.get](477).firstMatch("ax{1234}xyb "), 982);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}yb,x{1234}x{4321}y", res[dartx.get](477).firstMatch("ax{1234}x{4321}yb "), 983);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}b,x{1234}x{4321}x{3412}", res[dartx.get](477).firstMatch("ax{1234}x{4321}x{3412}b "), 984);
    v8_regexp_utils.assertToStringEquals("axxxxb,xxxx", res[dartx.get](477).firstMatch("axxxxbcdefghijb "), 985);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}x{3421}b,x{1234}x{4321}x{3412}x{3421}", res[dartx.get](477).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 986);
    v8_regexp_utils.assertNull(res[dartx.get](477).firstMatch("*** Failers"), 987);
    v8_regexp_utils.assertToStringEquals("ax{1234}b,x{1234}", res[dartx.get](477).firstMatch("ax{1234}b "), 988);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("ax{1234}xyb "), 989);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("ax{1234}x{4321}yb "), 990);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("ax{1234}x{4321}x{3412}b "), 991);
    v8_regexp_utils.assertToStringEquals("axxxxb,xxxx", res[dartx.get](478).firstMatch("axxxxbcdefghijb "), 992);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 993);
    v8_regexp_utils.assertToStringEquals("axbxxb,xbxx", res[dartx.get](478).firstMatch("axbxxbcdefghijb "), 994);
    v8_regexp_utils.assertToStringEquals("axxxxxb,xxxxx", res[dartx.get](478).firstMatch("axxxxxbcdefghijb "), 995);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("*** Failers"), 996);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("ax{1234}b "), 997);
    v8_regexp_utils.assertNull(res[dartx.get](478).firstMatch("axxxxxxbcdefghijb "), 998);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{1234}xyb "), 999);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{1234}x{4321}yb "), 1000);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{1234}x{4321}x{3412}b "), 1001);
    v8_regexp_utils.assertToStringEquals("axxxxb,xxxx", res[dartx.get](479).firstMatch("axxxxbcdefghijb "), 1002);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 1003);
    v8_regexp_utils.assertToStringEquals("axbxxb,xbxx", res[dartx.get](479).firstMatch("axbxxbcdefghijb "), 1004);
    v8_regexp_utils.assertToStringEquals("axxxxxb,xxxxx", res[dartx.get](479).firstMatch("axxxxxbcdefghijb "), 1005);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("*** Failers"), 1006);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{1234}b "), 1007);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("axxxxxxbcdefghijb "), 1008);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("*** Failers"), 1009);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("x{100}"), 1010);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("aXbcd"), 1011);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{100}bcd"), 1012);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("ax{100000}bcd"), 1013);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("x{100}x{100}x{100}b"), 1014);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("*** Failers "), 1015);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("x{100}x{100}b"), 1016);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("x{ab} "), 1017);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("Â«"), 1018);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("*** Failers "), 1019);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch(" {ab}"), 1020);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("WXYZ"), 1021);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("x{256}XYZ "), 1022);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("*** Failers"), 1023);
    v8_regexp_utils.assertNull(res[dartx.get](479).firstMatch("XYZ "), 1024);
    v8_regexp_utils.assertNull(res[dartx.get](480).firstMatch("Xx{1234}"), 1025);
    v8_regexp_utils.assertNull(res[dartx.get](481).firstMatch("Xx{1234}YZ"), 1026);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](482).firstMatch("XYZabcdce"), 1027);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](483).firstMatch("XYZabcde"), 1028);
    v8_regexp_utils.assertNull(res[dartx.get](484).firstMatch("Xabcdefg   "), 1029);
    v8_regexp_utils.assertNull(res[dartx.get](484).firstMatch("Xx{1234} "), 1030);
    v8_regexp_utils.assertNull(res[dartx.get](484).firstMatch("Xx{1234}YZ"), 1031);
    v8_regexp_utils.assertNull(res[dartx.get](484).firstMatch("Xx{1234}x{512}  "), 1032);
    v8_regexp_utils.assertNull(res[dartx.get](484).firstMatch("Xx{1234}x{512}YZ"), 1033);
    v8_regexp_utils.assertNull(res[dartx.get](485).firstMatch("Xabcdefg   "), 1034);
    v8_regexp_utils.assertNull(res[dartx.get](485).firstMatch("Xx{1234} "), 1035);
    v8_regexp_utils.assertNull(res[dartx.get](485).firstMatch("Xx{1234}YZ"), 1036);
    v8_regexp_utils.assertNull(res[dartx.get](485).firstMatch("Xx{1234}x{512}  "), 1037);
    v8_regexp_utils.assertToStringEquals("bcd", res[dartx.get](486).firstMatch("bcd"), 1038);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](487).firstMatch("x{100}bc"), 1040);
    v8_regexp_utils.assertToStringEquals("x{100}bcA", res[dartx.get](488).firstMatch("x{100}bcAa"), 1041);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](489).firstMatch("x{100}bca"), 1042);
    v8_regexp_utils.assertToStringEquals("bcd", res[dartx.get](490).firstMatch("bcd"), 1043);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](491).firstMatch("x{100}bc"), 1045);
    v8_regexp_utils.assertToStringEquals("x{100}bc", res[dartx.get](492).firstMatch("x{100}bcAa"), 1046);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](493).firstMatch("x{100}bca"), 1047);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcd"), 1048);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcd"), 1049);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](493).firstMatch("x{100}x{100} "), 1050);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](493).firstMatch("x{100}x{100} "), 1051);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](493).firstMatch("x{100}x{100}x{100}x{100} "), 1052);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abce"), 1053);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](493).firstMatch("x{100}x{100}x{100}x{100} "), 1054);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcdx{100}x{100}x{100}x{100} "), 1055);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcdx{100}x{100}x{100}x{100} "), 1056);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcdx{100}x{100}x{100}x{100} "), 1057);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcdx{100}x{100}x{100}XX"), 1058);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcdx{100}x{100}x{100}x{100}x{100}x{100}x{100}XX"), 1059);
    v8_regexp_utils.assertNull(res[dartx.get](493).firstMatch("abcdx{100}x{100}x{100}x{100}x{100}x{100}x{100}XX"), 1060);
    v8_regexp_utils.assertToStringEquals("Xy", res[dartx.get](493).firstMatch("Xyyyax{100}x{100}bXzzz"), 1061);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](496).firstMatch("1X2"), 1062);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](496).firstMatch("1x{100}2 "), 1063);
    v8_regexp_utils.assertToStringEquals(">X", res[dartx.get](497).firstMatch("> >X Y"), 1064);
    v8_regexp_utils.assertToStringEquals(">x", res[dartx.get](497).firstMatch("> >x{100} Y"), 1065);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](498).firstMatch("x{100}3"), 1066);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](499).firstMatch("x{100} X"), 1067);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](500).firstMatch("12abcd34"), 1068);
    v8_regexp_utils.assertToStringEquals("*** Failers", res[dartx.get](500).firstMatch("*** Failers"), 1069);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](500).firstMatch("1234  "), 1070);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](501).firstMatch("12abcd34"), 1071);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](501).firstMatch("12ab34"), 1072);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](501).firstMatch("*** Failers  "), 1073);
    v8_regexp_utils.assertNull(res[dartx.get](501).firstMatch("1234"), 1074);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](501).firstMatch("12a34  "), 1075);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](502).firstMatch("12abcd34"), 1076);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](502).firstMatch("12ab34"), 1077);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](502).firstMatch("*** Failers  "), 1078);
    v8_regexp_utils.assertNull(res[dartx.get](502).firstMatch("1234"), 1079);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](502).firstMatch("12a34  "), 1080);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](503).firstMatch("12abcd34"), 1081);
    v8_regexp_utils.assertNull(res[dartx.get](503).firstMatch("*** Failers"), 1082);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](504).firstMatch("12abcd34"), 1083);
    v8_regexp_utils.assertToStringEquals("123", res[dartx.get](504).firstMatch("1234abcd"), 1084);
    v8_regexp_utils.assertNull(res[dartx.get](504).firstMatch("*** Failers  "), 1085);
    v8_regexp_utils.assertNull(res[dartx.get](504).firstMatch("1.4 "), 1086);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](505).firstMatch("12abcd34"), 1087);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](505).firstMatch("1234abcd"), 1088);
    v8_regexp_utils.assertNull(res[dartx.get](505).firstMatch("*** Failers  "), 1089);
    v8_regexp_utils.assertNull(res[dartx.get](505).firstMatch("1.4 "), 1090);
    v8_regexp_utils.assertToStringEquals("12abcd34", res[dartx.get](506).firstMatch("12abcd34"), 1091);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](506).firstMatch("*** Failers"), 1092);
    v8_regexp_utils.assertNull(res[dartx.get](506).firstMatch("     "), 1093);
    v8_regexp_utils.assertToStringEquals("12a", res[dartx.get](507).firstMatch("12abcd34"), 1094);
    v8_regexp_utils.assertToStringEquals("123", res[dartx.get](507).firstMatch("1234abcd"), 1095);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](507).firstMatch("*** Failers"), 1096);
    v8_regexp_utils.assertNull(res[dartx.get](507).firstMatch("       "), 1097);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](508).firstMatch("12abcd34"), 1098);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](508).firstMatch("1234abcd"), 1099);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](508).firstMatch("*** Failers"), 1100);
    v8_regexp_utils.assertNull(res[dartx.get](508).firstMatch("       "), 1101);
    v8_regexp_utils.assertToStringEquals(">      <", res[dartx.get](509).firstMatch("12>      <34"), 1102);
    v8_regexp_utils.assertNull(res[dartx.get](509).firstMatch("*** Failers"), 1103);
    v8_regexp_utils.assertToStringEquals(">  <", res[dartx.get](510).firstMatch("ab>  <cd"), 1104);
    v8_regexp_utils.assertToStringEquals(">   <", res[dartx.get](510).firstMatch("ab>   <ce"), 1105);
    v8_regexp_utils.assertNull(res[dartx.get](510).firstMatch("*** Failers"), 1106);
    v8_regexp_utils.assertNull(res[dartx.get](510).firstMatch("ab>    <cd "), 1107);
    v8_regexp_utils.assertToStringEquals(">  <", res[dartx.get](511).firstMatch("ab>  <cd"), 1108);
    v8_regexp_utils.assertToStringEquals(">   <", res[dartx.get](511).firstMatch("ab>   <ce"), 1109);
    v8_regexp_utils.assertNull(res[dartx.get](511).firstMatch("*** Failers"), 1110);
    v8_regexp_utils.assertNull(res[dartx.get](511).firstMatch("ab>    <cd "), 1111);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](512).firstMatch("12      34"), 1112);
    v8_regexp_utils.assertToStringEquals("Failers", res[dartx.get](512).firstMatch("*** Failers"), 1113);
    v8_regexp_utils.assertNull(res[dartx.get](512).firstMatch("+++=*! "), 1114);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](513).firstMatch("ab  cd"), 1115);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](513).firstMatch("abcd ce"), 1116);
    v8_regexp_utils.assertToStringEquals("Fai", res[dartx.get](513).firstMatch("*** Failers"), 1117);
    v8_regexp_utils.assertNull(res[dartx.get](513).firstMatch("a.b.c"), 1118);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](514).firstMatch("ab  cd"), 1119);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](514).firstMatch("abcd ce"), 1120);
    v8_regexp_utils.assertToStringEquals("Fa", res[dartx.get](514).firstMatch("*** Failers"), 1121);
    v8_regexp_utils.assertNull(res[dartx.get](514).firstMatch("a.b.c"), 1122);
    v8_regexp_utils.assertToStringEquals("====", res[dartx.get](515).firstMatch("12====34"), 1123);
    v8_regexp_utils.assertToStringEquals("*** ", res[dartx.get](515).firstMatch("*** Failers"), 1124);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](515).firstMatch("abcd "), 1125);
    v8_regexp_utils.assertToStringEquals("===", res[dartx.get](516).firstMatch("ab====cd"), 1126);
    v8_regexp_utils.assertToStringEquals("==", res[dartx.get](516).firstMatch("ab==cd"), 1127);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](516).firstMatch("*** Failers"), 1128);
    v8_regexp_utils.assertNull(res[dartx.get](516).firstMatch("a.b.c"), 1129);
    v8_regexp_utils.assertToStringEquals("==", res[dartx.get](517).firstMatch("ab====cd"), 1130);
    v8_regexp_utils.assertToStringEquals("==", res[dartx.get](517).firstMatch("ab==cd"), 1131);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1132);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("a.b.c"), 1133);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}"), 1134);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("Zx{100}"), 1135);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}Z"), 1136);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers "), 1137);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("Zx{100}"), 1138);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}"), 1139);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}Z"), 1140);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers "), 1141);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abcx{200}X"), 1142);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abcx{100}X "), 1143);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1144);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](517).firstMatch("X  "), 1145);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abcx{200}X"), 1146);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abcx{100}X "), 1147);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abQX "), 1148);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1149);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](517).firstMatch("X  "), 1150);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abcx{100}x{200}x{100}X"), 1151);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1152);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("abcx{200}X"), 1153);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](517).firstMatch("X  "), 1154);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("AX"), 1155);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{150}X"), 1156);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{500}X "), 1157);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1158);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}X"), 1159);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](517).firstMatch("x{200}X   "), 1160);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("AX"), 1161);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{150}X"), 1162);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{500}X "), 1163);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1164);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}X"), 1165);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](517).firstMatch("x{200}X   "), 1166);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("QX "), 1167);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("AX"), 1168);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{500}X "), 1169);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](517).firstMatch("*** Failers"), 1170);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{100}X"), 1171);
    v8_regexp_utils.assertNull(res[dartx.get](517).firstMatch("x{150}X"), 1172);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](517).firstMatch("x{200}X   "), 1173);
    v8_regexp_utils.assertNull(res[dartx.get](518).firstMatch("aXb"), 1174);
    v8_regexp_utils.assertNull(res[dartx.get](518).firstMatch("a\nb"), 1175);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("aXb"), 1176);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("a\nb"), 1177);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("*** Failers "), 1178);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("ax{100}b "), 1179);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("z"), 1180);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("Z "), 1181);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("x{100}"), 1182);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("*** Failers"), 1183);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("x{102}"), 1184);
    v8_regexp_utils.assertNull(res[dartx.get](519).firstMatch("y    "), 1185);
    v8_regexp_utils.assertToStringEquals("ÿ", res[dartx.get](520).firstMatch(">ÿ<"), 1186);
    v8_regexp_utils.assertNull(res[dartx.get](521).firstMatch(">x{ff}<"), 1187);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](522).firstMatch("XYZ"), 1188);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](523).firstMatch("XYZ"), 1189);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](523).firstMatch("x{123} "), 1190);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("catac"), 1191);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("ax{256}a "), 1192);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("x{85}"), 1193);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("ሴ "), 1194);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("ሴ "), 1195);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("abcdefg"), 1196);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("ab"), 1197);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](528).firstMatch("a "), 1198);
    v8_regexp_utils.assertToStringEquals("Ax", res[dartx.get](529).firstMatch("Ax{a3}BC"), 1199);
    v8_regexp_utils.assertToStringEquals("Ax", res[dartx.get](530).firstMatch("Ax{a3}BC"), 1200);
    v8_regexp_utils.assertToStringEquals("}=", res[dartx.get](531).firstMatch("+x{a3}== "), 1201);
    v8_regexp_utils.assertToStringEquals("}=", res[dartx.get](532).firstMatch("+x{a3}== "), 1202);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](533).firstMatch("x{442}x{435}x{441}x{442}"), 1203);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](534).firstMatch("x{442}x{435}x{441}x{442}"), 1204);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](535).firstMatch("x{442}x{435}x{441}x{442}"), 1205);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](536).firstMatch("x{442}x{435}x{441}x{442}"), 1206);
    v8_regexp_utils.assertToStringEquals("{", res[dartx.get](537).firstMatch("x{2442}x{2435}x{2441}x{2442}"), 1207);
    v8_regexp_utils.assertToStringEquals("{", res[dartx.get](538).firstMatch("x{2442}x{2435}x{2441}x{2442}"), 1208);
    v8_regexp_utils.assertToStringEquals("abc\n\rx{442}x{435}x{441}x{442}xyz ", res[dartx.get](539).firstMatch("abc\n\rx{442}x{435}x{441}x{442}xyz "), 1209);
    v8_regexp_utils.assertToStringEquals("x{442}x{435}x{441}x{442}", res[dartx.get](539).firstMatch("x{442}x{435}x{441}x{442}"), 1210);
    v8_regexp_utils.assertToStringEquals("c d", res[dartx.get](540).firstMatch("abc defx{442}x{443}xyz\npqr"), 1211);
    v8_regexp_utils.assertToStringEquals("c d", res[dartx.get](541).firstMatch("abc defx{442}x{443}xyz\npqr"), 1212);
    v8_regexp_utils.assertNull(res[dartx.get](542).firstMatch("+x{2442}"), 1213);
    v8_regexp_utils.assertNull(res[dartx.get](543).firstMatch("+x{2442}"), 1214);
    v8_regexp_utils.assertNull(res[dartx.get](544).firstMatch("Ax{442}"), 1215);
    v8_regexp_utils.assertNull(res[dartx.get](545).firstMatch("Ax{442}"), 1216);
    v8_regexp_utils.assertNull(res[dartx.get](546).firstMatch("Ax{442}"), 1217);
    v8_regexp_utils.assertNull(res[dartx.get](547).firstMatch("Ax{442}"), 1218);
    v8_regexp_utils.assertNull(res[dartx.get](548).firstMatch("x{e01ff}"), 1219);
    v8_regexp_utils.assertNull(res[dartx.get](549).firstMatch("Ax{422}"), 1220);
    v8_regexp_utils.assertNull(res[dartx.get](550).firstMatch("x{19}x{e01ff}"), 1221);
    v8_regexp_utils.assertNull(res[dartx.get](551).firstMatch("Ax{442}"), 1222);
    v8_regexp_utils.assertNull(res[dartx.get](552).firstMatch("Ax{442}"), 1223);
    v8_regexp_utils.assertNull(res[dartx.get](553).firstMatch("ax{442}"), 1224);
    v8_regexp_utils.assertNull(res[dartx.get](554).firstMatch("+x{2442}"), 1225);
    v8_regexp_utils.assertNull(res[dartx.get](555).firstMatch("Mx{442}"), 1226);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](556).firstMatch("abc"), 1227);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](557).firstMatch("abc"), 1228);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](558).firstMatch("abc"), 1229);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](559).firstMatch("abc"), 1230);
    v8_regexp_utils.assertNull(res[dartx.get](560).firstMatch("x{100}ax{1234}bcd"), 1231);
    v8_regexp_utils.assertNull(res[dartx.get](562).firstMatch("x{0041}x{2262}x{0391}x{002e}"), 1232);
    v8_regexp_utils.assertNull(res[dartx.get](562).firstMatch("x{D55c}x{ad6d}x{C5B4} "), 1233);
    v8_regexp_utils.assertNull(res[dartx.get](562).firstMatch("x{65e5}x{672c}x{8a9e}"), 1234);
    v8_regexp_utils.assertToStringEquals("{861}X", res[dartx.get](563).firstMatch("x{212ab}x{212ab}x{212ab}x{861}X"), 1235);
    v8_regexp_utils.assertToStringEquals("x{2", res[dartx.get](564).firstMatch("x{212ab}x{212ab}x{212ab}x{861}"), 1236);
    v8_regexp_utils.assertToStringEquals("x{c", res[dartx.get](564).firstMatch("x{c0}b"), 1237);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}aaaa/ "), 1238);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}aaaa/ "), 1239);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}ax{c0}aaa/ "), 1240);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}aaaa/ "), 1241);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}ax{c0}aaa/ "), 1242);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}aaaa/ "), 1243);
    v8_regexp_utils.assertToStringEquals("ax{", res[dartx.get](564).firstMatch("ax{c0}ax{c0}aaa/ "), 1244);
    v8_regexp_utils.assertToStringEquals("Sho", res[dartx.get](564).firstMatch("Should produce an error diagnostic"), 1245);
    v8_regexp_utils.assertNull(res[dartx.get](565).firstMatch("Xx{1234}"), 1246);
    v8_regexp_utils.assertNull(res[dartx.get](565).firstMatch("X\nabc "), 1247);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](566).firstMatch("bar"), 1248);
    v8_regexp_utils.assertNull(res[dartx.get](566).firstMatch("*** Failers"), 1249);
    v8_regexp_utils.assertNull(res[dartx.get](566).firstMatch("c"), 1250);
    v8_regexp_utils.assertNull(res[dartx.get](566).firstMatch("x{ff}"), 1251);
    v8_regexp_utils.assertNull(res[dartx.get](566).firstMatch("x{100}  "), 1252);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](567).firstMatch("c"), 1253);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](567).firstMatch("x{ff}"), 1254);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](567).firstMatch("x{100}  "), 1255);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](567).firstMatch("*** Failers "), 1256);
    v8_regexp_utils.assertNull(res[dartx.get](567).firstMatch("aaa"), 1257);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{f1}"), 1258);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{bf}"), 1259);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}"), 1260);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{1000}   "), 1261);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](568).firstMatch("*** Failers"), 1262);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{c0} "), 1263);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{f0} "), 1264);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](568).firstMatch("1234"), 1265);
    v8_regexp_utils.assertToStringEquals("\"", res[dartx.get](568).firstMatch("\"1234\" "), 1266);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}1234"), 1267);
    v8_regexp_utils.assertToStringEquals("\"", res[dartx.get](568).firstMatch("\"x{100}1234\"  "), 1268);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}x{100}12ab "), 1269);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}x{100}\"12\" "), 1270);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](568).firstMatch("*** Failers "), 1271);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}x{100}abcd"), 1272);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](568).firstMatch("A"), 1273);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}"), 1274);
    v8_regexp_utils.assertToStringEquals("Z", res[dartx.get](568).firstMatch("Zx{100}"), 1275);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}Z"), 1276);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](568).firstMatch("*** Failers "), 1277);
    v8_regexp_utils.assertToStringEquals("Z", res[dartx.get](568).firstMatch("Zx{100}"), 1278);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}"), 1279);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}Z"), 1280);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](568).firstMatch("*** Failers "), 1281);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}"), 1282);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{104}"), 1283);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](568).firstMatch("*** Failers"), 1284);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{105}"), 1285);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{ff}    "), 1286);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](568).firstMatch("x{100}"), 1287);
    v8_regexp_utils.assertToStringEquals("Ā", res[dartx.get](568).firstMatch("Ā "), 1288);
    v8_regexp_utils.assertToStringEquals("ÿ", res[dartx.get](569).firstMatch(">ÿ<"), 1289);
    v8_regexp_utils.assertNull(res[dartx.get](570).firstMatch(">x{ff}<"), 1290);
    v8_regexp_utils.assertToStringEquals("Ö", res[dartx.get](572).firstMatch("Ö # Matches without Study"), 1291);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](572).firstMatch("x{d6}"), 1292);
    v8_regexp_utils.assertToStringEquals("Ö", res[dartx.get](572).firstMatch("Ö <-- Same with Study"), 1293);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](572).firstMatch("x{d6}"), 1294);
    v8_regexp_utils.assertToStringEquals("Ö", res[dartx.get](572).firstMatch("Ö # Matches without Study"), 1295);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](572).firstMatch("x{d6} "), 1296);
    v8_regexp_utils.assertToStringEquals("Ö", res[dartx.get](572).firstMatch("Ö <-- Same with Study"), 1297);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](572).firstMatch("x{d6} "), 1298);
    v8_regexp_utils.assertToStringEquals("�", res[dartx.get](572).firstMatch("�]"), 1299);
    v8_regexp_utils.assertToStringEquals("�", res[dartx.get](572).firstMatch("�"), 1300);
    v8_regexp_utils.assertToStringEquals("�", res[dartx.get](572).firstMatch("���"), 1301);
    v8_regexp_utils.assertToStringEquals("�", res[dartx.get](572).firstMatch("���?"), 1302);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("À"), 1303);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("Á "), 1304);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("à"), 1305);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ð "), 1306);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ø  "), 1307);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ü"), 1308);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("þ  "), 1309);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ÿ  "), 1310);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("Ã"), 1311);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("à¯"), 1312);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("á"), 1313);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ð "), 1314);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ñ "), 1315);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ø  "), 1316);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ù  "), 1317);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ü"), 1318);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("ý"), 1319);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("?ø  "), 1320);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("?ù  "), 1321);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("?ü"), 1322);
    v8_regexp_utils.assertNull(res[dartx.get](573).firstMatch("?ý"), 1323);
    v8_regexp_utils.assertToStringEquals(".", res[dartx.get](574).firstMatch("A.B"), 1324);
    v8_regexp_utils.assertToStringEquals("{", res[dartx.get](574).firstMatch("Ax{100}B "), 1325);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](575).firstMatch("x{100}X   "), 1326);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](575).firstMatch("ax{1234}b"), 1327);
    v8_regexp_utils.assertNull(res[dartx.get](577).firstMatch("AxxB     "), 1328);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](578).firstMatch("abc1 \nabc2 \vabc3xx \fabc4 \rabc5xx \r\nabc6 x{0085}abc7 x{2028}abc8 x{2029}abc9 JUNK"), 1329);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](579).firstMatch("abc1\n abc2\v abc3\f abc4\r abc5\r\n abc6x{0085} abc7x{2028} abc8x{2029} abc9"), 1330);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("a\nb"), 1331);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("a\rb"), 1332);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("a\r\nb"), 1333);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("a\vb"), 1334);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("a\fb"), 1335);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("ax{85}b   "), 1336);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("ax{2028}b "), 1337);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("ax{2029}b "), 1338);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("** Failers"), 1339);
    v8_regexp_utils.assertNull(res[dartx.get](580).firstMatch("a\n\rb    "), 1340);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](581).firstMatch("ab"), 1341);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\nb"), 1342);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\rb"), 1343);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\r\nb"), 1344);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\vb"), 1345);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\fx{2028}x{2029}b"), 1346);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("ax{85}b   "), 1347);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\n\rb    "), 1348);
    v8_regexp_utils.assertNull(res[dartx.get](581).firstMatch("a\n\rx{85}\fb "), 1349);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\nb"), 1350);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\rb"), 1351);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\r\nb"), 1352);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\vb"), 1353);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\fx{2028}x{2029}b"), 1354);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("ax{85}b   "), 1355);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\n\rb    "), 1356);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("a\n\rx{85}\fb "), 1357);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("** Failers"), 1358);
    v8_regexp_utils.assertNull(res[dartx.get](582).firstMatch("ab  "), 1359);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\nb"), 1360);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\n\rb"), 1361);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\n\rx{85}b"), 1362);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\r\n\r\nb "), 1363);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\r\n\r\n\r\nb "), 1364);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\n\r\n\rb"), 1365);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\n\n\r\nb "), 1366);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("** Failers"), 1367);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\n\n\n\rb"), 1368);
    v8_regexp_utils.assertNull(res[dartx.get](583).firstMatch("a\r"), 1369);
    v8_regexp_utils.assertNull(res[dartx.get](584).firstMatch("X X\n"), 1370);
    v8_regexp_utils.assertNull(res[dartx.get](584).firstMatch("X\tX\v"), 1371);
    v8_regexp_utils.assertNull(res[dartx.get](584).firstMatch("** Failers"), 1372);
    v8_regexp_utils.assertNull(res[dartx.get](584).firstMatch("x{a0} X\n   "), 1373);
    v8_regexp_utils.assertNull(res[dartx.get](585).firstMatch("\t x{a0}X\n\v\f\r\n"), 1374);
    v8_regexp_utils.assertNull(res[dartx.get](585).firstMatch("\t x{a0}\n\v\f\r\n"), 1375);
    v8_regexp_utils.assertNull(res[dartx.get](585).firstMatch("\t x{a0}\n\v\f"), 1376);
    v8_regexp_utils.assertNull(res[dartx.get](585).firstMatch("** Failers "), 1377);
    v8_regexp_utils.assertNull(res[dartx.get](585).firstMatch("\t x{a0}\n\v"), 1378);
    v8_regexp_utils.assertNull(res[dartx.get](585).firstMatch(" "), 1379);
    v8_regexp_utils.assertNull(res[dartx.get](586).firstMatch("x{3001}x{3000}x{2030}x{2028}"), 1380);
    v8_regexp_utils.assertNull(res[dartx.get](586).firstMatch("Xx{180e}Xx{85}"), 1381);
    v8_regexp_utils.assertNull(res[dartx.get](586).firstMatch("** Failers"), 1382);
    v8_regexp_utils.assertNull(res[dartx.get](586).firstMatch("x{2009} X\n   "), 1383);
    v8_regexp_utils.assertNull(res[dartx.get](587).firstMatch("x{1680}x{180e}x{2007}Xx{2028}x{2029}\f\r\n"), 1384);
    v8_regexp_utils.assertNull(res[dartx.get](587).firstMatch("\tx{205f}x{a0}\nx{2029}\fx{2028}\n"), 1385);
    v8_regexp_utils.assertNull(res[dartx.get](587).firstMatch("\t x{202f}\n\v\f"), 1386);
    v8_regexp_utils.assertNull(res[dartx.get](587).firstMatch("** Failers "), 1387);
    v8_regexp_utils.assertNull(res[dartx.get](587).firstMatch("\tx{200a}x{a0}x{2028}\v"), 1388);
    v8_regexp_utils.assertNull(res[dartx.get](587).firstMatch(" "), 1389);
    v8_regexp_utils.assertNull(res[dartx.get](588).firstMatch(">x{1680}"), 1390);
    v8_regexp_utils.assertNull(res[dartx.get](589).firstMatch(">x{1680}x{180e}x{2000}x{2003}x{200a}x{202f}x{205f}x{3000}<"), 1391);
    v8_regexp_utils.assertToStringEquals("x{1ec5} ", res[dartx.get](593).firstMatch("x{1ec5} "), 1392);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{0}x{d7ff}x{e000}x{10ffff}"), 1393);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{d800}"), 1394);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{d800}?"), 1395);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{da00}"), 1396);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{da00}?"), 1397);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{dfff}"), 1398);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{dfff}?"), 1399);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{110000}    "), 1400);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{110000}?    "), 1401);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{2000000} "), 1402);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{2000000}? "), 1403);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{7fffffff} "), 1404);
    v8_regexp_utils.assertNull(res[dartx.get](594).firstMatch("x{7fffffff}? "), 1405);
    v8_regexp_utils.assertNull(res[dartx.get](595).firstMatch("a\rb"), 1406);
    v8_regexp_utils.assertNull(res[dartx.get](595).firstMatch("a\nb"), 1407);
    v8_regexp_utils.assertNull(res[dartx.get](595).firstMatch("a\r\nb"), 1408);
    v8_regexp_utils.assertNull(res[dartx.get](595).firstMatch("** Failers"), 1409);
    v8_regexp_utils.assertNull(res[dartx.get](595).firstMatch("ax{85}b"), 1410);
    v8_regexp_utils.assertNull(res[dartx.get](595).firstMatch("a\vb     "), 1411);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("a\rb"), 1412);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("a\nb"), 1413);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("a\r\nb"), 1414);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("ax{85}b"), 1415);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("a\vb     "), 1416);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("** Failers "), 1417);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("ax{85}b<bsr_anycrlf>"), 1418);
    v8_regexp_utils.assertNull(res[dartx.get](596).firstMatch("a\vb<bsr_anycrlf>"), 1419);
    v8_regexp_utils.assertNull(res[dartx.get](597).firstMatch("a\rb"), 1420);
    v8_regexp_utils.assertNull(res[dartx.get](597).firstMatch("a\nb"), 1421);
    v8_regexp_utils.assertNull(res[dartx.get](597).firstMatch("a\r\nb"), 1422);
    v8_regexp_utils.assertNull(res[dartx.get](597).firstMatch("** Failers"), 1423);
    v8_regexp_utils.assertNull(res[dartx.get](597).firstMatch("ax{85}b"), 1424);
    v8_regexp_utils.assertNull(res[dartx.get](597).firstMatch("a\vb     "), 1425);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("a\rb"), 1426);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("a\nb"), 1427);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("a\r\nb"), 1428);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("ax{85}b"), 1429);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("a\vb     "), 1430);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("** Failers "), 1431);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("ax{85}b<bsr_anycrlf>"), 1432);
    v8_regexp_utils.assertNull(res[dartx.get](598).firstMatch("a\vb<bsr_anycrlf>"), 1433);
    v8_regexp_utils.assertToStringEquals("QQQx{2029}ABCaXYZ=!bPQR", res[dartx.get](599).firstMatch("QQQx{2029}ABCaXYZ=!bPQR"), 1434);
    v8_regexp_utils.assertNull(res[dartx.get](599).firstMatch("** Failers"), 1435);
    v8_regexp_utils.assertNull(res[dartx.get](599).firstMatch("ax{2029}b"), 1436);
    v8_regexp_utils.assertNull(res[dartx.get](599).firstMatch("aâ©b "), 1437);
    v8_regexp_utils.assertNull(res[dartx.get](600).firstMatch("ax{1234}b"), 1438);
    v8_regexp_utils.assertToStringEquals("a\nb", res[dartx.get](600).firstMatch("a\nb "), 1439);
    v8_regexp_utils.assertNull(res[dartx.get](600).firstMatch("** Failers"), 1440);
    v8_regexp_utils.assertNull(res[dartx.get](600).firstMatch("ab  "), 1441);
    v8_regexp_utils.assertToStringEquals("aXb", res[dartx.get](601).firstMatch("aXb"), 1442);
    v8_regexp_utils.assertToStringEquals("a\nX\nXx{1234}b", res[dartx.get](601).firstMatch("a\nX\nXx{1234}b "), 1443);
    v8_regexp_utils.assertNull(res[dartx.get](601).firstMatch("** Failers"), 1444);
    v8_regexp_utils.assertNull(res[dartx.get](601).firstMatch("ab  "), 1445);
    v8_regexp_utils.assertNull(res[dartx.get](601).firstMatch("x{de}x{de}"), 1446);
    v8_regexp_utils.assertNull(res[dartx.get](601).firstMatch("x{123} "), 1447);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](602).firstMatch("Ax{1ec5}ABCXYZ"), 1448);
    v8_regexp_utils.assertNull(res[dartx.get](604).firstMatch("x{c0}x{30f}x{660}x{66c}x{f01}x{1680}<"), 1449);
    v8_regexp_utils.assertNull(res[dartx.get](604).firstMatch("\npx{300}9!$ < "), 1450);
    v8_regexp_utils.assertNull(res[dartx.get](604).firstMatch("** Failers "), 1451);
    v8_regexp_utils.assertNull(res[dartx.get](604).firstMatch("apx{300}9!$ < "), 1452);
    v8_regexp_utils.assertNull(res[dartx.get](605).firstMatch("X"), 1453);
    v8_regexp_utils.assertNull(res[dartx.get](605).firstMatch("** Failers "), 1454);
    v8_regexp_utils.assertNull(res[dartx.get](605).firstMatch(""), 1455);
    v8_regexp_utils.assertNull(res[dartx.get](606).firstMatch("9"), 1456);
    v8_regexp_utils.assertNull(res[dartx.get](606).firstMatch("** Failers "), 1457);
    v8_regexp_utils.assertNull(res[dartx.get](606).firstMatch("x{c0}"), 1458);
    v8_regexp_utils.assertNull(res[dartx.get](607).firstMatch("X"), 1459);
    v8_regexp_utils.assertNull(res[dartx.get](607).firstMatch("** Failers "), 1460);
    v8_regexp_utils.assertNull(res[dartx.get](607).firstMatch("x{30f}"), 1461);
    v8_regexp_utils.assertNull(res[dartx.get](608).firstMatch("X"), 1462);
    v8_regexp_utils.assertNull(res[dartx.get](608).firstMatch("** Failers "), 1463);
    v8_regexp_utils.assertNull(res[dartx.get](608).firstMatch("x{660}"), 1464);
    v8_regexp_utils.assertNull(res[dartx.get](609).firstMatch("X"), 1465);
    v8_regexp_utils.assertNull(res[dartx.get](609).firstMatch("** Failers "), 1466);
    v8_regexp_utils.assertNull(res[dartx.get](609).firstMatch("x{66c}"), 1467);
    v8_regexp_utils.assertNull(res[dartx.get](610).firstMatch("X"), 1468);
    v8_regexp_utils.assertNull(res[dartx.get](610).firstMatch("** Failers "), 1469);
    v8_regexp_utils.assertNull(res[dartx.get](610).firstMatch("x{f01}"), 1470);
    v8_regexp_utils.assertNull(res[dartx.get](611).firstMatch("X"), 1471);
    v8_regexp_utils.assertNull(res[dartx.get](611).firstMatch("** Failers "), 1472);
    v8_regexp_utils.assertNull(res[dartx.get](611).firstMatch("x{1680}"), 1473);
    v8_regexp_utils.assertNull(res[dartx.get](612).firstMatch("x{017}"), 1474);
    v8_regexp_utils.assertNull(res[dartx.get](612).firstMatch("x{09f} "), 1475);
    v8_regexp_utils.assertNull(res[dartx.get](612).firstMatch("** Failers"), 1476);
    v8_regexp_utils.assertNull(res[dartx.get](612).firstMatch("x{0600} "), 1477);
    v8_regexp_utils.assertNull(res[dartx.get](613).firstMatch("x{601}"), 1478);
    v8_regexp_utils.assertNull(res[dartx.get](613).firstMatch("** Failers"), 1479);
    v8_regexp_utils.assertNull(res[dartx.get](613).firstMatch("x{09f} "), 1480);
    v8_regexp_utils.assertNull(res[dartx.get](614).firstMatch("x{e0000}"), 1481);
    v8_regexp_utils.assertNull(res[dartx.get](614).firstMatch("** Failers"), 1482);
    v8_regexp_utils.assertNull(res[dartx.get](614).firstMatch("x{09f} "), 1483);
    v8_regexp_utils.assertNull(res[dartx.get](615).firstMatch("x{f8ff}"), 1484);
    v8_regexp_utils.assertNull(res[dartx.get](615).firstMatch("** Failers"), 1485);
    v8_regexp_utils.assertNull(res[dartx.get](615).firstMatch("x{09f} "), 1486);
    v8_regexp_utils.assertNull(res[dartx.get](616).firstMatch("?x{dfff}"), 1487);
    v8_regexp_utils.assertNull(res[dartx.get](616).firstMatch("** Failers"), 1488);
    v8_regexp_utils.assertNull(res[dartx.get](616).firstMatch("x{09f} "), 1489);
    v8_regexp_utils.assertNull(res[dartx.get](617).firstMatch("a"), 1490);
    v8_regexp_utils.assertNull(res[dartx.get](617).firstMatch("** Failers "), 1491);
    v8_regexp_utils.assertNull(res[dartx.get](617).firstMatch("Z"), 1492);
    v8_regexp_utils.assertNull(res[dartx.get](617).firstMatch("x{e000}  "), 1493);
    v8_regexp_utils.assertNull(res[dartx.get](618).firstMatch("x{2b0}"), 1494);
    v8_regexp_utils.assertNull(res[dartx.get](618).firstMatch("** Failers"), 1495);
    v8_regexp_utils.assertNull(res[dartx.get](618).firstMatch("a "), 1496);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{1bb}"), 1497);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{3400}"), 1498);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{3401}"), 1499);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{4d00}"), 1500);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{4db4}"), 1501);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{4db5}     "), 1502);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("** Failers"), 1503);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("a "), 1504);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{2b0}"), 1505);
    v8_regexp_utils.assertNull(res[dartx.get](619).firstMatch("x{4db6} "), 1506);
    v8_regexp_utils.assertNull(res[dartx.get](620).firstMatch("x{1c5}"), 1507);
    v8_regexp_utils.assertNull(res[dartx.get](620).firstMatch("** Failers"), 1508);
    v8_regexp_utils.assertNull(res[dartx.get](620).firstMatch("a "), 1509);
    v8_regexp_utils.assertNull(res[dartx.get](620).firstMatch("x{2b0}"), 1510);
    v8_regexp_utils.assertNull(res[dartx.get](621).firstMatch("A"), 1511);
    v8_regexp_utils.assertNull(res[dartx.get](621).firstMatch("** Failers"), 1512);
    v8_regexp_utils.assertNull(res[dartx.get](621).firstMatch("x{2b0}"), 1513);
    v8_regexp_utils.assertNull(res[dartx.get](622).firstMatch("x{903}"), 1514);
    v8_regexp_utils.assertNull(res[dartx.get](622).firstMatch("** Failers"), 1515);
    v8_regexp_utils.assertNull(res[dartx.get](622).firstMatch("X"), 1516);
    v8_regexp_utils.assertNull(res[dartx.get](622).firstMatch("x{300}"), 1517);
    v8_regexp_utils.assertNull(res[dartx.get](622).firstMatch("   "), 1518);
    v8_regexp_utils.assertNull(res[dartx.get](623).firstMatch("x{488}"), 1519);
    v8_regexp_utils.assertNull(res[dartx.get](623).firstMatch("** Failers"), 1520);
    v8_regexp_utils.assertNull(res[dartx.get](623).firstMatch("X"), 1521);
    v8_regexp_utils.assertNull(res[dartx.get](623).firstMatch("x{903}"), 1522);
    v8_regexp_utils.assertNull(res[dartx.get](623).firstMatch("x{300}"), 1523);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("x{300}"), 1524);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("** Failers"), 1525);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("X"), 1526);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("x{903}"), 1527);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("0123456789x{660}x{661}x{662}x{663}x{664}x{665}x{666}x{667}x{668}x{669}x{66a}"), 1528);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("x{6f0}x{6f1}x{6f2}x{6f3}x{6f4}x{6f5}x{6f6}x{6f7}x{6f8}x{6f9}x{6fa}"), 1529);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("x{966}x{967}x{968}x{969}x{96a}x{96b}x{96c}x{96d}x{96e}x{96f}x{970}"), 1530);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("** Failers"), 1531);
    v8_regexp_utils.assertNull(res[dartx.get](624).firstMatch("X"), 1532);
    v8_regexp_utils.assertNull(res[dartx.get](625).firstMatch("x{16ee}"), 1533);
    v8_regexp_utils.assertNull(res[dartx.get](625).firstMatch("** Failers"), 1534);
    v8_regexp_utils.assertNull(res[dartx.get](625).firstMatch("X"), 1535);
    v8_regexp_utils.assertNull(res[dartx.get](625).firstMatch("x{966}"), 1536);
    v8_regexp_utils.assertNull(res[dartx.get](626).firstMatch("x{b2}"), 1537);
    v8_regexp_utils.assertNull(res[dartx.get](626).firstMatch("x{b3}"), 1538);
    v8_regexp_utils.assertNull(res[dartx.get](626).firstMatch("** Failers"), 1539);
    v8_regexp_utils.assertNull(res[dartx.get](626).firstMatch("X"), 1540);
    v8_regexp_utils.assertNull(res[dartx.get](626).firstMatch("x{16ee}"), 1541);
    v8_regexp_utils.assertNull(res[dartx.get](627).firstMatch("_"), 1542);
    v8_regexp_utils.assertNull(res[dartx.get](627).firstMatch("x{203f}"), 1543);
    v8_regexp_utils.assertNull(res[dartx.get](627).firstMatch("** Failers"), 1544);
    v8_regexp_utils.assertNull(res[dartx.get](627).firstMatch("X"), 1545);
    v8_regexp_utils.assertNull(res[dartx.get](627).firstMatch("-"), 1546);
    v8_regexp_utils.assertNull(res[dartx.get](627).firstMatch("x{58a}"), 1547);
    v8_regexp_utils.assertNull(res[dartx.get](628).firstMatch("-"), 1548);
    v8_regexp_utils.assertNull(res[dartx.get](628).firstMatch("x{58a}"), 1549);
    v8_regexp_utils.assertNull(res[dartx.get](628).firstMatch("** Failers"), 1550);
    v8_regexp_utils.assertNull(res[dartx.get](628).firstMatch("X"), 1551);
    v8_regexp_utils.assertNull(res[dartx.get](628).firstMatch("x{203f}"), 1552);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch(")"), 1553);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("]"), 1554);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("}"), 1555);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("x{f3b}"), 1556);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("** Failers"), 1557);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("X"), 1558);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("x{203f}"), 1559);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("("), 1560);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("["), 1561);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("{"), 1562);
    v8_regexp_utils.assertNull(res[dartx.get](629).firstMatch("x{f3c}"), 1563);
    v8_regexp_utils.assertNull(res[dartx.get](630).firstMatch("x{bb}"), 1564);
    v8_regexp_utils.assertNull(res[dartx.get](630).firstMatch("x{2019}"), 1565);
    v8_regexp_utils.assertNull(res[dartx.get](630).firstMatch("** Failers"), 1566);
    v8_regexp_utils.assertNull(res[dartx.get](630).firstMatch("X"), 1567);
    v8_regexp_utils.assertNull(res[dartx.get](630).firstMatch("x{203f}"), 1568);
    v8_regexp_utils.assertNull(res[dartx.get](631).firstMatch("x{ab}"), 1569);
    v8_regexp_utils.assertNull(res[dartx.get](631).firstMatch("x{2018}"), 1570);
    v8_regexp_utils.assertNull(res[dartx.get](631).firstMatch("** Failers"), 1571);
    v8_regexp_utils.assertNull(res[dartx.get](631).firstMatch("X"), 1572);
    v8_regexp_utils.assertNull(res[dartx.get](631).firstMatch("x{203f}"), 1573);
    v8_regexp_utils.assertNull(res[dartx.get](632).firstMatch("!"), 1574);
    v8_regexp_utils.assertNull(res[dartx.get](632).firstMatch("x{37e}"), 1575);
    v8_regexp_utils.assertNull(res[dartx.get](632).firstMatch("** Failers"), 1576);
    v8_regexp_utils.assertNull(res[dartx.get](632).firstMatch("X"), 1577);
    v8_regexp_utils.assertNull(res[dartx.get](632).firstMatch("x{203f}"), 1578);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("("), 1579);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("["), 1580);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("{"), 1581);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("x{f3c}"), 1582);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("** Failers"), 1583);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("X"), 1584);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch(")"), 1585);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("]"), 1586);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("}"), 1587);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("x{f3b}"), 1588);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("$x{a2}x{a3}x{a4}x{a5}x{a6}"), 1589);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("x{9f2}"), 1590);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("** Failers"), 1591);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("X"), 1592);
    v8_regexp_utils.assertNull(res[dartx.get](633).firstMatch("x{2c2}"), 1593);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("x{2c2}"), 1594);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("** Failers"), 1595);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("X"), 1596);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("x{9f2}"), 1597);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("+<|~x{ac}x{2044}"), 1598);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("** Failers"), 1599);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("X"), 1600);
    v8_regexp_utils.assertNull(res[dartx.get](634).firstMatch("x{9f2}"), 1601);
    v8_regexp_utils.assertNull(res[dartx.get](635).firstMatch("x{a6}"), 1602);
    v8_regexp_utils.assertNull(res[dartx.get](635).firstMatch("x{482} "), 1603);
    v8_regexp_utils.assertNull(res[dartx.get](635).firstMatch("** Failers"), 1604);
    v8_regexp_utils.assertNull(res[dartx.get](635).firstMatch("X"), 1605);
    v8_regexp_utils.assertNull(res[dartx.get](635).firstMatch("x{9f2}"), 1606);
    v8_regexp_utils.assertNull(res[dartx.get](636).firstMatch("x{2028}"), 1607);
    v8_regexp_utils.assertNull(res[dartx.get](636).firstMatch("** Failers"), 1608);
    v8_regexp_utils.assertNull(res[dartx.get](636).firstMatch("X"), 1609);
    v8_regexp_utils.assertNull(res[dartx.get](636).firstMatch("x{2029}"), 1610);
    v8_regexp_utils.assertNull(res[dartx.get](637).firstMatch("x{2029}"), 1611);
    v8_regexp_utils.assertNull(res[dartx.get](637).firstMatch("** Failers"), 1612);
    v8_regexp_utils.assertNull(res[dartx.get](637).firstMatch("X"), 1613);
    v8_regexp_utils.assertNull(res[dartx.get](637).firstMatch("x{2028}"), 1614);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("\\ \\"), 1615);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{a0}"), 1616);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{1680}"), 1617);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{180e}"), 1618);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{2000}"), 1619);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{2001}     "), 1620);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("** Failers"), 1621);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{2028}"), 1622);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("x{200d} "), 1623);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("  x{660}x{661}x{662}ABC"), 1624);
    v8_regexp_utils.assertNull(res[dartx.get](638).firstMatch("  x{660}x{661}x{662}ABC"), 1625);
    v8_regexp_utils.assertNull(res[dartx.get](639).firstMatch("  x{660}x{661}x{662}ABC"), 1626);
    v8_regexp_utils.assertNull(res[dartx.get](640).firstMatch("  x{660}x{661}x{662}ABC"), 1627);
    v8_regexp_utils.assertNull(res[dartx.get](641).firstMatch("  x{660}x{661}x{662}ABC"), 1628);
    v8_regexp_utils.assertNull(res[dartx.get](642).firstMatch("  x{660}x{661}x{662}ABC"), 1629);
    v8_regexp_utils.assertNull(res[dartx.get](643).firstMatch("  x{660}x{661}x{662}ABC"), 1630);
    v8_regexp_utils.assertNull(res[dartx.get](644).firstMatch("  x{660}x{661}x{662}ABC"), 1631);
    v8_regexp_utils.assertNull(res[dartx.get](645).firstMatch("  x{660}x{661}x{662}ABC"), 1632);
    v8_regexp_utils.assertNull(res[dartx.get](646).firstMatch("  x{660}x{661}x{662}ABC"), 1633);
    v8_regexp_utils.assertNull(res[dartx.get](647).firstMatch("  x{660}x{661}x{662}ABC"), 1634);
    v8_regexp_utils.assertNull(res[dartx.get](647).firstMatch("  x{660}x{661}x{662}ABC"), 1635);
    v8_regexp_utils.assertNull(res[dartx.get](647).firstMatch("  x{660}x{661}x{662}ABC"), 1636);
    v8_regexp_utils.assertNull(res[dartx.get](647).firstMatch("  ** Failers"), 1637);
    v8_regexp_utils.assertNull(res[dartx.get](647).firstMatch("  x{660}x{661}x{662}ABC"), 1638);
    v8_regexp_utils.assertNull(res[dartx.get](648).firstMatch("A"), 1639);
    v8_regexp_utils.assertNull(res[dartx.get](648).firstMatch("ax{10a0}B "), 1640);
    v8_regexp_utils.assertNull(res[dartx.get](648).firstMatch("** Failers "), 1641);
    v8_regexp_utils.assertNull(res[dartx.get](648).firstMatch("a"), 1642);
    v8_regexp_utils.assertNull(res[dartx.get](648).firstMatch("x{1d00}  "), 1643);
    v8_regexp_utils.assertNull(res[dartx.get](649).firstMatch("1234"), 1644);
    v8_regexp_utils.assertNull(res[dartx.get](649).firstMatch("** Failers"), 1645);
    v8_regexp_utils.assertNull(res[dartx.get](649).firstMatch("ABC "), 1646);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("1234"), 1647);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("** Failers"), 1648);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("ABC "), 1649);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("A2XYZ"), 1650);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("123A5XYZPQR"), 1651);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("ABAx{660}XYZpqr"), 1652);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("** Failers"), 1653);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("AXYZ"), 1654);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("XYZ     "), 1655);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("1XYZ"), 1656);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("AB=XYZ.. "), 1657);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("XYZ "), 1658);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("** Failers"), 1659);
    v8_regexp_utils.assertNull(res[dartx.get](650).firstMatch("WXYZ "), 1660);
    v8_regexp_utils.assertNull(res[dartx.get](655).firstMatch("1234"), 1661);
    v8_regexp_utils.assertNull(res[dartx.get](655).firstMatch("1234"), 1662);
    v8_regexp_utils.assertNull(res[dartx.get](655).firstMatch("12-34"), 1663);
    v8_regexp_utils.assertToStringEquals("{", res[dartx.get](655).firstMatch("12+x{661}-34  "), 1664);
    v8_regexp_utils.assertNull(res[dartx.get](655).firstMatch("** Failers"), 1665);
    v8_regexp_utils.assertToStringEquals("d", res[dartx.get](655).firstMatch("abcd  "), 1666);
    v8_regexp_utils.assertToStringEquals("d", res[dartx.get](656).firstMatch("abcd"), 1667);
    v8_regexp_utils.assertNull(res[dartx.get](656).firstMatch("** Failers"), 1668);
    v8_regexp_utils.assertNull(res[dartx.get](656).firstMatch("1234"), 1669);
    v8_regexp_utils.assertNull(res[dartx.get](657).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 1670);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](657).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 1671);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](657).firstMatch(" "), 1672);
    v8_regexp_utils.assertNull(res[dartx.get](657).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 1673);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](657).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 1674);
    v8_regexp_utils.assertNull(res[dartx.get](658).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 1675);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](658).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 1676);
    v8_regexp_utils.assertNull(res[dartx.get](659).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 1677);
    v8_regexp_utils.assertNull(res[dartx.get](659).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 1678);
    v8_regexp_utils.assertNull(res[dartx.get](660).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 1679);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](660).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 1680);
    v8_regexp_utils.assertNull(res[dartx.get](661).firstMatch("a"), 1681);
    v8_regexp_utils.assertNull(res[dartx.get](661).firstMatch("A "), 1682);
    v8_regexp_utils.assertNull(res[dartx.get](662).firstMatch("a"), 1683);
    v8_regexp_utils.assertNull(res[dartx.get](662).firstMatch("A "), 1684);
    v8_regexp_utils.assertNull(res[dartx.get](663).firstMatch("A"), 1685);
    v8_regexp_utils.assertNull(res[dartx.get](663).firstMatch("aZ"), 1686);
    v8_regexp_utils.assertNull(res[dartx.get](663).firstMatch("** Failers"), 1687);
    v8_regexp_utils.assertNull(res[dartx.get](663).firstMatch("abc   "), 1688);
    v8_regexp_utils.assertNull(res[dartx.get](664).firstMatch("A"), 1689);
    v8_regexp_utils.assertNull(res[dartx.get](664).firstMatch("aZ"), 1690);
    v8_regexp_utils.assertNull(res[dartx.get](664).firstMatch("** Failers"), 1691);
    v8_regexp_utils.assertNull(res[dartx.get](664).firstMatch("abc   "), 1692);
    v8_regexp_utils.assertNull(res[dartx.get](665).firstMatch("a"), 1693);
    v8_regexp_utils.assertNull(res[dartx.get](665).firstMatch("Az"), 1694);
    v8_regexp_utils.assertNull(res[dartx.get](665).firstMatch("** Failers"), 1695);
    v8_regexp_utils.assertNull(res[dartx.get](665).firstMatch("ABC   "), 1696);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("a"), 1697);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Az"), 1698);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("** Failers"), 1699);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("ABC   "), 1700);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{c0}"), 1701);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{e0} "), 1702);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{c0}"), 1703);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{e0} "), 1704);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb0}"), 1705);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("** Failers"), 1706);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("ax{391}x{10427}x{ff3a}x{1fb0}   "), 1707);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{3b1}x{10427}x{ff3a}x{1fb0}"), 1708);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{1044F}x{ff3a}x{1fb0}"), 1709);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{10427}x{ff5a}x{1fb0}"), 1710);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb8}"), 1711);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb0}"), 1712);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("ax{391}x{10427}x{ff3a}x{1fb0}   "), 1713);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{3b1}x{10427}x{ff3a}x{1fb0}"), 1714);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{1044F}x{ff3a}x{1fb0}"), 1715);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{10427}x{ff5a}x{1fb0}"), 1716);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb8}"), 1717);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{391}x{3b1}x{3b1}x{3b1}x{391}"), 1718);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{391}x{3b1}x{3b1}x{3b1}x{391}X"), 1719);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{391}x{3b1}x{3b1}x{3b1}x{391}X"), 1720);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{391}"), 1721);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{ff3a}"), 1722);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{3b1}"), 1723);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{ff5a}   "), 1724);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{c0}"), 1725);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{e0} "), 1726);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{104}"), 1727);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{105}"), 1728);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{109}  "), 1729);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("** Failers"), 1730);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{100}"), 1731);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{10a} "), 1732);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Z"), 1733);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("z"), 1734);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{39c}"), 1735);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{178}"), 1736);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("|"), 1737);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{80}"), 1738);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{ff}"), 1739);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{100}"), 1740);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{101} "), 1741);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("** Failers"), 1742);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("x{102}"), 1743);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("Y"), 1744);
    v8_regexp_utils.assertNull(res[dartx.get](666).firstMatch("y           "), 1745);
    v8_regexp_utils.assertNull(res[dartx.get](667).firstMatch("A"), 1746);
    v8_regexp_utils.assertNull(res[dartx.get](667).firstMatch("Ax{300}BC "), 1747);
    v8_regexp_utils.assertNull(res[dartx.get](667).firstMatch("Ax{300}x{301}x{302}BC "), 1748);
    v8_regexp_utils.assertNull(res[dartx.get](667).firstMatch("*** Failers"), 1749);
    v8_regexp_utils.assertNull(res[dartx.get](667).firstMatch("x{300}  "), 1750);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](668).firstMatch("X123"), 1751);
    v8_regexp_utils.assertNull(res[dartx.get](668).firstMatch("*** Failers"), 1752);
    v8_regexp_utils.assertNull(res[dartx.get](668).firstMatch("AXYZ"), 1753);
    v8_regexp_utils.assertNull(res[dartx.get](669).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 1754);
    v8_regexp_utils.assertNull(res[dartx.get](669).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 1755);
    v8_regexp_utils.assertNull(res[dartx.get](670).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 1756);
    v8_regexp_utils.assertNull(res[dartx.get](670).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 1757);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](671).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 1758);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](671).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 1759);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](672).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 1760);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](672).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 1761);
    v8_regexp_utils.assertNull(res[dartx.get](673).firstMatch("*** Failers"), 1762);
    v8_regexp_utils.assertNull(res[dartx.get](673).firstMatch("Ax{300}x{301}x{302}"), 1763);
    v8_regexp_utils.assertNull(res[dartx.get](674).firstMatch("Ax{300}x{301}Bx{300}X"), 1764);
    v8_regexp_utils.assertNull(res[dartx.get](674).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}"), 1765);
    v8_regexp_utils.assertNull(res[dartx.get](674).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}X"), 1766);
    v8_regexp_utils.assertNull(res[dartx.get](674).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}DAx{300}X"), 1767);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("Ax{300}x{301}Bx{300}X"), 1768);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}"), 1769);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}X"), 1770);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}DAx{300}X"), 1771);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("x{2e81}x{3007}x{2f804}x{31a0}"), 1772);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("** Failers"), 1773);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("x{2e7f}  "), 1774);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("x{3105}"), 1775);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("** Failers"), 1776);
    v8_regexp_utils.assertNull(res[dartx.get](675).firstMatch("x{30ff}  "), 1777);
    v8_regexp_utils.assertNull(res[dartx.get](676).firstMatch("x{06e9}"), 1778);
    v8_regexp_utils.assertNull(res[dartx.get](676).firstMatch("x{060b}"), 1779);
    v8_regexp_utils.assertNull(res[dartx.get](676).firstMatch("** Failers"), 1780);
    v8_regexp_utils.assertNull(res[dartx.get](676).firstMatch("Xx{06e9}   "), 1781);
    v8_regexp_utils.assertNull(res[dartx.get](677).firstMatch("x{2f800}"), 1782);
    v8_regexp_utils.assertNull(res[dartx.get](677).firstMatch("** Failers"), 1783);
    v8_regexp_utils.assertNull(res[dartx.get](677).firstMatch("x{a014}"), 1784);
    v8_regexp_utils.assertNull(res[dartx.get](677).firstMatch("x{a4c6}   "), 1785);
    v8_regexp_utils.assertNull(res[dartx.get](678).firstMatch("AXYZ"), 1786);
    v8_regexp_utils.assertNull(res[dartx.get](678).firstMatch("x{1234}XYZ "), 1787);
    v8_regexp_utils.assertNull(res[dartx.get](678).firstMatch("** Failers"), 1788);
    v8_regexp_utils.assertNull(res[dartx.get](678).firstMatch("X  "), 1789);
    v8_regexp_utils.assertNull(res[dartx.get](679).firstMatch("** Failers"), 1790);
    v8_regexp_utils.assertNull(res[dartx.get](679).firstMatch("AX"), 1791);
    v8_regexp_utils.assertNull(res[dartx.get](680).firstMatch("XYZ"), 1792);
    v8_regexp_utils.assertNull(res[dartx.get](680).firstMatch("AXYZ"), 1793);
    v8_regexp_utils.assertNull(res[dartx.get](680).firstMatch("x{1234}XYZ "), 1794);
    v8_regexp_utils.assertNull(res[dartx.get](680).firstMatch("** Failers"), 1795);
    v8_regexp_utils.assertNull(res[dartx.get](680).firstMatch("ABXYZ   "), 1796);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("XYZ"), 1797);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("** Failers"), 1798);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("AXYZ"), 1799);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("x{1234}XYZ "), 1800);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("ABXYZ   "), 1801);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("AXYZ"), 1802);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("x{1234}XYZ"), 1803);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("Ax{1234}XYZ"), 1804);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("** Failers"), 1805);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("XYZ"), 1806);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("** Failers"), 1807);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("AXYZ"), 1808);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("x{1234}XYZ"), 1809);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("Ax{1234}XYZ"), 1810);
    v8_regexp_utils.assertNull(res[dartx.get](681).firstMatch("XYZ"), 1811);
    v8_regexp_utils.assertNull(res[dartx.get](682).firstMatch("XYZ"), 1812);
    v8_regexp_utils.assertNull(res[dartx.get](682).firstMatch("AXYZ"), 1813);
    v8_regexp_utils.assertNull(res[dartx.get](682).firstMatch("x{1234}XYZ"), 1814);
    v8_regexp_utils.assertNull(res[dartx.get](682).firstMatch("Ax{1234}XYZ"), 1815);
    v8_regexp_utils.assertNull(res[dartx.get](682).firstMatch("** Failers"), 1816);
    v8_regexp_utils.assertNull(res[dartx.get](683).firstMatch("XYZ"), 1817);
    v8_regexp_utils.assertNull(res[dartx.get](683).firstMatch("** Failers"), 1818);
    v8_regexp_utils.assertNull(res[dartx.get](683).firstMatch("AXYZ"), 1819);
    v8_regexp_utils.assertNull(res[dartx.get](683).firstMatch("x{1234}XYZ"), 1820);
    v8_regexp_utils.assertNull(res[dartx.get](683).firstMatch("Ax{1234}XYZ"), 1821);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](684).firstMatch("AXYZ"), 1822);
    v8_regexp_utils.assertNull(res[dartx.get](684).firstMatch("x{1234}XYZ "), 1823);
    v8_regexp_utils.assertNull(res[dartx.get](684).firstMatch("** Failers"), 1824);
    v8_regexp_utils.assertNull(res[dartx.get](684).firstMatch("X  "), 1825);
    v8_regexp_utils.assertNull(res[dartx.get](685).firstMatch("** Failers"), 1826);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](685).firstMatch("AX"), 1827);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](686).firstMatch("XYZ"), 1828);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](686).firstMatch("AXYZ"), 1829);
    v8_regexp_utils.assertNull(res[dartx.get](686).firstMatch("x{1234}XYZ "), 1830);
    v8_regexp_utils.assertNull(res[dartx.get](686).firstMatch("** Failers"), 1831);
    v8_regexp_utils.assertNull(res[dartx.get](686).firstMatch("ABXYZ   "), 1832);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](687).firstMatch("XYZ"), 1833);
    v8_regexp_utils.assertNull(res[dartx.get](687).firstMatch("** Failers"), 1834);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](687).firstMatch("AXYZ"), 1835);
    v8_regexp_utils.assertNull(res[dartx.get](687).firstMatch("x{1234}XYZ "), 1836);
    v8_regexp_utils.assertNull(res[dartx.get](687).firstMatch("ABXYZ   "), 1837);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](688).firstMatch("AXYZ"), 1838);
    v8_regexp_utils.assertNull(res[dartx.get](688).firstMatch("x{1234}XYZ"), 1839);
    v8_regexp_utils.assertNull(res[dartx.get](688).firstMatch("Ax{1234}XYZ"), 1840);
    v8_regexp_utils.assertNull(res[dartx.get](688).firstMatch("** Failers"), 1841);
    v8_regexp_utils.assertNull(res[dartx.get](688).firstMatch("XYZ"), 1842);
    v8_regexp_utils.assertNull(res[dartx.get](689).firstMatch("** Failers"), 1843);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](689).firstMatch("AXYZ"), 1844);
    v8_regexp_utils.assertNull(res[dartx.get](689).firstMatch("x{1234}XYZ"), 1845);
    v8_regexp_utils.assertNull(res[dartx.get](689).firstMatch("Ax{1234}XYZ"), 1846);
    v8_regexp_utils.assertNull(res[dartx.get](689).firstMatch("XYZ"), 1847);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](690).firstMatch("XYZ"), 1848);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](690).firstMatch("AXYZ"), 1849);
    v8_regexp_utils.assertNull(res[dartx.get](690).firstMatch("x{1234}XYZ"), 1850);
    v8_regexp_utils.assertNull(res[dartx.get](690).firstMatch("Ax{1234}XYZ"), 1851);
    v8_regexp_utils.assertNull(res[dartx.get](690).firstMatch("** Failers"), 1852);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](691).firstMatch("XYZ"), 1853);
    v8_regexp_utils.assertNull(res[dartx.get](691).firstMatch("** Failers"), 1854);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](691).firstMatch("AXYZ"), 1855);
    v8_regexp_utils.assertNull(res[dartx.get](691).firstMatch("x{1234}XYZ"), 1856);
    v8_regexp_utils.assertNull(res[dartx.get](691).firstMatch("Ax{1234}XYZ"), 1857);
    v8_regexp_utils.assertNull(res[dartx.get](692).firstMatch("abcdefgh"), 1858);
    v8_regexp_utils.assertNull(res[dartx.get](692).firstMatch("x{1234}\n\rx{3456}xyz "), 1859);
    v8_regexp_utils.assertNull(res[dartx.get](693).firstMatch("abcdefgh"), 1860);
    v8_regexp_utils.assertNull(res[dartx.get](693).firstMatch("x{1234}\n\rx{3456}xyz "), 1861);
    v8_regexp_utils.assertNull(res[dartx.get](694).firstMatch("** Failers"), 1862);
    v8_regexp_utils.assertNull(res[dartx.get](694).firstMatch("abcdefgh"), 1863);
    v8_regexp_utils.assertNull(res[dartx.get](694).firstMatch("x{1234}\n\rx{3456}xyz "), 1864);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" AXY"), 1865);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" aXY"), 1866);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" x{1c5}XY"), 1867);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" ** Failers"), 1868);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" x{1bb}XY"), 1869);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" x{2b0}XY"), 1870);
    v8_regexp_utils.assertNull(res[dartx.get](695).firstMatch(" !XY      "), 1871);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" AXY"), 1872);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" aXY"), 1873);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" x{1c5}XY"), 1874);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" ** Failers"), 1875);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" x{1bb}XY"), 1876);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" x{2b0}XY"), 1877);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" !XY      "), 1878);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" AXY"), 1879);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" aXY"), 1880);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" AbcdeXyz "), 1881);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" x{1c5}AbXY"), 1882);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" abcDEXypqreXlmn "), 1883);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" ** Failers"), 1884);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" x{1bb}XY"), 1885);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" x{2b0}XY"), 1886);
    v8_regexp_utils.assertNull(res[dartx.get](696).firstMatch(" !XY      "), 1887);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" AXY"), 1888);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" aXY"), 1889);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" AbcdeXyz "), 1890);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" x{1c5}AbXY"), 1891);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" abcDEXypqreXlmn "), 1892);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" ** Failers"), 1893);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" x{1bb}XY"), 1894);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" x{2b0}XY"), 1895);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" !XY      "), 1896);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" AXY"), 1897);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" aXY"), 1898);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" AbcdeXyz "), 1899);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" x{1c5}AbXY"), 1900);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" abcDEXypqreXlmn "), 1901);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" ** Failers"), 1902);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" x{1bb}XY"), 1903);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" x{2b0}XY"), 1904);
    v8_regexp_utils.assertNull(res[dartx.get](697).firstMatch(" !XY      "), 1905);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" AXY"), 1906);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" aXY"), 1907);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" AbcdeXyz "), 1908);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" x{1c5}AbXY"), 1909);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" abcDEXypqreXlmn "), 1910);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" ** Failers"), 1911);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" x{1bb}XY"), 1912);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" x{2b0}XY"), 1913);
    v8_regexp_utils.assertNull(res[dartx.get](698).firstMatch(" !XY      "), 1914);
    v8_regexp_utils.assertNull(res[dartx.get](699).firstMatch(" !XY"), 1915);
    v8_regexp_utils.assertNull(res[dartx.get](699).firstMatch(" x{1bb}XY"), 1916);
    v8_regexp_utils.assertNull(res[dartx.get](699).firstMatch(" x{2b0}XY"), 1917);
    v8_regexp_utils.assertNull(res[dartx.get](699).firstMatch(" ** Failers"), 1918);
    v8_regexp_utils.assertNull(res[dartx.get](699).firstMatch(" x{1c5}XY"), 1919);
    v8_regexp_utils.assertNull(res[dartx.get](699).firstMatch(" AXY      "), 1920);
    v8_regexp_utils.assertNull(res[dartx.get](700).firstMatch(" !XY"), 1921);
    v8_regexp_utils.assertNull(res[dartx.get](700).firstMatch(" x{1bb}XY"), 1922);
    v8_regexp_utils.assertNull(res[dartx.get](700).firstMatch(" x{2b0}XY"), 1923);
    v8_regexp_utils.assertNull(res[dartx.get](700).firstMatch(" ** Failers"), 1924);
    v8_regexp_utils.assertNull(res[dartx.get](700).firstMatch(" x{1c5}XY"), 1925);
    v8_regexp_utils.assertNull(res[dartx.get](700).firstMatch(" AXY      "), 1926);
    v8_regexp_utils.assertNull(res[dartx.get](701).firstMatch(" !"), 1927);
    v8_regexp_utils.assertNull(res[dartx.get](701).firstMatch("AabcabcYZ    "), 1928);
    v8_regexp_utils.assertToStringEquals("L=abcX,L=abc,abc", res[dartx.get](702).firstMatch("L=abcX"), 1929);
    v8_regexp_utils.assertNull(res[dartx.get](702).firstMatch("x{c0}"), 1930);
    v8_regexp_utils.assertNull(res[dartx.get](702).firstMatch("x{e0} "), 1931);
    v8_regexp_utils.assertNull(res[dartx.get](702).firstMatch("x{c0}"), 1932);
    v8_regexp_utils.assertNull(res[dartx.get](702).firstMatch("x{e0} "), 1933);
    v8_regexp_utils.assertNull(res[dartx.get](703).firstMatch("x{1b00}x{12000}x{7c0}x{a840}x{10900}"), 1934);
    v8_regexp_utils.assertNull(res[dartx.get](706).firstMatch("123abcdefg"), 1935);
    v8_regexp_utils.assertNull(res[dartx.get](706).firstMatch("123abcÄÅzz"), 1936);
    v8_regexp_utils.assertNull(res[dartx.get](710).firstMatch("A"), 1937);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{60e} "), 1938);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{656} "), 1939);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{657} "), 1940);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{658} "), 1941);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{659} "), 1942);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{65a} "), 1943);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{65b} "), 1944);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{65c} "), 1945);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{65d} "), 1946);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{65e} "), 1947);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{66a} "), 1948);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{6e9} "), 1949);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{6ef}"), 1950);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{6fa}  "), 1951);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("** Failers"), 1952);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{600}"), 1953);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{650}"), 1954);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{651}  "), 1955);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{652}  "), 1956);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{653}  "), 1957);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{654} "), 1958);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{655} "), 1959);
    v8_regexp_utils.assertNull(res[dartx.get](725).firstMatch("x{65f}  "), 1960);
    v8_regexp_utils.assertNull(res[dartx.get](726).firstMatch("x{1d2b} "), 1961);
    v8_regexp_utils.assertNull(res[dartx.get](727).firstMatch("x{589}"), 1962);
    v8_regexp_utils.assertNull(res[dartx.get](727).firstMatch("x{60c}"), 1963);
    v8_regexp_utils.assertNull(res[dartx.get](727).firstMatch("x{61f}  "), 1964);
    v8_regexp_utils.assertNull(res[dartx.get](727).firstMatch("x{964}"), 1965);
    v8_regexp_utils.assertNull(res[dartx.get](727).firstMatch("x{965}  "), 1966);
    v8_regexp_utils.assertNull(res[dartx.get](727).firstMatch("x{970}  "), 1967);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("x{64b}"), 1968);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("x{654}"), 1969);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("x{655}"), 1970);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("x{200c} "), 1971);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("** Failers"), 1972);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("x{64a}"), 1973);
    v8_regexp_utils.assertNull(res[dartx.get](728).firstMatch("x{656}     "), 1974);
    v8_regexp_utils.assertNull(res[dartx.get](729).firstMatch("x{10450}"), 1975);
    v8_regexp_utils.assertNull(res[dartx.get](729).firstMatch("x{1047f}"), 1976);
    v8_regexp_utils.assertNull(res[dartx.get](730).firstMatch("x{10400}"), 1977);
    v8_regexp_utils.assertNull(res[dartx.get](730).firstMatch("x{1044f}"), 1978);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{10480}"), 1979);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{1049d}"), 1980);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{104a0}"), 1981);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{104a9}"), 1982);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("** Failers"), 1983);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{1049e}"), 1984);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{1049f}"), 1985);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{104aa}           "), 1986);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("â¨â¨"), 1987);
    v8_regexp_utils.assertNull(res[dartx.get](731).firstMatch("x{2028}x{2028}x{2028}"), 1988);
    v8_regexp_utils.assertNull(res[dartx.get](732).firstMatch("x{c0}x{e0}x{116}x{117}"), 1989);
    v8_regexp_utils.assertNull(res[dartx.get](732).firstMatch("x{c0}x{e0}x{116}x{117}"), 1990);
    v8_regexp_utils.assertNull(res[dartx.get](733).firstMatch("x{102A4}x{AA52}x{A91D}x{1C46}x{10283}x{1092E}x{1C6B}x{A93B}x{A8BF}x{1BA0}x{A50A}===="), 1991);
    v8_regexp_utils.assertNull(res[dartx.get](733).firstMatch("x{a77d}x{1d79}"), 1992);
    v8_regexp_utils.assertNull(res[dartx.get](733).firstMatch("x{1d79}x{a77d} "), 1993);
    v8_regexp_utils.assertNull(res[dartx.get](733).firstMatch("x{a77d}x{1d79}"), 1994);
    v8_regexp_utils.assertNull(res[dartx.get](733).firstMatch("** Failers "), 1995);
    v8_regexp_utils.assertNull(res[dartx.get](733).firstMatch("x{1d79}x{a77d} "), 1996);
    v8_regexp_utils.assertToStringEquals("AA,A", res[dartx.get](734).firstMatch("AA"), 1997);
    v8_regexp_utils.assertToStringEquals("Aa,A", res[dartx.get](734).firstMatch("Aa"), 1998);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](734).firstMatch("aa"), 1999);
    v8_regexp_utils.assertToStringEquals("aA,a", res[dartx.get](734).firstMatch("aA"), 2000);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{de}x{de}"), 2001);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{de}x{fe}"), 2002);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{fe}x{fe}"), 2003);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{fe}x{de}"), 2004);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{10a}x{10a}"), 2005);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{10a}x{10b}"), 2006);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{10b}x{10b}"), 2007);
    v8_regexp_utils.assertNull(res[dartx.get](734).firstMatch("x{10b}x{10a}"), 2008);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](736).firstMatch("abc"), 2009);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](737).firstMatch("abc"), 2010);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](737).firstMatch("abbbbc"), 2011);
    v8_regexp_utils.assertToStringEquals("ac", res[dartx.get](737).firstMatch("ac"), 2012);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](738).firstMatch("abc"), 2013);
    v8_regexp_utils.assertToStringEquals("abbbbbbc", res[dartx.get](738).firstMatch("abbbbbbc"), 2014);
    v8_regexp_utils.assertNull(res[dartx.get](738).firstMatch("*** Failers "), 2015);
    v8_regexp_utils.assertNull(res[dartx.get](738).firstMatch("ac"), 2016);
    v8_regexp_utils.assertNull(res[dartx.get](738).firstMatch("ab"), 2017);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](739).firstMatch("a"), 2018);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaa", res[dartx.get](739).firstMatch("aaaaaaaaaaaaaaaaa"), 2019);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](739).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa "), 2020);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](739).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaF "), 2021);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](740).firstMatch("a"), 2022);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](740).firstMatch("abcd"), 2023);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](740).firstMatch("african"), 2024);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](741).firstMatch("abcdef"), 2025);
    v8_regexp_utils.assertNull(res[dartx.get](741).firstMatch("*** Failers"), 2026);
    v8_regexp_utils.assertNull(res[dartx.get](741).firstMatch("xyzabc"), 2027);
    v8_regexp_utils.assertNull(res[dartx.get](741).firstMatch("xyz\nabc    "), 2028);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](742).firstMatch("abcdef"), 2029);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](742).firstMatch("xyz\nabc    "), 2030);
    v8_regexp_utils.assertNull(res[dartx.get](742).firstMatch("*** Failers"), 2031);
    v8_regexp_utils.assertNull(res[dartx.get](742).firstMatch("xyzabc"), 2032);
    v8_regexp_utils.assertNull(res[dartx.get](743).firstMatch("abcdef"), 2033);
    v8_regexp_utils.assertNull(res[dartx.get](743).firstMatch("*** Failers"), 2034);
    v8_regexp_utils.assertNull(res[dartx.get](743).firstMatch("xyzabc"), 2035);
    v8_regexp_utils.assertNull(res[dartx.get](743).firstMatch("xyz\nabc    "), 2036);
    v8_regexp_utils.assertNull(res[dartx.get](744).firstMatch("abcdef"), 2037);
    v8_regexp_utils.assertNull(res[dartx.get](744).firstMatch("*** Failers"), 2038);
    v8_regexp_utils.assertNull(res[dartx.get](744).firstMatch("xyzabc"), 2039);
    v8_regexp_utils.assertNull(res[dartx.get](744).firstMatch("xyz\nabc    "), 2040);
    v8_regexp_utils.assertNull(res[dartx.get](745).firstMatch("abcdef"), 2041);
    v8_regexp_utils.assertNull(res[dartx.get](745).firstMatch("xyzabc>3"), 2042);
    v8_regexp_utils.assertNull(res[dartx.get](745).firstMatch("*** Failers"), 2043);
    v8_regexp_utils.assertNull(res[dartx.get](745).firstMatch("xyzabc    "), 2044);
    v8_regexp_utils.assertNull(res[dartx.get](745).firstMatch("xyzabc>2 "), 2045);
    v8_regexp_utils.assertToStringEquals("x9yzz", res[dartx.get](746).firstMatch("x9yzz"), 2046);
    v8_regexp_utils.assertToStringEquals("x0y+z", res[dartx.get](746).firstMatch("x0y+z"), 2047);
    v8_regexp_utils.assertNull(res[dartx.get](746).firstMatch("*** Failers"), 2048);
    v8_regexp_utils.assertNull(res[dartx.get](746).firstMatch("xyz"), 2049);
    v8_regexp_utils.assertNull(res[dartx.get](746).firstMatch("xxy0z     "), 2050);
    v8_regexp_utils.assertToStringEquals("x yzz", res[dartx.get](747).firstMatch("x yzz"), 2051);
    v8_regexp_utils.assertToStringEquals("x y+z", res[dartx.get](747).firstMatch("x y+z"), 2052);
    v8_regexp_utils.assertNull(res[dartx.get](747).firstMatch("*** Failers"), 2053);
    v8_regexp_utils.assertNull(res[dartx.get](747).firstMatch("xyz"), 2054);
    v8_regexp_utils.assertNull(res[dartx.get](747).firstMatch("xxyyz"), 2055);
    v8_regexp_utils.assertToStringEquals("xxy+z", res[dartx.get](748).firstMatch("xxy+z"), 2056);
    v8_regexp_utils.assertNull(res[dartx.get](748).firstMatch("*** Failers"), 2057);
    v8_regexp_utils.assertNull(res[dartx.get](748).firstMatch("xxy0z"), 2058);
    v8_regexp_utils.assertNull(res[dartx.get](748).firstMatch("x+y+z         "), 2059);
    v8_regexp_utils.assertToStringEquals("x+y", res[dartx.get](749).firstMatch("x+y"), 2060);
    v8_regexp_utils.assertToStringEquals("x-y", res[dartx.get](749).firstMatch("x-y"), 2061);
    v8_regexp_utils.assertNull(res[dartx.get](749).firstMatch("*** Failers"), 2062);
    v8_regexp_utils.assertNull(res[dartx.get](749).firstMatch("x\ny"), 2063);
    v8_regexp_utils.assertToStringEquals("x+y", res[dartx.get](750).firstMatch("x+y"), 2064);
    v8_regexp_utils.assertToStringEquals("x-y", res[dartx.get](750).firstMatch("x-y"), 2065);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("x\ny"), 2066);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("a+bc+dp+q"), 2067);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("a+bc\ndp+q"), 2068);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("x\nyp+q "), 2069);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("*** Failers "), 2070);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("a\nbc\ndp+q"), 2071);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("a+bc\ndp\nq"), 2072);
    v8_regexp_utils.assertNull(res[dartx.get](750).firstMatch("x\nyp\nq "), 2073);
    v8_regexp_utils.assertNull(res[dartx.get](751).firstMatch("ba0"), 2074);
    v8_regexp_utils.assertNull(res[dartx.get](751).firstMatch("*** Failers"), 2075);
    v8_regexp_utils.assertNull(res[dartx.get](751).firstMatch("ba0\n"), 2076);
    v8_regexp_utils.assertNull(res[dartx.get](751).firstMatch("ba0\ncd   "), 2077);
    v8_regexp_utils.assertNull(res[dartx.get](752).firstMatch("ba0"), 2078);
    v8_regexp_utils.assertNull(res[dartx.get](752).firstMatch("*** Failers"), 2079);
    v8_regexp_utils.assertNull(res[dartx.get](752).firstMatch("ba0\n"), 2080);
    v8_regexp_utils.assertNull(res[dartx.get](752).firstMatch("ba0\ncd   "), 2081);
    v8_regexp_utils.assertNull(res[dartx.get](753).firstMatch("ba0"), 2082);
    v8_regexp_utils.assertNull(res[dartx.get](753).firstMatch("ba0\n"), 2083);
    v8_regexp_utils.assertNull(res[dartx.get](753).firstMatch("*** Failers"), 2084);
    v8_regexp_utils.assertNull(res[dartx.get](753).firstMatch("ba0\ncd   "), 2085);
    v8_regexp_utils.assertNull(res[dartx.get](754).firstMatch("ba0"), 2086);
    v8_regexp_utils.assertNull(res[dartx.get](754).firstMatch("ba0\n"), 2087);
    v8_regexp_utils.assertNull(res[dartx.get](754).firstMatch("*** Failers"), 2088);
    v8_regexp_utils.assertNull(res[dartx.get](754).firstMatch("ba0\ncd   "), 2089);
    v8_regexp_utils.assertToStringEquals("a0", res[dartx.get](755).firstMatch("ba0"), 2090);
    v8_regexp_utils.assertNull(res[dartx.get](755).firstMatch("ba0\n"), 2091);
    v8_regexp_utils.assertNull(res[dartx.get](755).firstMatch("*** Failers"), 2092);
    v8_regexp_utils.assertNull(res[dartx.get](755).firstMatch("ba0\ncd   "), 2093);
    v8_regexp_utils.assertToStringEquals("a0", res[dartx.get](756).firstMatch("ba0"), 2094);
    v8_regexp_utils.assertToStringEquals("a0", res[dartx.get](756).firstMatch("ba0\n"), 2095);
    v8_regexp_utils.assertToStringEquals("a0", res[dartx.get](756).firstMatch("ba0\ncd   "), 2096);
    v8_regexp_utils.assertNull(res[dartx.get](756).firstMatch("*** Failers"), 2097);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](757).firstMatch("abc"), 2098);
    v8_regexp_utils.assertToStringEquals("aBc", res[dartx.get](757).firstMatch("aBc"), 2099);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](757).firstMatch("ABC"), 2100);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](758).firstMatch("abcd"), 2101);
    v8_regexp_utils.assertToStringEquals("abz", res[dartx.get](759).firstMatch("abz"), 2102);
    v8_regexp_utils.assertToStringEquals("abb", res[dartx.get](759).firstMatch("abbz"), 2103);
    v8_regexp_utils.assertToStringEquals("az", res[dartx.get](759).firstMatch("azz  "), 2104);
    v8_regexp_utils.assertToStringEquals("yz", res[dartx.get](760).firstMatch("ayzq"), 2105);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](760).firstMatch("axyzq"), 2106);
    v8_regexp_utils.assertToStringEquals("xxyz", res[dartx.get](760).firstMatch("axxyz"), 2107);
    v8_regexp_utils.assertToStringEquals("xxxyz", res[dartx.get](760).firstMatch("axxxyzq"), 2108);
    v8_regexp_utils.assertToStringEquals("xxxyz", res[dartx.get](760).firstMatch("axxxxyzq"), 2109);
    v8_regexp_utils.assertNull(res[dartx.get](760).firstMatch("*** Failers"), 2110);
    v8_regexp_utils.assertNull(res[dartx.get](760).firstMatch("ax"), 2111);
    v8_regexp_utils.assertNull(res[dartx.get](760).firstMatch("axx     "), 2112);
    v8_regexp_utils.assertNull(res[dartx.get](760).firstMatch("  "), 2113);
    v8_regexp_utils.assertToStringEquals("xxxyz", res[dartx.get](761).firstMatch("axxxyzq"), 2114);
    v8_regexp_utils.assertToStringEquals("xxxyz", res[dartx.get](761).firstMatch("axxxxyzq"), 2115);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("*** Failers"), 2116);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("ax"), 2117);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("axx     "), 2118);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("ayzq"), 2119);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("axyzq"), 2120);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("axxyz"), 2121);
    v8_regexp_utils.assertNull(res[dartx.get](761).firstMatch("  "), 2122);
    v8_regexp_utils.assertToStringEquals("xxyz", res[dartx.get](762).firstMatch("axxyz"), 2123);
    v8_regexp_utils.assertToStringEquals("xxxyz", res[dartx.get](762).firstMatch("axxxyzq"), 2124);
    v8_regexp_utils.assertToStringEquals("xxxyz", res[dartx.get](762).firstMatch("axxxxyzq"), 2125);
    v8_regexp_utils.assertNull(res[dartx.get](762).firstMatch("*** Failers"), 2126);
    v8_regexp_utils.assertNull(res[dartx.get](762).firstMatch("ax"), 2127);
    v8_regexp_utils.assertNull(res[dartx.get](762).firstMatch("axx     "), 2128);
    v8_regexp_utils.assertNull(res[dartx.get](762).firstMatch("ayzq"), 2129);
    v8_regexp_utils.assertNull(res[dartx.get](762).firstMatch("axyzq"), 2130);
    v8_regexp_utils.assertNull(res[dartx.get](762).firstMatch("  "), 2131);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](763).firstMatch("bac"), 2132);
    v8_regexp_utils.assertToStringEquals("bcdef", res[dartx.get](763).firstMatch("bcdefax"), 2133);
    v8_regexp_utils.assertToStringEquals("*** F", res[dartx.get](763).firstMatch("*** Failers"), 2134);
    v8_regexp_utils.assertToStringEquals("   ", res[dartx.get](763).firstMatch("aaaaa   "), 2135);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](764).firstMatch("bac"), 2136);
    v8_regexp_utils.assertToStringEquals("bcdef", res[dartx.get](764).firstMatch("bcdefax"), 2137);
    v8_regexp_utils.assertToStringEquals("*** F", res[dartx.get](764).firstMatch("*** Failers"), 2138);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](764).firstMatch("aaaaa   "), 2139);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](765).firstMatch("xyz"), 2140);
    v8_regexp_utils.assertToStringEquals("wxyz", res[dartx.get](765).firstMatch("awxyza"), 2141);
    v8_regexp_utils.assertToStringEquals("bcdef", res[dartx.get](765).firstMatch("abcdefa"), 2142);
    v8_regexp_utils.assertToStringEquals("bcdef", res[dartx.get](765).firstMatch("abcdefghijk"), 2143);
    v8_regexp_utils.assertToStringEquals("*** F", res[dartx.get](765).firstMatch("*** Failers"), 2144);
    v8_regexp_utils.assertNull(res[dartx.get](765).firstMatch("axya"), 2145);
    v8_regexp_utils.assertNull(res[dartx.get](765).firstMatch("axa"), 2146);
    v8_regexp_utils.assertToStringEquals("     ", res[dartx.get](765).firstMatch("aaaaa         "), 2147);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](766).firstMatch("1234b567"), 2148);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](766).firstMatch("xyz"), 2149);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](767).firstMatch("a1234b567"), 2150);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](767).firstMatch("xyz"), 2151);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](767).firstMatch(" "), 2152);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](768).firstMatch("ab1234c56"), 2153);
    v8_regexp_utils.assertNull(res[dartx.get](768).firstMatch("*** Failers"), 2154);
    v8_regexp_utils.assertNull(res[dartx.get](768).firstMatch("xyz"), 2155);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](769).firstMatch("ab123c56"), 2156);
    v8_regexp_utils.assertToStringEquals("*** Failers", res[dartx.get](769).firstMatch("*** Failers"), 2157);
    v8_regexp_utils.assertNull(res[dartx.get](769).firstMatch("789"), 2158);
    v8_regexp_utils.assertToStringEquals("5A", res[dartx.get](770).firstMatch("045ABC"), 2159);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](770).firstMatch("ABC"), 2160);
    v8_regexp_utils.assertNull(res[dartx.get](770).firstMatch("*** Failers"), 2161);
    v8_regexp_utils.assertNull(res[dartx.get](770).firstMatch("XYZ"), 2162);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](771).firstMatch("ABC"), 2163);
    v8_regexp_utils.assertToStringEquals("BA", res[dartx.get](771).firstMatch("BAC"), 2164);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](771).firstMatch("9ABC             "), 2165);
    v8_regexp_utils.assertNull(res[dartx.get](771).firstMatch("*** Failers"), 2166);
    v8_regexp_utils.assertToStringEquals("aaaa", res[dartx.get](772).firstMatch("aaaa"), 2167);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](773).firstMatch("xyz"), 2168);
    v8_regexp_utils.assertToStringEquals("ggggggggxyz", res[dartx.get](773).firstMatch("ggggggggxyz"), 2169);
    v8_regexp_utils.assertToStringEquals("abcdxyz", res[dartx.get](774).firstMatch("abcdxyz"), 2170);
    v8_regexp_utils.assertToStringEquals("axyz", res[dartx.get](774).firstMatch("axyz"), 2171);
    v8_regexp_utils.assertNull(res[dartx.get](774).firstMatch("*** Failers"), 2172);
    v8_regexp_utils.assertNull(res[dartx.get](774).firstMatch("xyz"), 2173);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](775).firstMatch("xyz"), 2174);
    v8_regexp_utils.assertToStringEquals("cxyz", res[dartx.get](775).firstMatch("cxyz       "), 2175);
    v8_regexp_utils.assertToStringEquals("12X", res[dartx.get](776).firstMatch("12X"), 2176);
    v8_regexp_utils.assertToStringEquals("123X", res[dartx.get](776).firstMatch("123X"), 2177);
    v8_regexp_utils.assertNull(res[dartx.get](776).firstMatch("*** Failers"), 2178);
    v8_regexp_utils.assertNull(res[dartx.get](776).firstMatch("X"), 2179);
    v8_regexp_utils.assertNull(res[dartx.get](776).firstMatch("1X"), 2180);
    v8_regexp_utils.assertNull(res[dartx.get](776).firstMatch("1234X     "), 2181);
    v8_regexp_utils.assertToStringEquals("a4", res[dartx.get](777).firstMatch("a45"), 2182);
    v8_regexp_utils.assertToStringEquals("b9", res[dartx.get](777).firstMatch("b93"), 2183);
    v8_regexp_utils.assertToStringEquals("c9", res[dartx.get](777).firstMatch("c99z"), 2184);
    v8_regexp_utils.assertToStringEquals("d0", res[dartx.get](777).firstMatch("d04"), 2185);
    v8_regexp_utils.assertNull(res[dartx.get](777).firstMatch("*** Failers"), 2186);
    v8_regexp_utils.assertNull(res[dartx.get](777).firstMatch("e45"), 2187);
    v8_regexp_utils.assertNull(res[dartx.get](777).firstMatch("abcd      "), 2188);
    v8_regexp_utils.assertNull(res[dartx.get](777).firstMatch("abcd1234"), 2189);
    v8_regexp_utils.assertNull(res[dartx.get](777).firstMatch("1234  "), 2190);
    v8_regexp_utils.assertToStringEquals("a4", res[dartx.get](778).firstMatch("a45"), 2191);
    v8_regexp_utils.assertToStringEquals("b9", res[dartx.get](778).firstMatch("b93"), 2192);
    v8_regexp_utils.assertToStringEquals("c9", res[dartx.get](778).firstMatch("c99z"), 2193);
    v8_regexp_utils.assertToStringEquals("d0", res[dartx.get](778).firstMatch("d04"), 2194);
    v8_regexp_utils.assertToStringEquals("abcd1", res[dartx.get](778).firstMatch("abcd1234"), 2195);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](778).firstMatch("1234  "), 2196);
    v8_regexp_utils.assertNull(res[dartx.get](778).firstMatch("*** Failers"), 2197);
    v8_regexp_utils.assertNull(res[dartx.get](778).firstMatch("e45"), 2198);
    v8_regexp_utils.assertNull(res[dartx.get](778).firstMatch("abcd      "), 2199);
    v8_regexp_utils.assertToStringEquals("a4", res[dartx.get](779).firstMatch("a45"), 2200);
    v8_regexp_utils.assertToStringEquals("b9", res[dartx.get](779).firstMatch("b93"), 2201);
    v8_regexp_utils.assertToStringEquals("c9", res[dartx.get](779).firstMatch("c99z"), 2202);
    v8_regexp_utils.assertToStringEquals("d0", res[dartx.get](779).firstMatch("d04"), 2203);
    v8_regexp_utils.assertToStringEquals("abcd1", res[dartx.get](779).firstMatch("abcd1234"), 2204);
    v8_regexp_utils.assertNull(res[dartx.get](779).firstMatch("*** Failers"), 2205);
    v8_regexp_utils.assertNull(res[dartx.get](779).firstMatch("1234  "), 2206);
    v8_regexp_utils.assertNull(res[dartx.get](779).firstMatch("e45"), 2207);
    v8_regexp_utils.assertNull(res[dartx.get](779).firstMatch("abcd      "), 2208);
    v8_regexp_utils.assertToStringEquals("aX", res[dartx.get](780).firstMatch("aX"), 2209);
    v8_regexp_utils.assertToStringEquals("aaX", res[dartx.get](780).firstMatch("aaX "), 2210);
    v8_regexp_utils.assertToStringEquals("a4", res[dartx.get](781).firstMatch("a45"), 2211);
    v8_regexp_utils.assertToStringEquals("b9", res[dartx.get](781).firstMatch("b93"), 2212);
    v8_regexp_utils.assertToStringEquals("c9", res[dartx.get](781).firstMatch("c99z"), 2213);
    v8_regexp_utils.assertToStringEquals("d0", res[dartx.get](781).firstMatch("d04"), 2214);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](781).firstMatch("1234  "), 2215);
    v8_regexp_utils.assertNull(res[dartx.get](781).firstMatch("*** Failers"), 2216);
    v8_regexp_utils.assertNull(res[dartx.get](781).firstMatch("abcd1234"), 2217);
    v8_regexp_utils.assertNull(res[dartx.get](781).firstMatch("e45"), 2218);
    v8_regexp_utils.assertToStringEquals("ab4", res[dartx.get](782).firstMatch("ab45"), 2219);
    v8_regexp_utils.assertToStringEquals("bcd9", res[dartx.get](782).firstMatch("bcd93"), 2220);
    v8_regexp_utils.assertNull(res[dartx.get](782).firstMatch("*** Failers"), 2221);
    v8_regexp_utils.assertNull(res[dartx.get](782).firstMatch("1234 "), 2222);
    v8_regexp_utils.assertNull(res[dartx.get](782).firstMatch("a36 "), 2223);
    v8_regexp_utils.assertNull(res[dartx.get](782).firstMatch("abcd1234"), 2224);
    v8_regexp_utils.assertNull(res[dartx.get](782).firstMatch("ee45"), 2225);
    v8_regexp_utils.assertToStringEquals("abc4,abc", res[dartx.get](783).firstMatch("abc45"), 2226);
    v8_regexp_utils.assertToStringEquals("abcabcabc4,abc", res[dartx.get](783).firstMatch("abcabcabc45"), 2227);
    v8_regexp_utils.assertToStringEquals("4,", res[dartx.get](783).firstMatch("42xyz "), 2228);
    v8_regexp_utils.assertNull(res[dartx.get](783).firstMatch("*** Failers"), 2229);
    v8_regexp_utils.assertToStringEquals("abc4,abc", res[dartx.get](784).firstMatch("abc45"), 2230);
    v8_regexp_utils.assertToStringEquals("abcabcabc4,abc", res[dartx.get](784).firstMatch("abcabcabc45"), 2231);
    v8_regexp_utils.assertNull(res[dartx.get](784).firstMatch("*** Failers"), 2232);
    v8_regexp_utils.assertNull(res[dartx.get](784).firstMatch("42xyz "), 2233);
    v8_regexp_utils.assertToStringEquals("abc4,abc", res[dartx.get](785).firstMatch("abc45"), 2234);
    v8_regexp_utils.assertToStringEquals("4,", res[dartx.get](785).firstMatch("42xyz "), 2235);
    v8_regexp_utils.assertNull(res[dartx.get](785).firstMatch("*** Failers"), 2236);
    v8_regexp_utils.assertNull(res[dartx.get](785).firstMatch("abcabcabc45"), 2237);
    v8_regexp_utils.assertToStringEquals("abcabc4,abc", res[dartx.get](786).firstMatch("abcabc45"), 2238);
    v8_regexp_utils.assertToStringEquals("abcabcabc4,abc", res[dartx.get](786).firstMatch("abcabcabc45"), 2239);
    v8_regexp_utils.assertNull(res[dartx.get](786).firstMatch("*** Failers"), 2240);
    v8_regexp_utils.assertNull(res[dartx.get](786).firstMatch("abcabcabcabc45"), 2241);
    v8_regexp_utils.assertNull(res[dartx.get](786).firstMatch("abc45"), 2242);
    v8_regexp_utils.assertNull(res[dartx.get](786).firstMatch("42xyz "), 2243);
    v8_regexp_utils.assertNull(res[dartx.get](786).firstMatch("1abc2abc3456"), 2244);
    v8_regexp_utils.assertNull(res[dartx.get](786).firstMatch("1abc2xyz3456 "), 2245);
    v8_regexp_utils.assertToStringEquals("ab=ab,ab,ab", res[dartx.get](787).firstMatch("ab=ab"), 2246);
    v8_regexp_utils.assertToStringEquals("ab=ab,ab,ab", res[dartx.get](787).firstMatch("ab=ab"), 2247);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("abc"), 2248);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("a(b)c"), 2249);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("a(b(c))d  "), 2250);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("*** Failers)"), 2251);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("a(b(c)d  "), 2252);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch(">abc>123<xyz<"), 2253);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch(">abc>1(2)3<xyz<"), 2254);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch(">abc>(1(2)3)<xyz<"), 2255);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9876"), 2256);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("*** Failers "), 2257);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 2258);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<>"), 2259);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<abcd>"), 2260);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<abc <123> hij>"), 2261);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<abc <def> hij>"), 2262);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<abc<>def> "), 2263);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<abc<>      "), 2264);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("*** Failers"), 2265);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("<abc"), 2266);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("abc:                          "), 2267);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("12                             "), 2268);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("*** Failers                     "), 2269);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("123                       "), 2270);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("xyz                        "), 2271);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("                            "), 2272);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("abc:                        "), 2273);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("12         "), 2274);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("*** Failers"), 2275);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("123"), 2276);
    v8_regexp_utils.assertNull(res[dartx.get](787).firstMatch("xyz    "), 2277);
    v8_regexp_utils.assertNull(res[dartx.get](788).firstMatch("abcde:                          "), 2278);
    v8_regexp_utils.assertNull(res[dartx.get](788).firstMatch("*** Failers                     "), 2279);
    v8_regexp_utils.assertNull(res[dartx.get](788).firstMatch("abc.. "), 2280);
    v8_regexp_utils.assertNull(res[dartx.get](788).firstMatch("123                       "), 2281);
    v8_regexp_utils.assertNull(res[dartx.get](788).firstMatch("vwxyz                        "), 2282);
    v8_regexp_utils.assertNull(res[dartx.get](788).firstMatch("                            "), 2283);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("12         "), 2284);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("*** Failers"), 2285);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("abcde:"), 2286);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("abc..  "), 2287);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("123"), 2288);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("vwxyz    "), 2289);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("abc12345"), 2290);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("wxy123z"), 2291);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("*** Failers"), 2292);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("123abc"), 2293);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("123abc"), 2294);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("mno123456 "), 2295);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("*** Failers"), 2296);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("abc12345"), 2297);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("wxy123z"), 2298);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("abcxyz"), 2299);
    v8_regexp_utils.assertNull(res[dartx.get](789).firstMatch("123abcxyz999 "), 2300);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](791).firstMatch("abcdef"), 2301);
    v8_regexp_utils.assertNull(res[dartx.get](791).firstMatch("*** Failers"), 2302);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](791).firstMatch("abcdefB  "), 2303);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](792).firstMatch("bcd"), 2304);
    v8_regexp_utils.assertToStringEquals("aaa,aaa", res[dartx.get](792).firstMatch("aaabcd"), 2305);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](792).firstMatch("xyz"), 2306);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](792).firstMatch("xyzN  "), 2307);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](792).firstMatch("*** Failers"), 2308);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](792).firstMatch("bcdN   "), 2309);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](793).firstMatch("xyz"), 2310);
    v8_regexp_utils.assertNull(res[dartx.get](793).firstMatch("xyz\n"), 2311);
    v8_regexp_utils.assertNull(res[dartx.get](793).firstMatch("*** Failers"), 2312);
    v8_regexp_utils.assertNull(res[dartx.get](793).firstMatch("xyzZ"), 2313);
    v8_regexp_utils.assertNull(res[dartx.get](793).firstMatch("xyz\nZ    "), 2314);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](794).firstMatch("xyz"), 2315);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](794).firstMatch("xyz\n "), 2316);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](794).firstMatch("abcxyz\npqr "), 2317);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](794).firstMatch("abcxyz\npqrZ "), 2318);
    v8_regexp_utils.assertToStringEquals("xyz", res[dartx.get](794).firstMatch("xyz\nZ    "), 2319);
    v8_regexp_utils.assertNull(res[dartx.get](794).firstMatch("*** Failers"), 2320);
    v8_regexp_utils.assertNull(res[dartx.get](794).firstMatch("xyzZ"), 2321);
    v8_regexp_utils.assertNull(res[dartx.get](795).firstMatch("abcdef"), 2322);
    v8_regexp_utils.assertNull(res[dartx.get](795).firstMatch("defabcxyz>3 "), 2323);
    v8_regexp_utils.assertNull(res[dartx.get](795).firstMatch("*** Failers "), 2324);
    v8_regexp_utils.assertNull(res[dartx.get](795).firstMatch("defabcxyz"), 2325);
    v8_regexp_utils.assertNull(res[dartx.get](796).firstMatch("abP"), 2326);
    v8_regexp_utils.assertNull(res[dartx.get](796).firstMatch("abcdeP"), 2327);
    v8_regexp_utils.assertToStringEquals("abcdef", res[dartx.get](796).firstMatch("abcdefP"), 2328);
    v8_regexp_utils.assertNull(res[dartx.get](796).firstMatch("*** Failers"), 2329);
    v8_regexp_utils.assertNull(res[dartx.get](796).firstMatch("abxP    "), 2330);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aP"), 2331);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aaP"), 2332);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aa2P "), 2333);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aaaP"), 2334);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aaa23P "), 2335);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aaaa12345P"), 2336);
    v8_regexp_utils.assertToStringEquals("aa0z", res[dartx.get](797).firstMatch("aa0zP"), 2337);
    v8_regexp_utils.assertToStringEquals("aaaa4444444444444z", res[dartx.get](797).firstMatch("aaaa4444444444444zP "), 2338);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("*** Failers"), 2339);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("azP "), 2340);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("aaaaaP "), 2341);
    v8_regexp_utils.assertNull(res[dartx.get](797).firstMatch("a56P "), 2342);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("adfadadaklhlkalkajhlkjahdfasdfasdfladsfjkjPZ"), 2343);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("lkjhlkjhlkjhlkjhabbbbbbcdaefabbbbbbbefaPBZ"), 2344);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("cdabbbbbbbbPRBZ"), 2345);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("efabbbbbbbbbbbbbbbbPRBZ"), 2346);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("bbbbbbbbbbbbcdXyasdfadfPRBZ    "), 2347);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("abc"), 2348);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("** Failers"), 2349);
    v8_regexp_utils.assertNull(res[dartx.get](799).firstMatch("def  "), 2350);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](800).firstMatch("the quick brown fox"), 2351);
    v8_regexp_utils.assertNull(res[dartx.get](800).firstMatch("The quick brown FOX"), 2352);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](800).firstMatch("What do you know about the quick brown fox?"), 2353);
    v8_regexp_utils.assertNull(res[dartx.get](800).firstMatch("What do you know about THE QUICK BROWN FOX?"), 2354);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](801).firstMatch("the quick brown fox"), 2355);
    v8_regexp_utils.assertToStringEquals("The quick brown FOX", res[dartx.get](801).firstMatch("The quick brown FOX"), 2356);
    v8_regexp_utils.assertToStringEquals("the quick brown fox", res[dartx.get](801).firstMatch("What do you know about the quick brown fox?"), 2357);
    v8_regexp_utils.assertToStringEquals("THE QUICK BROWN FOX", res[dartx.get](801).firstMatch("What do you know about THE QUICK BROWN FOX?"), 2358);
    v8_regexp_utils.assertToStringEquals("abcd\t\n\r\fae9;$\\?caxyz", res[dartx.get](802).firstMatch("abcd\t\n\r\fae9;$\\?caxyz"), 2359);
    v8_regexp_utils.assertToStringEquals("abxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("abxyzpqrrrabbxyyyypqAzz"), 2360);
    v8_regexp_utils.assertToStringEquals("abxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("abxyzpqrrrabbxyyyypqAzz"), 2361);
    v8_regexp_utils.assertToStringEquals("aabxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aabxyzpqrrrabbxyyyypqAzz"), 2362);
    v8_regexp_utils.assertToStringEquals("aaabxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaabxyzpqrrrabbxyyyypqAzz"), 2363);
    v8_regexp_utils.assertToStringEquals("aaaabxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaaabxyzpqrrrabbxyyyypqAzz"), 2364);
    v8_regexp_utils.assertToStringEquals("abcxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("abcxyzpqrrrabbxyyyypqAzz"), 2365);
    v8_regexp_utils.assertToStringEquals("aabcxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aabcxyzpqrrrabbxyyyypqAzz"), 2366);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypAzz"), 2367);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqAzz"), 2368);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypqqAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqqAzz"), 2369);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypqqqAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqqqAzz"), 2370);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypqqqqAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqqqqAzz"), 2371);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypqqqqqAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqqqqqAzz"), 2372);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypqqqqqqAzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqqqqqqAzz"), 2373);
    v8_regexp_utils.assertToStringEquals("aaaabcxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaaabcxyzpqrrrabbxyyyypqAzz"), 2374);
    v8_regexp_utils.assertToStringEquals("abxyzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("abxyzzpqrrrabbxyyyypqAzz"), 2375);
    v8_regexp_utils.assertToStringEquals("aabxyzzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aabxyzzzpqrrrabbxyyyypqAzz"), 2376);
    v8_regexp_utils.assertToStringEquals("aaabxyzzzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaabxyzzzzpqrrrabbxyyyypqAzz"), 2377);
    v8_regexp_utils.assertToStringEquals("aaaabxyzzzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaaabxyzzzzpqrrrabbxyyyypqAzz"), 2378);
    v8_regexp_utils.assertToStringEquals("abcxyzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("abcxyzzpqrrrabbxyyyypqAzz"), 2379);
    v8_regexp_utils.assertToStringEquals("aabcxyzzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aabcxyzzzpqrrrabbxyyyypqAzz"), 2380);
    v8_regexp_utils.assertToStringEquals("aaabcxyzzzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaabcxyzzzzpqrrrabbxyyyypqAzz"), 2381);
    v8_regexp_utils.assertToStringEquals("aaaabcxyzzzzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch("aaaabcxyzzzzpqrrrabbxyyyypqAzz"), 2382);
    v8_regexp_utils.assertToStringEquals("aaaabcxyzzzzpqrrrabbbxyyyypqAzz", res[dartx.get](803).firstMatch("aaaabcxyzzzzpqrrrabbbxyyyypqAzz"), 2383);
    v8_regexp_utils.assertToStringEquals("aaaabcxyzzzzpqrrrabbbxyyyyypqAzz", res[dartx.get](803).firstMatch("aaaabcxyzzzzpqrrrabbbxyyyyypqAzz"), 2384);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypABzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypABzz"), 2385);
    v8_regexp_utils.assertToStringEquals("aaabcxyzpqrrrabbxyyyypABBzz", res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypABBzz"), 2386);
    v8_regexp_utils.assertToStringEquals("aaabxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch(">>>aaabxyzpqrrrabbxyyyypqAzz"), 2387);
    v8_regexp_utils.assertToStringEquals("aaaabxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch(">aaaabxyzpqrrrabbxyyyypqAzz"), 2388);
    v8_regexp_utils.assertToStringEquals("abcxyzpqrrrabbxyyyypqAzz", res[dartx.get](803).firstMatch(">>>>abcxyzpqrrrabbxyyyypqAzz"), 2389);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("*** Failers"), 2390);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("abxyzpqrrabbxyyyypqAzz"), 2391);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("abxyzpqrrrrabbxyyyypqAzz"), 2392);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("abxyzpqrrrabxyyyypqAzz"), 2393);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz"), 2394);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("aaaabcxyzzzzpqrrrabbbxyyypqAzz"), 2395);
    v8_regexp_utils.assertNull(res[dartx.get](803).firstMatch("aaabcxyzpqrrrabbxyyyypqqqqqqqAzz"), 2396);
    v8_regexp_utils.assertToStringEquals("abczz,abc", res[dartx.get](804).firstMatch("abczz"), 2397);
    v8_regexp_utils.assertToStringEquals("abcabczz,abc", res[dartx.get](804).firstMatch("abcabczz"), 2398);
    v8_regexp_utils.assertNull(res[dartx.get](804).firstMatch("*** Failers"), 2399);
    v8_regexp_utils.assertNull(res[dartx.get](804).firstMatch("zz"), 2400);
    v8_regexp_utils.assertNull(res[dartx.get](804).firstMatch("abcabcabczz"), 2401);
    v8_regexp_utils.assertNull(res[dartx.get](804).firstMatch(">>abczz"), 2402);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](805).firstMatch("bc"), 2403);
    v8_regexp_utils.assertToStringEquals("bbc,b", res[dartx.get](805).firstMatch("bbc"), 2404);
    v8_regexp_utils.assertToStringEquals("bbbc,bb", res[dartx.get](805).firstMatch("bbbc"), 2405);
    v8_regexp_utils.assertToStringEquals("bac,a", res[dartx.get](805).firstMatch("bac"), 2406);
    v8_regexp_utils.assertToStringEquals("bbac,a", res[dartx.get](805).firstMatch("bbac"), 2407);
    v8_regexp_utils.assertToStringEquals("aac,a", res[dartx.get](805).firstMatch("aac"), 2408);
    v8_regexp_utils.assertToStringEquals("abbbbbbbbbbbc,bbbbbbbbbbb", res[dartx.get](805).firstMatch("abbbbbbbbbbbc"), 2409);
    v8_regexp_utils.assertToStringEquals("bbbbbbbbbbbac,a", res[dartx.get](805).firstMatch("bbbbbbbbbbbac"), 2410);
    v8_regexp_utils.assertNull(res[dartx.get](805).firstMatch("*** Failers"), 2411);
    v8_regexp_utils.assertNull(res[dartx.get](805).firstMatch("aaac"), 2412);
    v8_regexp_utils.assertNull(res[dartx.get](805).firstMatch("abbbbbbbbbbbac"), 2413);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](806).firstMatch("bc"), 2414);
    v8_regexp_utils.assertToStringEquals("bbc,bb", res[dartx.get](806).firstMatch("bbc"), 2415);
    v8_regexp_utils.assertToStringEquals("bbbc,bbb", res[dartx.get](806).firstMatch("bbbc"), 2416);
    v8_regexp_utils.assertToStringEquals("bac,a", res[dartx.get](806).firstMatch("bac"), 2417);
    v8_regexp_utils.assertToStringEquals("bbac,a", res[dartx.get](806).firstMatch("bbac"), 2418);
    v8_regexp_utils.assertToStringEquals("aac,a", res[dartx.get](806).firstMatch("aac"), 2419);
    v8_regexp_utils.assertToStringEquals("abbbbbbbbbbbc,bbbbbbbbbbb", res[dartx.get](806).firstMatch("abbbbbbbbbbbc"), 2420);
    v8_regexp_utils.assertToStringEquals("bbbbbbbbbbbac,a", res[dartx.get](806).firstMatch("bbbbbbbbbbbac"), 2421);
    v8_regexp_utils.assertNull(res[dartx.get](806).firstMatch("*** Failers"), 2422);
    v8_regexp_utils.assertNull(res[dartx.get](806).firstMatch("aaac"), 2423);
    v8_regexp_utils.assertNull(res[dartx.get](806).firstMatch("abbbbbbbbbbbac"), 2424);
    v8_regexp_utils.assertToStringEquals("bbc,bb", res[dartx.get](806).firstMatch("bbc"), 2425);
    v8_regexp_utils.assertToStringEquals("babc,ba", res[dartx.get](807).firstMatch("babc"), 2426);
    v8_regexp_utils.assertToStringEquals("bbabc,ba", res[dartx.get](807).firstMatch("bbabc"), 2427);
    v8_regexp_utils.assertToStringEquals("bababc,ba", res[dartx.get](807).firstMatch("bababc"), 2428);
    v8_regexp_utils.assertNull(res[dartx.get](807).firstMatch("*** Failers"), 2429);
    v8_regexp_utils.assertNull(res[dartx.get](807).firstMatch("bababbc"), 2430);
    v8_regexp_utils.assertNull(res[dartx.get](807).firstMatch("babababc"), 2431);
    v8_regexp_utils.assertToStringEquals("babc,ba", res[dartx.get](808).firstMatch("babc"), 2432);
    v8_regexp_utils.assertToStringEquals("bbabc,ba", res[dartx.get](808).firstMatch("bbabc"), 2433);
    v8_regexp_utils.assertToStringEquals("bababc,ba", res[dartx.get](808).firstMatch("bababc"), 2434);
    v8_regexp_utils.assertNull(res[dartx.get](808).firstMatch("*** Failers"), 2435);
    v8_regexp_utils.assertNull(res[dartx.get](808).firstMatch("bababbc"), 2436);
    v8_regexp_utils.assertNull(res[dartx.get](808).firstMatch("babababc"), 2437);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("^\\\\ca\\\\cA\\\\c[\\\\c{\\\\c:"), VoidToRegExp()), 2438);
    v8_regexp_utils.assertNull(res[dartx.get](808).firstMatch("e;z"), 2439);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](809).firstMatch("athing"), 2440);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](809).firstMatch("bthing"), 2441);
    v8_regexp_utils.assertToStringEquals("]", res[dartx.get](809).firstMatch("]thing"), 2442);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](809).firstMatch("cthing"), 2443);
    v8_regexp_utils.assertToStringEquals("d", res[dartx.get](809).firstMatch("dthing"), 2444);
    v8_regexp_utils.assertToStringEquals("e", res[dartx.get](809).firstMatch("ething"), 2445);
    v8_regexp_utils.assertNull(res[dartx.get](809).firstMatch("*** Failers"), 2446);
    v8_regexp_utils.assertNull(res[dartx.get](809).firstMatch("fthing"), 2447);
    v8_regexp_utils.assertNull(res[dartx.get](809).firstMatch("[thing"), 2448);
    v8_regexp_utils.assertNull(res[dartx.get](809).firstMatch("\\thing"), 2449);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("]thing"), 2450);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("cthing"), 2451);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("dthing"), 2452);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("ething"), 2453);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("*** Failers"), 2454);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("athing"), 2455);
    v8_regexp_utils.assertNull(res[dartx.get](810).firstMatch("fthing"), 2456);
    v8_regexp_utils.assertToStringEquals("f", res[dartx.get](811).firstMatch("fthing"), 2457);
    v8_regexp_utils.assertToStringEquals("[", res[dartx.get](811).firstMatch("[thing"), 2458);
    v8_regexp_utils.assertToStringEquals("\\", res[dartx.get](811).firstMatch("\\thing"), 2459);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](811).firstMatch("*** Failers"), 2460);
    v8_regexp_utils.assertNull(res[dartx.get](811).firstMatch("athing"), 2461);
    v8_regexp_utils.assertNull(res[dartx.get](811).firstMatch("bthing"), 2462);
    v8_regexp_utils.assertNull(res[dartx.get](811).firstMatch("]thing"), 2463);
    v8_regexp_utils.assertNull(res[dartx.get](811).firstMatch("cthing"), 2464);
    v8_regexp_utils.assertNull(res[dartx.get](811).firstMatch("dthing"), 2465);
    v8_regexp_utils.assertNull(res[dartx.get](811).firstMatch("ething"), 2466);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("athing"), 2467);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("fthing"), 2468);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("*** Failers"), 2469);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("]thing"), 2470);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("cthing"), 2471);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("dthing"), 2472);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("ething"), 2473);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("�"), 2474);
    v8_regexp_utils.assertNull(res[dartx.get](812).firstMatch("�"), 2475);
    v8_regexp_utils.assertToStringEquals("0", res[dartx.get](813).firstMatch("0"), 2476);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](813).firstMatch("1"), 2477);
    v8_regexp_utils.assertToStringEquals("2", res[dartx.get](813).firstMatch("2"), 2478);
    v8_regexp_utils.assertToStringEquals("3", res[dartx.get](813).firstMatch("3"), 2479);
    v8_regexp_utils.assertToStringEquals("4", res[dartx.get](813).firstMatch("4"), 2480);
    v8_regexp_utils.assertToStringEquals("5", res[dartx.get](813).firstMatch("5"), 2481);
    v8_regexp_utils.assertToStringEquals("6", res[dartx.get](813).firstMatch("6"), 2482);
    v8_regexp_utils.assertToStringEquals("7", res[dartx.get](813).firstMatch("7"), 2483);
    v8_regexp_utils.assertToStringEquals("8", res[dartx.get](813).firstMatch("8"), 2484);
    v8_regexp_utils.assertToStringEquals("9", res[dartx.get](813).firstMatch("9"), 2485);
    v8_regexp_utils.assertToStringEquals("10", res[dartx.get](813).firstMatch("10"), 2486);
    v8_regexp_utils.assertToStringEquals("100", res[dartx.get](813).firstMatch("100"), 2487);
    v8_regexp_utils.assertNull(res[dartx.get](813).firstMatch("*** Failers"), 2488);
    v8_regexp_utils.assertNull(res[dartx.get](813).firstMatch("abc"), 2489);
    v8_regexp_utils.assertToStringEquals("enter", res[dartx.get](814).firstMatch("enter"), 2490);
    v8_regexp_utils.assertToStringEquals("inter", res[dartx.get](814).firstMatch("inter"), 2491);
    v8_regexp_utils.assertToStringEquals("uponter", res[dartx.get](814).firstMatch("uponter"), 2492);
    v8_regexp_utils.assertToStringEquals("xxx0", res[dartx.get](815).firstMatch("xxx0"), 2493);
    v8_regexp_utils.assertToStringEquals("xxx1234", res[dartx.get](815).firstMatch("xxx1234"), 2494);
    v8_regexp_utils.assertNull(res[dartx.get](815).firstMatch("*** Failers"), 2495);
    v8_regexp_utils.assertNull(res[dartx.get](815).firstMatch("xxx"), 2496);
    v8_regexp_utils.assertToStringEquals("x123", res[dartx.get](816).firstMatch("x123"), 2497);
    v8_regexp_utils.assertToStringEquals("xx123", res[dartx.get](816).firstMatch("xx123"), 2498);
    v8_regexp_utils.assertToStringEquals("123456", res[dartx.get](816).firstMatch("123456"), 2499);
    v8_regexp_utils.assertNull(res[dartx.get](816).firstMatch("*** Failers"), 2500);
    v8_regexp_utils.assertNull(res[dartx.get](816).firstMatch("123"), 2501);
    v8_regexp_utils.assertToStringEquals("x1234", res[dartx.get](816).firstMatch("x1234"), 2502);
    v8_regexp_utils.assertToStringEquals("x123", res[dartx.get](817).firstMatch("x123"), 2503);
    v8_regexp_utils.assertToStringEquals("xx123", res[dartx.get](817).firstMatch("xx123"), 2504);
    v8_regexp_utils.assertToStringEquals("123456", res[dartx.get](817).firstMatch("123456"), 2505);
    v8_regexp_utils.assertNull(res[dartx.get](817).firstMatch("*** Failers"), 2506);
    v8_regexp_utils.assertNull(res[dartx.get](817).firstMatch("123"), 2507);
    v8_regexp_utils.assertToStringEquals("x1234", res[dartx.get](817).firstMatch("x1234"), 2508);
    v8_regexp_utils.assertToStringEquals("abc!pqr=apquxz.ixr.zzz.ac.uk,abc,pqr", res[dartx.get](818).firstMatch("abc!pqr=apquxz.ixr.zzz.ac.uk"), 2509);
    v8_regexp_utils.assertNull(res[dartx.get](818).firstMatch("*** Failers"), 2510);
    v8_regexp_utils.assertNull(res[dartx.get](818).firstMatch("!pqr=apquxz.ixr.zzz.ac.uk"), 2511);
    v8_regexp_utils.assertNull(res[dartx.get](818).firstMatch("abc!=apquxz.ixr.zzz.ac.uk"), 2512);
    v8_regexp_utils.assertNull(res[dartx.get](818).firstMatch("abc!pqr=apquxz:ixr.zzz.ac.uk"), 2513);
    v8_regexp_utils.assertNull(res[dartx.get](818).firstMatch("abc!pqr=apquxz.ixr.zzz.ac.ukk"), 2514);
    v8_regexp_utils.assertToStringEquals(":", res[dartx.get](819).firstMatch("Well, we need a colon: somewhere"), 2515);
    v8_regexp_utils.assertNull(res[dartx.get](819).firstMatch("*** Fail if we don't"), 2516);
    v8_regexp_utils.assertToStringEquals("0abc,0abc", res[dartx.get](820).firstMatch("0abc"), 2517);
    v8_regexp_utils.assertToStringEquals("abc,abc", res[dartx.get](820).firstMatch("abc"), 2518);
    v8_regexp_utils.assertToStringEquals("fed,fed", res[dartx.get](820).firstMatch("fed"), 2519);
    v8_regexp_utils.assertToStringEquals("E,E", res[dartx.get](820).firstMatch("E"), 2520);
    v8_regexp_utils.assertToStringEquals("::,::", res[dartx.get](820).firstMatch("::"), 2521);
    v8_regexp_utils.assertToStringEquals("5f03:12C0::932e,5f03:12C0::932e", res[dartx.get](820).firstMatch("5f03:12C0::932e"), 2522);
    v8_regexp_utils.assertToStringEquals("def,def", res[dartx.get](820).firstMatch("fed def"), 2523);
    v8_regexp_utils.assertToStringEquals("ff,ff", res[dartx.get](820).firstMatch("Any old stuff"), 2524);
    v8_regexp_utils.assertNull(res[dartx.get](820).firstMatch("*** Failers"), 2525);
    v8_regexp_utils.assertNull(res[dartx.get](820).firstMatch("0zzz"), 2526);
    v8_regexp_utils.assertNull(res[dartx.get](820).firstMatch("gzzz"), 2527);
    v8_regexp_utils.assertNull(res[dartx.get](820).firstMatch("fed "), 2528);
    v8_regexp_utils.assertNull(res[dartx.get](820).firstMatch("Any old rubbish"), 2529);
    v8_regexp_utils.assertToStringEquals(".1.2.3,1,2,3", res[dartx.get](821).firstMatch(".1.2.3"), 2530);
    v8_regexp_utils.assertToStringEquals("A.12.123.0,12,123,0", res[dartx.get](821).firstMatch("A.12.123.0"), 2531);
    v8_regexp_utils.assertNull(res[dartx.get](821).firstMatch("*** Failers"), 2532);
    v8_regexp_utils.assertNull(res[dartx.get](821).firstMatch(".1.2.3333"), 2533);
    v8_regexp_utils.assertNull(res[dartx.get](821).firstMatch("1.2.3"), 2534);
    v8_regexp_utils.assertNull(res[dartx.get](821).firstMatch("1234.2.3"), 2535);
    v8_regexp_utils.assertToStringEquals("1 IN SOA non-sp1 non-sp2(,1,non-sp1,non-sp2", res[dartx.get](822).firstMatch("1 IN SOA non-sp1 non-sp2("), 2536);
    v8_regexp_utils.assertToStringEquals("1    IN    SOA    non-sp1    non-sp2   (,1,non-sp1,non-sp2", res[dartx.get](822).firstMatch("1    IN    SOA    non-sp1    non-sp2   ("), 2537);
    v8_regexp_utils.assertNull(res[dartx.get](822).firstMatch("*** Failers"), 2538);
    v8_regexp_utils.assertNull(res[dartx.get](822).firstMatch("1IN SOA non-sp1 non-sp2("), 2539);
    v8_regexp_utils.assertToStringEquals("a.,", res[dartx.get](823).firstMatch("a."), 2540);
    v8_regexp_utils.assertToStringEquals("Z.,", res[dartx.get](823).firstMatch("Z."), 2541);
    v8_regexp_utils.assertToStringEquals("2.,", res[dartx.get](823).firstMatch("2."), 2542);
    v8_regexp_utils.assertToStringEquals("ab-c.pq-r.,.pq-r", res[dartx.get](823).firstMatch("ab-c.pq-r."), 2543);
    v8_regexp_utils.assertToStringEquals("sxk.zzz.ac.uk.,.uk", res[dartx.get](823).firstMatch("sxk.zzz.ac.uk."), 2544);
    v8_regexp_utils.assertToStringEquals("x-.y-.,.y-", res[dartx.get](823).firstMatch("x-.y-."), 2545);
    v8_regexp_utils.assertNull(res[dartx.get](823).firstMatch("*** Failers"), 2546);
    v8_regexp_utils.assertNull(res[dartx.get](823).firstMatch("-abc.peq."), 2547);
    v8_regexp_utils.assertToStringEquals("*.a,,,", res[dartx.get](824).firstMatch("*.a"), 2548);
    v8_regexp_utils.assertToStringEquals("*.b0-a,0-a,,", res[dartx.get](824).firstMatch("*.b0-a"), 2549);
    v8_regexp_utils.assertToStringEquals("*.c3-b.c,3-b,.c,", res[dartx.get](824).firstMatch("*.c3-b.c"), 2550);
    v8_regexp_utils.assertToStringEquals("*.c-a.b-c,-a,.b-c,-c", res[dartx.get](824).firstMatch("*.c-a.b-c"), 2551);
    v8_regexp_utils.assertNull(res[dartx.get](824).firstMatch("*** Failers"), 2552);
    v8_regexp_utils.assertNull(res[dartx.get](824).firstMatch("*.0"), 2553);
    v8_regexp_utils.assertNull(res[dartx.get](824).firstMatch("*.a-"), 2554);
    v8_regexp_utils.assertNull(res[dartx.get](824).firstMatch("*.a-b.c-"), 2555);
    v8_regexp_utils.assertNull(res[dartx.get](824).firstMatch("*.c-a.0-c"), 2556);
    v8_regexp_utils.assertToStringEquals("abde,de,abd,e", res[dartx.get](825).firstMatch("abde"), 2557);
    v8_regexp_utils.assertToStringEquals("abdf,,abd,f", res[dartx.get](826).firstMatch("abdf"), 2558);
    v8_regexp_utils.assertToStringEquals("ab,abcd,cd,ab", res[dartx.get](827).firstMatch("abcd"), 2559);
    v8_regexp_utils.assertToStringEquals("a.b.c.d,.d", res[dartx.get](828).firstMatch("a.b.c.d"), 2560);
    v8_regexp_utils.assertToStringEquals("A.B.C.D,.D", res[dartx.get](828).firstMatch("A.B.C.D"), 2561);
    v8_regexp_utils.assertToStringEquals("a.b.c.1.2.3.C,.C", res[dartx.get](828).firstMatch("a.b.c.1.2.3.C"), 2562);
    v8_regexp_utils.assertToStringEquals("\"1234\",", res[dartx.get](829).firstMatch("\"1234\""), 2563);
    v8_regexp_utils.assertToStringEquals("\"abcd\" ;,;", res[dartx.get](829).firstMatch("\"abcd\" ;"), 2564);
    v8_regexp_utils.assertToStringEquals("\"\" ; rhubarb,; rhubarb", res[dartx.get](829).firstMatch("\"\" ; rhubarb"), 2565);
    v8_regexp_utils.assertNull(res[dartx.get](829).firstMatch("*** Failers"), 2566);
    v8_regexp_utils.assertNull(res[dartx.get](829).firstMatch("\"1234\" : things"), 2567);
    v8_regexp_utils.assertNull(res[dartx.get](830).firstMatch("\\"), 2568);
    v8_regexp_utils.assertNull(res[dartx.get](830).firstMatch("*** Failers"), 2569);
    v8_regexp_utils.assertToStringEquals("ab c", res[dartx.get](831).firstMatch("ab c"), 2570);
    v8_regexp_utils.assertNull(res[dartx.get](831).firstMatch("*** Failers"), 2571);
    v8_regexp_utils.assertNull(res[dartx.get](831).firstMatch("abc"), 2572);
    v8_regexp_utils.assertNull(res[dartx.get](831).firstMatch("ab cde"), 2573);
    v8_regexp_utils.assertToStringEquals("ab c", res[dartx.get](831).firstMatch("ab c"), 2574);
    v8_regexp_utils.assertNull(res[dartx.get](831).firstMatch("*** Failers"), 2575);
    v8_regexp_utils.assertNull(res[dartx.get](831).firstMatch("abc"), 2576);
    v8_regexp_utils.assertNull(res[dartx.get](831).firstMatch("ab cde"), 2577);
    v8_regexp_utils.assertToStringEquals("a bcd", res[dartx.get](832).firstMatch("a bcd"), 2578);
    v8_regexp_utils.assertNull(res[dartx.get](832).firstMatch("a b d"), 2579);
    v8_regexp_utils.assertNull(res[dartx.get](832).firstMatch("*** Failers"), 2580);
    v8_regexp_utils.assertNull(res[dartx.get](832).firstMatch("abcd"), 2581);
    v8_regexp_utils.assertNull(res[dartx.get](832).firstMatch("ab d"), 2582);
    v8_regexp_utils.assertToStringEquals("abcdefhijklm,abc,bc,c,def,ef,f,hij,ij,j,klm,lm,m", res[dartx.get](833).firstMatch("abcdefhijklm"), 2583);
    v8_regexp_utils.assertToStringEquals("abcdefhijklm,bc,c,ef,f,ij,j,lm,m", res[dartx.get](834).firstMatch("abcdefhijklm"), 2584);
    v8_regexp_utils.assertNull(res[dartx.get](835).firstMatch("a+ Z0+\b\n"), 2585);
    v8_regexp_utils.assertNull(res[dartx.get](835).firstMatch(".^$(*+)|{?,?}"), 2586);
    v8_regexp_utils.assertToStringEquals("z", res[dartx.get](836).firstMatch("z"), 2587);
    v8_regexp_utils.assertToStringEquals("az", res[dartx.get](836).firstMatch("az"), 2588);
    v8_regexp_utils.assertToStringEquals("aaaz", res[dartx.get](836).firstMatch("aaaz"), 2589);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](836).firstMatch("a"), 2590);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](836).firstMatch("aa"), 2591);
    v8_regexp_utils.assertToStringEquals("aaaa", res[dartx.get](836).firstMatch("aaaa"), 2592);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](836).firstMatch("a+"), 2593);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](836).firstMatch("aa+"), 2594);
    v8_regexp_utils.assertToStringEquals("z", res[dartx.get](837).firstMatch("z"), 2595);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("az"), 2596);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("aaaz"), 2597);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("a"), 2598);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("aa"), 2599);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("aaaa"), 2600);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("a+"), 2601);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](837).firstMatch("aa+"), 2602);
    v8_regexp_utils.assertToStringEquals("az", res[dartx.get](838).firstMatch("az"), 2603);
    v8_regexp_utils.assertToStringEquals("aaaz", res[dartx.get](838).firstMatch("aaaz"), 2604);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](838).firstMatch("aa"), 2605);
    v8_regexp_utils.assertToStringEquals("aaaa", res[dartx.get](838).firstMatch("aaaa"), 2606);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](838).firstMatch("aa+"), 2607);
    v8_regexp_utils.assertToStringEquals("az", res[dartx.get](839).firstMatch("az"), 2608);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](839).firstMatch("aaaz"), 2609);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](839).firstMatch("aa"), 2610);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](839).firstMatch("aaaa"), 2611);
    v8_regexp_utils.assertToStringEquals("aa", res[dartx.get](839).firstMatch("aa+"), 2612);
    v8_regexp_utils.assertToStringEquals("1234567890", res[dartx.get](840).firstMatch("1234567890"), 2613);
    v8_regexp_utils.assertToStringEquals("12345678ab", res[dartx.get](840).firstMatch("12345678ab"), 2614);
    v8_regexp_utils.assertToStringEquals("12345678__", res[dartx.get](840).firstMatch("12345678__"), 2615);
    v8_regexp_utils.assertNull(res[dartx.get](840).firstMatch("*** Failers"), 2616);
    v8_regexp_utils.assertNull(res[dartx.get](840).firstMatch("1234567"), 2617);
    v8_regexp_utils.assertToStringEquals("uoie", res[dartx.get](841).firstMatch("uoie"), 2618);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](841).firstMatch("1234"), 2619);
    v8_regexp_utils.assertToStringEquals("12345", res[dartx.get](841).firstMatch("12345"), 2620);
    v8_regexp_utils.assertToStringEquals("aaaaa", res[dartx.get](841).firstMatch("aaaaa"), 2621);
    v8_regexp_utils.assertNull(res[dartx.get](841).firstMatch("*** Failers"), 2622);
    v8_regexp_utils.assertNull(res[dartx.get](841).firstMatch("123456"), 2623);
    v8_regexp_utils.assertToStringEquals("uoie", res[dartx.get](842).firstMatch("uoie"), 2624);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](842).firstMatch("1234"), 2625);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](842).firstMatch("12345"), 2626);
    v8_regexp_utils.assertToStringEquals("aaaa", res[dartx.get](842).firstMatch("aaaaa"), 2627);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](842).firstMatch("123456"), 2628);
    v8_regexp_utils.assertToStringEquals("From abcd  Mon Sep 01 12:33,abcd", res[dartx.get](843).firstMatch("From abcd  Mon Sep 01 12:33:02 1997"), 2629);
    v8_regexp_utils.assertToStringEquals("From abcd  Mon Sep 01 12:33,Sep ", res[dartx.get](844).firstMatch("From abcd  Mon Sep 01 12:33:02 1997"), 2630);
    v8_regexp_utils.assertToStringEquals("From abcd  Mon Sep  1 12:33,Sep  ", res[dartx.get](844).firstMatch("From abcd  Mon Sep  1 12:33:02 1997"), 2631);
    v8_regexp_utils.assertNull(res[dartx.get](844).firstMatch("*** Failers"), 2632);
    v8_regexp_utils.assertNull(res[dartx.get](844).firstMatch("From abcd  Sep 01 12:33:02 1997"), 2633);
    v8_regexp_utils.assertNull(res[dartx.get](845).firstMatch("12\n34"), 2634);
    v8_regexp_utils.assertNull(res[dartx.get](845).firstMatch("12\r34"), 2635);
    v8_regexp_utils.assertToStringEquals("brown", res[dartx.get](846).firstMatch("the quick brown\t fox"), 2636);
    v8_regexp_utils.assertToStringEquals("foolish see?,lish see?", res[dartx.get](847).firstMatch("foobar is foolish see?"), 2637);
    v8_regexp_utils.assertToStringEquals("rowbar etc, etc", res[dartx.get](848).firstMatch("foobar crowbar etc"), 2638);
    v8_regexp_utils.assertToStringEquals("barrel,rel", res[dartx.get](848).firstMatch("barrel"), 2639);
    v8_regexp_utils.assertToStringEquals("2barrel,rel", res[dartx.get](848).firstMatch("2barrel"), 2640);
    v8_regexp_utils.assertToStringEquals("A barrel,rel", res[dartx.get](848).firstMatch("A barrel"), 2641);
    v8_regexp_utils.assertToStringEquals("abc,abc", res[dartx.get](849).firstMatch("abc456"), 2642);
    v8_regexp_utils.assertNull(res[dartx.get](849).firstMatch("*** Failers"), 2643);
    v8_regexp_utils.assertNull(res[dartx.get](849).firstMatch("abc123"), 2644);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](850).firstMatch("1234"), 2645);
    v8_regexp_utils.assertToStringEquals("1234", res[dartx.get](851).firstMatch("1234"), 2646);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](852).firstMatch("abcd"), 2647);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](853).firstMatch("abcd"), 2648);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](854).firstMatch("the abc"), 2649);
    v8_regexp_utils.assertNull(res[dartx.get](854).firstMatch("*** Failers"), 2650);
    v8_regexp_utils.assertNull(res[dartx.get](854).firstMatch("abc"), 2651);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](855).firstMatch("abc"), 2652);
    v8_regexp_utils.assertNull(res[dartx.get](855).firstMatch("*** Failers"), 2653);
    v8_regexp_utils.assertNull(res[dartx.get](855).firstMatch("the abc"), 2654);
    v8_regexp_utils.assertToStringEquals("aabb,b", res[dartx.get](856).firstMatch("aabbbbb"), 2655);
    v8_regexp_utils.assertToStringEquals("aabbbbb,abbbbb", res[dartx.get](857).firstMatch("aabbbbb"), 2656);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](858).firstMatch("aabbbbb"), 2657);
    v8_regexp_utils.assertToStringEquals("aabb,b", res[dartx.get](859).firstMatch("aabbbbb"), 2658);
    v8_regexp_utils.assertToStringEquals("Alan Other <user@dom.ain>", res[dartx.get](860).firstMatch("Alan Other <user@dom.ain>"), 2659);
    v8_regexp_utils.assertToStringEquals("user@dom.ain", res[dartx.get](860).firstMatch("<user@dom.ain>"), 2660);
    v8_regexp_utils.assertToStringEquals("user@dom.ain", res[dartx.get](860).firstMatch("user@dom.ain"), 2661);
    v8_regexp_utils.assertToStringEquals("\"A. Other\" <user.1234@dom.ain> (a comment)", res[dartx.get](860).firstMatch("\"A. Other\" <user.1234@dom.ain> (a comment)"), 2662);
    v8_regexp_utils.assertToStringEquals(" Other <user.1234@dom.ain> (a comment)", res[dartx.get](860).firstMatch("A. Other <user.1234@dom.ain> (a comment)"), 2663);
    v8_regexp_utils.assertToStringEquals("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"@x400-re.lay", res[dartx.get](860).firstMatch("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"@x400-re.lay"), 2664);
    v8_regexp_utils.assertToStringEquals("user@some.where", res[dartx.get](860).firstMatch("A missing angle <user@some.where"), 2665);
    v8_regexp_utils.assertNull(res[dartx.get](860).firstMatch("*** Failers"), 2666);
    v8_regexp_utils.assertNull(res[dartx.get](860).firstMatch("The quick brown fox"), 2667);
    v8_regexp_utils.assertToStringEquals("Alan Other <user@dom.ain>", res[dartx.get](861).firstMatch("Alan Other <user@dom.ain>"), 2668);
    v8_regexp_utils.assertToStringEquals("user@dom.ain", res[dartx.get](861).firstMatch("<user@dom.ain>"), 2669);
    v8_regexp_utils.assertToStringEquals("user@dom.ain", res[dartx.get](861).firstMatch("user@dom.ain"), 2670);
    v8_regexp_utils.assertToStringEquals("\"A. Other\" <user.1234@dom.ain>", res[dartx.get](861).firstMatch("\"A. Other\" <user.1234@dom.ain> (a comment)"), 2671);
    v8_regexp_utils.assertToStringEquals(" Other <user.1234@dom.ain>", res[dartx.get](861).firstMatch("A. Other <user.1234@dom.ain> (a comment)"), 2672);
    v8_regexp_utils.assertToStringEquals("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"@x400-re.lay", res[dartx.get](861).firstMatch("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"@x400-re.lay"), 2673);
    v8_regexp_utils.assertToStringEquals("user@some.where", res[dartx.get](861).firstMatch("A missing angle <user@some.where"), 2674);
    v8_regexp_utils.assertNull(res[dartx.get](861).firstMatch("*** Failers"), 2675);
    v8_regexp_utils.assertNull(res[dartx.get](861).firstMatch("The quick brown fox"), 2676);
    v8_regexp_utils.assertNull(res[dartx.get](861).firstMatch("abc def pqr xyz 0AB"), 2677);
    v8_regexp_utils.assertNull(res[dartx.get](861).firstMatch("abc456 abc def pqr xyz 0ABCDE"), 2678);
    v8_regexp_utils.assertToStringEquals("abc\ref pqr 0xyz 00AB", res[dartx.get](862).firstMatch("abc\ref pqr 0xyz 00AB"), 2679);
    v8_regexp_utils.assertToStringEquals("abc\ref pqr 0xyz 00AB", res[dartx.get](862).firstMatch("abc456 abc\ref pqr 0xyz 00ABCDE"), 2680);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](863).firstMatch(" A"), 2681);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](863).firstMatch("B"), 2682);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](863).firstMatch("C"), 2683);
    v8_regexp_utils.assertToStringEquals("    ", res[dartx.get](864).firstMatch("    "), 2684);
    v8_regexp_utils.assertNull(res[dartx.get](865).firstMatch("The Ax0x0Z"), 2685);
    v8_regexp_utils.assertNull(res[dartx.get](865).firstMatch("An A x0 Z"), 2686);
    v8_regexp_utils.assertNull(res[dartx.get](865).firstMatch("*** Failers"), 2687);
    v8_regexp_utils.assertNull(res[dartx.get](865).firstMatch("A Z"), 2688);
    v8_regexp_utils.assertNull(res[dartx.get](865).firstMatch("A x0 x0Z"), 2689);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](866).firstMatch(" abc"), 2690);
    v8_regexp_utils.assertToStringEquals("\f", res[dartx.get](866).firstMatch("\fabc"), 2691);
    v8_regexp_utils.assertToStringEquals("\n", res[dartx.get](866).firstMatch("\nabc"), 2692);
    v8_regexp_utils.assertToStringEquals("\r", res[dartx.get](866).firstMatch("\rabc"), 2693);
    v8_regexp_utils.assertToStringEquals("\t", res[dartx.get](866).firstMatch("\tabc"), 2694);
    v8_regexp_utils.assertNull(res[dartx.get](866).firstMatch("*** Failers"), 2695);
    v8_regexp_utils.assertNull(res[dartx.get](866).firstMatch("abc"), 2696);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](867).firstMatch("abc"), 2697);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](868).firstMatch("abbbbc"), 2698);
    v8_regexp_utils.assertToStringEquals("abbbc", res[dartx.get](868).firstMatch("abbbc"), 2699);
    v8_regexp_utils.assertToStringEquals("abbc", res[dartx.get](868).firstMatch("abbc"), 2700);
    v8_regexp_utils.assertNull(res[dartx.get](868).firstMatch("*** Failers"), 2701);
    v8_regexp_utils.assertNull(res[dartx.get](868).firstMatch("abc"), 2702);
    v8_regexp_utils.assertNull(res[dartx.get](868).firstMatch("abbbbbc"), 2703);
    v8_regexp_utils.assertToStringEquals("track1.title:TBlah blah blah,track1,title,Blah blah blah", res[dartx.get](869).firstMatch("track1.title:TBlah blah blah"), 2704);
    v8_regexp_utils.assertToStringEquals("track1.title:TBlah blah blah,track1,title,Blah blah blah", res[dartx.get](870).firstMatch("track1.title:TBlah blah blah"), 2705);
    v8_regexp_utils.assertToStringEquals("track1.title:TBlah blah blah,track1,title,Blah blah blah", res[dartx.get](871).firstMatch("track1.title:TBlah blah blah"), 2706);
    v8_regexp_utils.assertToStringEquals("WXY_^abc", res[dartx.get](872).firstMatch("WXY_^abc"), 2707);
    v8_regexp_utils.assertNull(res[dartx.get](872).firstMatch("*** Failers"), 2708);
    v8_regexp_utils.assertNull(res[dartx.get](872).firstMatch("wxy"), 2709);
    v8_regexp_utils.assertToStringEquals("WXY_^abc", res[dartx.get](873).firstMatch("WXY_^abc"), 2710);
    v8_regexp_utils.assertToStringEquals("wxy_^ABC", res[dartx.get](873).firstMatch("wxy_^ABC"), 2711);
    v8_regexp_utils.assertToStringEquals("WXY_^abc", res[dartx.get](874).firstMatch("WXY_^abc"), 2712);
    v8_regexp_utils.assertToStringEquals("wxy_^ABC", res[dartx.get](874).firstMatch("wxy_^ABC"), 2713);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](875).firstMatch("abc"), 2714);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](875).firstMatch("qqq\nabc"), 2715);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](875).firstMatch("abc\nzzz"), 2716);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](875).firstMatch("qqq\nabc\nzzz"), 2717);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](876).firstMatch("abc"), 2718);
    v8_regexp_utils.assertNull(res[dartx.get](876).firstMatch("*** Failers"), 2719);
    v8_regexp_utils.assertNull(res[dartx.get](876).firstMatch("qqq\nabc"), 2720);
    v8_regexp_utils.assertNull(res[dartx.get](876).firstMatch("abc\nzzz"), 2721);
    v8_regexp_utils.assertNull(res[dartx.get](876).firstMatch("qqq\nabc\nzzz"), 2722);
    v8_regexp_utils.assertNull(res[dartx.get](877).firstMatch("abc"), 2723);
    v8_regexp_utils.assertNull(res[dartx.get](877).firstMatch("abc\n "), 2724);
    v8_regexp_utils.assertNull(res[dartx.get](877).firstMatch("*** Failers"), 2725);
    v8_regexp_utils.assertNull(res[dartx.get](877).firstMatch("qqq\nabc"), 2726);
    v8_regexp_utils.assertNull(res[dartx.get](877).firstMatch("abc\nzzz"), 2727);
    v8_regexp_utils.assertNull(res[dartx.get](877).firstMatch("qqq\nabc\nzzz"), 2728);
    v8_regexp_utils.assertNull(res[dartx.get](878).firstMatch("abc\ndef"), 2729);
    v8_regexp_utils.assertNull(res[dartx.get](879).firstMatch("*** Failers"), 2730);
    v8_regexp_utils.assertNull(res[dartx.get](879).firstMatch("abc\ndef"), 2731);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](880).firstMatch("b::c"), 2732);
    v8_regexp_utils.assertToStringEquals("::", res[dartx.get](880).firstMatch("c::b"), 2733);
    v8_regexp_utils.assertToStringEquals("az-", res[dartx.get](881).firstMatch("az-"), 2734);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](881).firstMatch("*** Failers"), 2735);
    v8_regexp_utils.assertNull(res[dartx.get](881).firstMatch("b"), 2736);
    v8_regexp_utils.assertToStringEquals("za-", res[dartx.get](882).firstMatch("za-"), 2737);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](882).firstMatch("*** Failers"), 2738);
    v8_regexp_utils.assertNull(res[dartx.get](882).firstMatch("b"), 2739);
    v8_regexp_utils.assertToStringEquals("a-z", res[dartx.get](883).firstMatch("a-z"), 2740);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](883).firstMatch("*** Failers"), 2741);
    v8_regexp_utils.assertNull(res[dartx.get](883).firstMatch("b"), 2742);
    v8_regexp_utils.assertToStringEquals("abcdxyz", res[dartx.get](884).firstMatch("abcdxyz"), 2743);
    v8_regexp_utils.assertToStringEquals("12-34", res[dartx.get](885).firstMatch("12-34"), 2744);
    v8_regexp_utils.assertNull(res[dartx.get](885).firstMatch("*** Failers"), 2745);
    v8_regexp_utils.assertNull(res[dartx.get](885).firstMatch("aaa"), 2746);
    v8_regexp_utils.assertToStringEquals("12-34z", res[dartx.get](886).firstMatch("12-34z"), 2747);
    v8_regexp_utils.assertNull(res[dartx.get](886).firstMatch("*** Failers"), 2748);
    v8_regexp_utils.assertNull(res[dartx.get](886).firstMatch("aaa"), 2749);
    v8_regexp_utils.assertToStringEquals("\\", res[dartx.get](887).firstMatch("\\\\"), 2750);
    v8_regexp_utils.assertToStringEquals(" Z", res[dartx.get](888).firstMatch("the Zoo"), 2751);
    v8_regexp_utils.assertNull(res[dartx.get](888).firstMatch("*** Failers"), 2752);
    v8_regexp_utils.assertNull(res[dartx.get](888).firstMatch("Zulu"), 2753);
    v8_regexp_utils.assertToStringEquals("ab{3cd", res[dartx.get](889).firstMatch("ab{3cd"), 2754);
    v8_regexp_utils.assertToStringEquals("ab{3,cd", res[dartx.get](890).firstMatch("ab{3,cd"), 2755);
    v8_regexp_utils.assertToStringEquals("ab{3,4a}cd", res[dartx.get](891).firstMatch("ab{3,4a}cd"), 2756);
    v8_regexp_utils.assertToStringEquals("{4,5a}bc", res[dartx.get](892).firstMatch("{4,5a}bc"), 2757);
    v8_regexp_utils.assertNull(res[dartx.get](893).firstMatch("a\rb"), 2758);
    v8_regexp_utils.assertNull(res[dartx.get](893).firstMatch("*** Failers"), 2759);
    v8_regexp_utils.assertNull(res[dartx.get](893).firstMatch("a\nb"), 2760);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](894).firstMatch("abc"), 2761);
    v8_regexp_utils.assertNull(res[dartx.get](894).firstMatch("abc\n"), 2762);
    v8_regexp_utils.assertNull(res[dartx.get](894).firstMatch("*** Failers"), 2763);
    v8_regexp_utils.assertNull(res[dartx.get](894).firstMatch("abc\ndef"), 2764);
    v8_regexp_utils.assertToStringEquals("abcS,abc", res[dartx.get](895).firstMatch("abcS"), 2765);
    v8_regexp_utils.assertToStringEquals("abc,abc", res[dartx.get](896).firstMatch("abc"), 2766);
    v8_regexp_utils.assertToStringEquals("abcÓ,abc", res[dartx.get](897).firstMatch("abcÓ"), 2767);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@"), 2768);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@"), 2769);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@0"), 2770);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@0"), 2771);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@0"), 2772);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@0"), 2773);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@0"), 2774);
    v8_regexp_utils.assertToStringEquals("abc@,abc", res[dartx.get](898).firstMatch("abc@0"), 2775);
    v8_regexp_utils.assertNull(res[dartx.get](899).firstMatch("abc 81"), 2776);
    v8_regexp_utils.assertNull(res[dartx.get](899).firstMatch("abc 81"), 2777);
    v8_regexp_utils.assertNull(res[dartx.get](900).firstMatch("abc 91"), 2778);
    v8_regexp_utils.assertNull(res[dartx.get](900).firstMatch("abc 91"), 2779);
    v8_regexp_utils.assertToStringEquals("abcdefghijk\nS,a,b,c,d,e,f,g,h,i,j,k", res[dartx.get](901).firstMatch("abcdefghijk\nS"), 2780);
    v8_regexp_utils.assertToStringEquals("abidef", res[dartx.get](902).firstMatch("abidef"), 2781);
    v8_regexp_utils.assertToStringEquals("bc", res[dartx.get](903).firstMatch("bc"), 2782);
    v8_regexp_utils.assertToStringEquals("xyz,,", res[dartx.get](904).firstMatch("xyz"), 2783);
    v8_regexp_utils.assertToStringEquals("abc\bde", res[dartx.get](905).firstMatch("abc\bde"), 2784);
    v8_regexp_utils.assertToStringEquals("abcde", res[dartx.get](906).firstMatch("abcde"), 2785);
    v8_regexp_utils.assertToStringEquals("abcde,abc", res[dartx.get](907).firstMatch("abcde"), 2786);
    v8_regexp_utils.assertNull(res[dartx.get](907).firstMatch("a\nb"), 2787);
    v8_regexp_utils.assertToStringEquals("baNOTcccc,b,a,NOT,cccc", res[dartx.get](908).firstMatch("baNOTccccd"), 2788);
    v8_regexp_utils.assertToStringEquals("baNOTccc,b,a,NOT,ccc", res[dartx.get](908).firstMatch("baNOTcccd"), 2789);
    v8_regexp_utils.assertToStringEquals("baNOTcc,b,a,NO,Tcc", res[dartx.get](908).firstMatch("baNOTccd"), 2790);
    v8_regexp_utils.assertToStringEquals("baccc,b,a,,ccc", res[dartx.get](908).firstMatch("bacccd"), 2791);
    v8_regexp_utils.assertToStringEquals("*** Failers,*,*,* Fail,ers", res[dartx.get](908).firstMatch("*** Failers"), 2792);
    v8_regexp_utils.assertNull(res[dartx.get](908).firstMatch("anything"), 2793);
    v8_regexp_utils.assertNull(res[dartx.get](908).firstMatch("b\bc   "), 2794);
    v8_regexp_utils.assertNull(res[dartx.get](908).firstMatch("baccd"), 2795);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](909).firstMatch("Abc"), 2796);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](910).firstMatch("Abc "), 2797);
    v8_regexp_utils.assertToStringEquals("AAA", res[dartx.get](911).firstMatch("AAAaAbc"), 2798);
    v8_regexp_utils.assertToStringEquals("bc ", res[dartx.get](912).firstMatch("AAAaAbc "), 2799);
    v8_regexp_utils.assertToStringEquals("bbb\nccc", res[dartx.get](913).firstMatch("bbb\nccc"), 2800);
    v8_regexp_utils.assertToStringEquals("c", res[dartx.get](914).firstMatch("abc"), 2801);
    v8_regexp_utils.assertToStringEquals("s", res[dartx.get](914).firstMatch("*** Failers"), 2802);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](914).firstMatch("abk   "), 2803);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](915).firstMatch("abc"), 2804);
    v8_regexp_utils.assertToStringEquals("bc", res[dartx.get](915).firstMatch("kbc"), 2805);
    v8_regexp_utils.assertToStringEquals("bc ", res[dartx.get](915).firstMatch("kabc "), 2806);
    v8_regexp_utils.assertToStringEquals("ers", res[dartx.get](915).firstMatch("*** Failers"), 2807);
    v8_regexp_utils.assertNull(res[dartx.get](915).firstMatch("abk"), 2808);
    v8_regexp_utils.assertNull(res[dartx.get](915).firstMatch("akb"), 2809);
    v8_regexp_utils.assertNull(res[dartx.get](915).firstMatch("akk "), 2810);
    v8_regexp_utils.assertToStringEquals("12345678@a.b.c.d", res[dartx.get](916).firstMatch("12345678@a.b.c.d"), 2811);
    v8_regexp_utils.assertToStringEquals("123456789@x.y.z", res[dartx.get](916).firstMatch("123456789@x.y.z"), 2812);
    v8_regexp_utils.assertNull(res[dartx.get](916).firstMatch("*** Failers"), 2813);
    v8_regexp_utils.assertNull(res[dartx.get](916).firstMatch("12345678@x.y.uk"), 2814);
    v8_regexp_utils.assertNull(res[dartx.get](916).firstMatch("1234567@a.b.c.d       "), 2815);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](917).firstMatch("aaaabcd"), 2816);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](917).firstMatch("aaAabcd "), 2817);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](918).firstMatch("aaaabcd"), 2818);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](918).firstMatch("aaAabcd "), 2819);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](919).firstMatch("aaaabcd"), 2820);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](919).firstMatch("aaAabcd "), 2821);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](920).firstMatch("aaaabcd"), 2822);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](920).firstMatch("aaAabcd "), 2823);
    v8_regexp_utils.assertToStringEquals("PSTAIREISLL", res[dartx.get](922).firstMatch("xxxxxxxxxxxPSTAIREISLLxxxxxxxxx"), 2824);
    v8_regexp_utils.assertToStringEquals("PSTAIREISLL", res[dartx.get](923).firstMatch("xxxxxxxxxxxPSTAIREISLLxxxxxxxxx"), 2825);
    v8_regexp_utils.assertToStringEquals(".230003938,.23", res[dartx.get](924).firstMatch("1.230003938"), 2826);
    v8_regexp_utils.assertToStringEquals(".875000282,.875", res[dartx.get](924).firstMatch("1.875000282   "), 2827);
    v8_regexp_utils.assertToStringEquals(".235,.23", res[dartx.get](924).firstMatch("1.235  "), 2828);
    v8_regexp_utils.assertNull(res[dartx.get](924).firstMatch("              "), 2829);
    v8_regexp_utils.assertToStringEquals(".23,.23,", res[dartx.get](925).firstMatch("1.230003938      "), 2830);
    v8_regexp_utils.assertToStringEquals(".875,.875,5", res[dartx.get](925).firstMatch("1.875000282"), 2831);
    v8_regexp_utils.assertNull(res[dartx.get](925).firstMatch("*** Failers "), 2832);
    v8_regexp_utils.assertNull(res[dartx.get](925).firstMatch("1.235 "), 2833);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("a(?)b"), VoidToRegExp()), 2834);
    v8_regexp_utils.assertNull(res[dartx.get](925).firstMatch("ab "), 2835);
    v8_regexp_utils.assertToStringEquals("foo table,foo,table", res[dartx.get](926).firstMatch("Food is on the foo table"), 2836);
    v8_regexp_utils.assertToStringEquals("food is under the bar in the bar,d is under the bar in the ", res[dartx.get](927).firstMatch("The food is under the bar in the barn."), 2837);
    v8_regexp_utils.assertToStringEquals("food is under the bar,d is under the ", res[dartx.get](928).firstMatch("The food is under the bar in the barn."), 2838);
    v8_regexp_utils.assertToStringEquals("I have 2 numbers: 53147,I have 2 numbers: 53147,", res[dartx.get](929).firstMatch("I have 2 numbers: 53147"), 2839);
    v8_regexp_utils.assertToStringEquals("I have 2 numbers: 53147,I have 2 numbers: 5314,7", res[dartx.get](930).firstMatch("I have 2 numbers: 53147"), 2840);
    v8_regexp_utils.assertToStringEquals(",,", res[dartx.get](931).firstMatch("I have 2 numbers: 53147"), 2841);
    v8_regexp_utils.assertToStringEquals("I have 2,I have ,2", res[dartx.get](932).firstMatch("I have 2 numbers: 53147"), 2842);
    v8_regexp_utils.assertToStringEquals("I have 2 numbers: 53147,I have 2 numbers: 5314,7", res[dartx.get](933).firstMatch("I have 2 numbers: 53147"), 2843);
    v8_regexp_utils.assertToStringEquals("I have 2 numbers: 53147,I have 2 numbers: ,53147", res[dartx.get](934).firstMatch("I have 2 numbers: 53147"), 2844);
    v8_regexp_utils.assertToStringEquals("I have 2 numbers: 53147,I have 2 numbers: ,53147", res[dartx.get](935).firstMatch("I have 2 numbers: 53147"), 2845);
    v8_regexp_utils.assertToStringEquals("I have 2 numbers: 53147,I have 2 numbers: ,53147", res[dartx.get](936).firstMatch("I have 2 numbers: 53147"), 2846);
    v8_regexp_utils.assertToStringEquals("AB", res[dartx.get](937).firstMatch("ABC123"), 2847);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](937).firstMatch(" "), 2848);
    v8_regexp_utils.assertToStringEquals("ABC,ABC", res[dartx.get](938).firstMatch("ABC445"), 2849);
    v8_regexp_utils.assertNull(res[dartx.get](938).firstMatch("*** Failers"), 2850);
    v8_regexp_utils.assertNull(res[dartx.get](938).firstMatch("ABC123"), 2851);
    v8_regexp_utils.assertToStringEquals("W46]", res[dartx.get](939).firstMatch("W46]789 "), 2852);
    v8_regexp_utils.assertToStringEquals("-46]", res[dartx.get](939).firstMatch("-46]789"), 2853);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("*** Failers"), 2854);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("Wall"), 2855);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("Zebra"), 2856);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("42"), 2857);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("[abcd] "), 2858);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("]abcd["), 2859);
    v8_regexp_utils.assertNull(res[dartx.get](939).firstMatch("   "), 2860);
    v8_regexp_utils.assertToStringEquals("W", res[dartx.get](940).firstMatch("W46]789 "), 2861);
    v8_regexp_utils.assertToStringEquals("W", res[dartx.get](940).firstMatch("Wall"), 2862);
    v8_regexp_utils.assertToStringEquals("Z", res[dartx.get](940).firstMatch("Zebra"), 2863);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](940).firstMatch("Xylophone  "), 2864);
    v8_regexp_utils.assertToStringEquals("4", res[dartx.get](940).firstMatch("42"), 2865);
    v8_regexp_utils.assertToStringEquals("[", res[dartx.get](940).firstMatch("[abcd] "), 2866);
    v8_regexp_utils.assertToStringEquals("]", res[dartx.get](940).firstMatch("]abcd["), 2867);
    v8_regexp_utils.assertToStringEquals("\\", res[dartx.get](940).firstMatch("\\backslash "), 2868);
    v8_regexp_utils.assertNull(res[dartx.get](940).firstMatch("*** Failers"), 2869);
    v8_regexp_utils.assertNull(res[dartx.get](940).firstMatch("-46]789"), 2870);
    v8_regexp_utils.assertNull(res[dartx.get](940).firstMatch("well"), 2871);
    v8_regexp_utils.assertToStringEquals("01/01/2000", res[dartx.get](941).firstMatch("01/01/2000"), 2872);
    v8_regexp_utils.assertToStringEquals("01/01/2000", res[dartx.get](941).firstMatch("01/01/2000"), 2872);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](944).firstMatch("bcd"), 2873);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](944).firstMatch("abc"), 2874);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](944).firstMatch("aab     "), 2875);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](945).firstMatch("bcd"), 2876);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](945).firstMatch("abc"), 2877);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](945).firstMatch("aab  "), 2878);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](946).firstMatch("bcd"), 2879);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](946).firstMatch("abc"), 2880);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](946).firstMatch("aab  "), 2881);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](947).firstMatch("bcd"), 2882);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](947).firstMatch("abc"), 2883);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](947).firstMatch("aab"), 2884);
    v8_regexp_utils.assertToStringEquals("aaa,a", res[dartx.get](947).firstMatch("aaa   "), 2885);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](948).firstMatch("bcd"), 2886);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](948).firstMatch("abc"), 2887);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](948).firstMatch("aab"), 2888);
    v8_regexp_utils.assertToStringEquals("aaa,a", res[dartx.get](948).firstMatch("aaa"), 2889);
    v8_regexp_utils.assertToStringEquals("aaaaaaaa,a", res[dartx.get](948).firstMatch("aaaaaaaa    "), 2890);
    v8_regexp_utils.assertNull(res[dartx.get](949).firstMatch("bcd"), 2891);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](949).firstMatch("abc"), 2892);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](949).firstMatch("aab  "), 2893);
    v8_regexp_utils.assertNull(res[dartx.get](950).firstMatch("bcd"), 2894);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](950).firstMatch("abc"), 2895);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](950).firstMatch("aab  "), 2896);
    v8_regexp_utils.assertNull(res[dartx.get](951).firstMatch("bcd"), 2897);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](951).firstMatch("abc"), 2898);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](951).firstMatch("aab"), 2899);
    v8_regexp_utils.assertToStringEquals("aaa,a", res[dartx.get](951).firstMatch("aaa   "), 2900);
    v8_regexp_utils.assertNull(res[dartx.get](952).firstMatch("bcd"), 2901);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](952).firstMatch("abc"), 2902);
    v8_regexp_utils.assertToStringEquals("aa,a", res[dartx.get](952).firstMatch("aab"), 2903);
    v8_regexp_utils.assertToStringEquals("aaa,a", res[dartx.get](952).firstMatch("aaa"), 2904);
    v8_regexp_utils.assertToStringEquals("aaaaaaaa,a", res[dartx.get](952).firstMatch("aaaaaaaa    "), 2905);
    v8_regexp_utils.assertToStringEquals("bib.gif", res[dartx.get](953).firstMatch("borfle\nbib.gif\nno"), 2906);
    v8_regexp_utils.assertToStringEquals("bib.gif", res[dartx.get](954).firstMatch("borfle\nbib.gif\nno"), 2907);
    v8_regexp_utils.assertToStringEquals("bib.gif", res[dartx.get](955).firstMatch("borfle\nbib.gif\nno"), 2908);
    v8_regexp_utils.assertToStringEquals("bib.gif", res[dartx.get](956).firstMatch("borfle\nbib.gif\nno"), 2909);
    v8_regexp_utils.assertToStringEquals("bib.gif", res[dartx.get](957).firstMatch("borfle\nbib.gif\nno"), 2910);
    v8_regexp_utils.assertToStringEquals("no", res[dartx.get](958).firstMatch("borfle\nbib.gif\nno"), 2911);
    v8_regexp_utils.assertToStringEquals("borfle", res[dartx.get](959).firstMatch("borfle\nbib.gif\nno"), 2912);
    v8_regexp_utils.assertToStringEquals("no", res[dartx.get](960).firstMatch("borfle\nbib.gif\nno"), 2913);
    v8_regexp_utils.assertToStringEquals("borfle", res[dartx.get](961).firstMatch("borfle\nbib.gif\nno"), 2914);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](962).firstMatch("borfle\nbib.gif\nno\n"), 2915);
    v8_regexp_utils.assertToStringEquals("borfle", res[dartx.get](963).firstMatch("borfle\nbib.gif\nno\n"), 2916);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](964).firstMatch("borfle\nbib.gif\nno\n"), 2917);
    v8_regexp_utils.assertToStringEquals("borfle", res[dartx.get](965).firstMatch("borfle\nbib.gif\nno\n"), 2918);
    v8_regexp_utils.assertToStringEquals("1234X,1234X", res[dartx.get](966).firstMatch("abcde\n1234Xyz"), 2919);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](966).firstMatch("BarFoo "), 2920);
    v8_regexp_utils.assertNull(res[dartx.get](966).firstMatch("*** Failers"), 2921);
    v8_regexp_utils.assertNull(res[dartx.get](966).firstMatch("abcde\nBar  "), 2922);
    v8_regexp_utils.assertToStringEquals("1234X,1234X", res[dartx.get](967).firstMatch("abcde\n1234Xyz"), 2923);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](967).firstMatch("BarFoo "), 2924);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](967).firstMatch("abcde\nBar  "), 2925);
    v8_regexp_utils.assertToStringEquals("1234X,1234X", res[dartx.get](968).firstMatch("abcde\n1234Xyz"), 2926);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](968).firstMatch("BarFoo "), 2927);
    v8_regexp_utils.assertNull(res[dartx.get](968).firstMatch("*** Failers"), 2928);
    v8_regexp_utils.assertNull(res[dartx.get](968).firstMatch("abcde\nBar  "), 2929);
    v8_regexp_utils.assertToStringEquals("1234X,1234X", res[dartx.get](969).firstMatch("abcde\n1234Xyz"), 2930);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](969).firstMatch("BarFoo "), 2931);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](969).firstMatch("abcde\nBar  "), 2932);
    v8_regexp_utils.assertToStringEquals("1234X,1234X", res[dartx.get](969).firstMatch("abcde\n1234Xyz"), 2933);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](969).firstMatch("BarFoo "), 2934);
    v8_regexp_utils.assertNull(res[dartx.get](969).firstMatch("*** Failers "), 2935);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](969).firstMatch("abcde\nBar  "), 2936);
    v8_regexp_utils.assertToStringEquals("1234X,1234X", res[dartx.get](969).firstMatch("abcde\n1234Xyz"), 2937);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](969).firstMatch("BarFoo "), 2938);
    v8_regexp_utils.assertNull(res[dartx.get](969).firstMatch("*** Failers "), 2939);
    v8_regexp_utils.assertToStringEquals("B,B", res[dartx.get](969).firstMatch("abcde\nBar  "), 2940);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch("**** Failers"), 2941);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch("abc\nB"), 2942);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch(" "), 2943);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch("abc\nB"), 2944);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch("abc\nB"), 2945);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch(" "), 2946);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch("abc\nB"), 2947);
    v8_regexp_utils.assertNull(res[dartx.get](970).firstMatch("abc\nB"), 2948);
    v8_regexp_utils.assertToStringEquals("B", res[dartx.get](970).firstMatch("B\n"), 2949);
    v8_regexp_utils.assertToStringEquals("123456654321", res[dartx.get](971).firstMatch("123456654321"), 2950);
    v8_regexp_utils.assertToStringEquals("123456654321", res[dartx.get](972).firstMatch("123456654321 "), 2951);
    v8_regexp_utils.assertToStringEquals("123456654321", res[dartx.get](973).firstMatch("123456654321"), 2952);
    v8_regexp_utils.assertToStringEquals("abcabcabcabc", res[dartx.get](974).firstMatch("abcabcabcabc"), 2953);
    v8_regexp_utils.assertToStringEquals("abcabcabcabc", res[dartx.get](975).firstMatch("abcabcabcabc"), 2954);
    v8_regexp_utils.assertToStringEquals("abcabcabcabc,c", res[dartx.get](976).firstMatch("abcabcabcabc "), 2955);
    v8_regexp_utils.assertToStringEquals("n", res[dartx.get](977).firstMatch("n"), 2956);
    v8_regexp_utils.assertNull(res[dartx.get](977).firstMatch("*** Failers "), 2957);
    v8_regexp_utils.assertNull(res[dartx.get](977).firstMatch("z "), 2958);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](978).firstMatch("abcd"), 2959);
    v8_regexp_utils.assertNull(res[dartx.get](978).firstMatch("*** Failers"), 2960);
    v8_regexp_utils.assertNull(res[dartx.get](978).firstMatch("abce  "), 2961);
    v8_regexp_utils.assertToStringEquals("abe", res[dartx.get](979).firstMatch("abe"), 2962);
    v8_regexp_utils.assertNull(res[dartx.get](979).firstMatch("*** Failers"), 2963);
    v8_regexp_utils.assertNull(res[dartx.get](979).firstMatch("abcde "), 2964);
    v8_regexp_utils.assertToStringEquals("abd,", res[dartx.get](980).firstMatch("abd"), 2965);
    v8_regexp_utils.assertNull(res[dartx.get](980).firstMatch("*** Failers"), 2966);
    v8_regexp_utils.assertNull(res[dartx.get](980).firstMatch("abcd   "), 2967);
    v8_regexp_utils.assertToStringEquals("a,", res[dartx.get](981).firstMatch("a"), 2968);
    v8_regexp_utils.assertToStringEquals("ab,b", res[dartx.get](981).firstMatch("ab"), 2969);
    v8_regexp_utils.assertToStringEquals("abbbb,bbbb", res[dartx.get](981).firstMatch("abbbb"), 2970);
    v8_regexp_utils.assertToStringEquals("a,", res[dartx.get](981).firstMatch("*** Failers"), 2971);
    v8_regexp_utils.assertNull(res[dartx.get](981).firstMatch("bbbbb    "), 2972);
    v8_regexp_utils.assertToStringEquals("abe", res[dartx.get](982).firstMatch("abe"), 2973);
    v8_regexp_utils.assertNull(res[dartx.get](982).firstMatch("*** Failers"), 2974);
    v8_regexp_utils.assertNull(res[dartx.get](982).firstMatch("ab1e   "), 2975);
    v8_regexp_utils.assertToStringEquals("\"quick\",quick", res[dartx.get](983).firstMatch("the \"quick\" brown fox"), 2976);
    v8_regexp_utils.assertToStringEquals("\"the \\\"quick\\\" brown fox\", brown fox", res[dartx.get](983).firstMatch("\"the \\\"quick\\\" brown fox\" "), 2977);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](984).firstMatch("abc"), 2978);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](985).firstMatch("abc "), 2979);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](986).firstMatch("abc "), 2980);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](986).firstMatch("abc"), 2982);
    v8_regexp_utils.assertToStringEquals("acb", res[dartx.get](988).firstMatch("acb"), 2983);
    v8_regexp_utils.assertToStringEquals("a\nb", res[dartx.get](988).firstMatch("a\nb"), 2984);
    v8_regexp_utils.assertToStringEquals("acb", res[dartx.get](989).firstMatch("acb"), 2985);
    v8_regexp_utils.assertNull(res[dartx.get](989).firstMatch("*** Failers "), 2986);
    v8_regexp_utils.assertNull(res[dartx.get](989).firstMatch("a\nb   "), 2987);
    v8_regexp_utils.assertToStringEquals("acb", res[dartx.get](990).firstMatch("acb"), 2988);
    v8_regexp_utils.assertToStringEquals("a\nb", res[dartx.get](990).firstMatch("a\nb  "), 2989);
    v8_regexp_utils.assertToStringEquals("acb", res[dartx.get](991).firstMatch("acb"), 2990);
    v8_regexp_utils.assertNull(res[dartx.get](991).firstMatch("a\nb  "), 2991);
    v8_regexp_utils.assertToStringEquals("bac,a", res[dartx.get](992).firstMatch("bac"), 2992);
    v8_regexp_utils.assertToStringEquals("bbac,a", res[dartx.get](992).firstMatch("bbac"), 2993);
    v8_regexp_utils.assertToStringEquals("bbbac,a", res[dartx.get](992).firstMatch("bbbac"), 2994);
    v8_regexp_utils.assertToStringEquals("bbbbac,a", res[dartx.get](992).firstMatch("bbbbac"), 2995);
    v8_regexp_utils.assertToStringEquals("bbbbbac,a", res[dartx.get](992).firstMatch("bbbbbac "), 2996);
    v8_regexp_utils.assertToStringEquals("bac,a", res[dartx.get](993).firstMatch("bac"), 2997);
    v8_regexp_utils.assertToStringEquals("bbac,a", res[dartx.get](993).firstMatch("bbac"), 2998);
    v8_regexp_utils.assertToStringEquals("bbbac,a", res[dartx.get](993).firstMatch("bbbac"), 2999);
    v8_regexp_utils.assertToStringEquals("bbbbac,a", res[dartx.get](993).firstMatch("bbbbac"), 3000);
    v8_regexp_utils.assertToStringEquals("bbbbbac,a", res[dartx.get](993).firstMatch("bbbbbac "), 3001);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](994).firstMatch("x\nb\n"), 3002);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](994).firstMatch("a\bx\n  "), 3003);
    v8_regexp_utils.assertNull(res[dartx.get](995).firstMatch(" {ab} "), 3004);
    v8_regexp_utils.assertToStringEquals("CD,", res[dartx.get](996).firstMatch("CD "), 3005);
    v8_regexp_utils.assertToStringEquals("CD,", res[dartx.get](997).firstMatch("CD "), 3006);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("foo"), 3007);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("catfood"), 3008);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("arfootle"), 3009);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("rfoosh"), 3010);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("*** Failers"), 3011);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("barfoo"), 3012);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("towbarfoo"), 3013);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("catfood"), 3014);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("*** Failers"), 3015);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("foo"), 3016);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("barfoo"), 3017);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("towbarfoo"), 3018);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("fooabar"), 3019);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("*** Failers"), 3020);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("bar"), 3021);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("foobbar"), 3022);
    v8_regexp_utils.assertNull(res[dartx.get](997).firstMatch("  "), 3023);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("abc"), 3024);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("*** Failers"), 3025);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("abc\n   "), 3026);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("qqq\nabc"), 3027);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("abc\nzzz"), 3028);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("qqq\nabc\nzzz"), 3029);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/it/you/see/"), 3030);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/and/foo"), 3031);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("1.230003938"), 3032);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("1.875000282"), 3033);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("*** Failers "), 3034);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("1.235 "), 3035);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("now is the time for all good men to come to the aid of the party"), 3036);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("*** Failers"), 3037);
    v8_regexp_utils.assertNull(res[dartx.get](998).firstMatch("this is not a line with only words and spaces!"), 3038);
    v8_regexp_utils.assertToStringEquals("12345a,12345,a", res[dartx.get](999).firstMatch("12345a"), 3039);
    v8_regexp_utils.assertToStringEquals("12345,1234,5", res[dartx.get](999).firstMatch("12345+ "), 3040);
    v8_regexp_utils.assertToStringEquals("12345a,12345,a", res[dartx.get](999).firstMatch("12345a"), 3041);
    v8_regexp_utils.assertNull(res[dartx.get](999).firstMatch("*** Failers"), 3042);
    v8_regexp_utils.assertToStringEquals("12345,1234,5", res[dartx.get](999).firstMatch("12345+ "), 3043);
    v8_regexp_utils.assertNull(res[dartx.get](999).firstMatch("aaab"), 3044);
    v8_regexp_utils.assertNull(res[dartx.get](999).firstMatch("aaab"), 3045);
    v8_regexp_utils.assertNull(res[dartx.get](999).firstMatch("aaab"), 3046);
    v8_regexp_utils.assertNull(res[dartx.get](999).firstMatch("aaabbbccc"), 3047);
    v8_regexp_utils.assertNull(res[dartx.get](999).firstMatch("aaabbbbccccd"), 3048);
    v8_regexp_utils.assertToStringEquals("aaabbbbcccc,ccc", res[dartx.get](1000).firstMatch("aaabbbbccccd"), 3049);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("((abc(ade)ufh()()x"), 3050);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3051);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("(abc)"), 3052);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("(abc(def)xyz)"), 3053);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3054);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("ab"), 3055);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("Ab"), 3056);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers "), 3057);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aB"), 3058);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("AB"), 3059);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("    "), 3060);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](1000).firstMatch("a bcd e"), 3061);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3062);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("a b cd e"), 3063);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abcd e   "), 3064);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](1000).firstMatch("a bcde "), 3065);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](1000).firstMatch("a bcde f"), 3066);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3067);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abcdef  "), 3068);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abc"), 3069);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBc"), 3070);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3071);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abC"), 3072);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aBC  "), 3073);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](1000).firstMatch("Abc"), 3074);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("ABc"), 3075);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("ABC"), 3076);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("AbC"), 3077);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3078);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abc"), 3079);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBc"), 3080);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers "), 3081);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("ABC"), 3082);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abC"), 3083);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aBC"), 3084);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3085);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBc"), 3086);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBBc"), 3087);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers "), 3088);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aBC"), 3089);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aBBC"), 3090);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3091);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abcd"), 3092);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abCd"), 3093);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3094);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aBCd"), 3095);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abcD     "), 3096);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3097);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more than million"), 3098);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more than MILLION"), 3099);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more \n than Million "), 3100);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3101);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("MORE THAN MILLION    "), 3102);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more \n than \n million "), 3103);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more than million"), 3104);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more than MILLION"), 3105);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more \n than Million "), 3106);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3107);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("MORE THAN MILLION    "), 3108);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("more \n than \n million "), 3109);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3110);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abc"), 3111);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](1000).firstMatch("aBbc"), 3112);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBBc "), 3113);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3114);
    v8_regexp_utils.assertToStringEquals("bc,b", res[dartx.get](1000).firstMatch("Abc"), 3115);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abAb    "), 3116);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abbC "), 3117);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3118);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abc"), 3119);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBc"), 3120);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3121);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("Ab "), 3122);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abC"), 3123);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aBC     "), 3124);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3125);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("abxxc"), 3126);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("aBxxc"), 3127);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3128);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("Abxxc"), 3129);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("ABxxc"), 3130);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("abxxC      "), 3131);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abc:"), 3132);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("12"), 3133);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3134);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("123"), 3135);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("xyz    "), 3136);
    v8_regexp_utils.assertToStringEquals("abc,b", res[dartx.get](1000).firstMatch("abc:"), 3137);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("12"), 3138);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3139);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("123"), 3140);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("xyz    "), 3141);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3142);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("foobar"), 3143);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("cat"), 3144);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("fcat"), 3145);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("focat   "), 3146);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3147);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("foocat  "), 3148);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("foobar"), 3149);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("cat"), 3150);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("fcat"), 3151);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("focat   "), 3152);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("*** Failers"), 3153);
    v8_regexp_utils.assertToStringEquals("c,", res[dartx.get](1000).firstMatch("foocat  "), 3154);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("a"), 3155);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aa"), 3156);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch("aaaa"), 3157);
    v8_regexp_utils.assertNull(res[dartx.get](1000).firstMatch(""), 3158);
    v8_regexp_utils.assertToStringEquals("abc,abc", res[dartx.get](1001).firstMatch("abc"), 3159);
    v8_regexp_utils.assertToStringEquals("abcabc,abc", res[dartx.get](1001).firstMatch("abcabc"), 3160);
    v8_regexp_utils.assertToStringEquals("abcabcabc,abc", res[dartx.get](1001).firstMatch("abcabcabc"), 3161);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1001).firstMatch("xyz      "), 3162);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](1002).firstMatch("a"), 3163);
    v8_regexp_utils.assertToStringEquals("aaaaa,aaaaa", res[dartx.get](1002).firstMatch("aaaaa "), 3164);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](1003).firstMatch("a"), 3165);
    v8_regexp_utils.assertToStringEquals("b,b", res[dartx.get](1003).firstMatch("b"), 3166);
    v8_regexp_utils.assertToStringEquals("ababab,ababab", res[dartx.get](1003).firstMatch("ababab"), 3167);
    v8_regexp_utils.assertToStringEquals("aaaab,aaaab", res[dartx.get](1003).firstMatch("aaaabcde"), 3168);
    v8_regexp_utils.assertToStringEquals("bbbb,bbbb", res[dartx.get](1003).firstMatch("bbbb    "), 3169);
    v8_regexp_utils.assertToStringEquals("b,b", res[dartx.get](1004).firstMatch("b"), 3170);
    v8_regexp_utils.assertToStringEquals("bbbb,bbbb", res[dartx.get](1004).firstMatch("bbbb"), 3171);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1004).firstMatch("aaa   "), 3172);
    v8_regexp_utils.assertToStringEquals("cccc,cccc", res[dartx.get](1005).firstMatch("cccc"), 3173);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1005).firstMatch("abab  "), 3174);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](1006).firstMatch("a"), 3175);
    v8_regexp_utils.assertToStringEquals("aaaa,a", res[dartx.get](1006).firstMatch("aaaa "), 3176);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](1007).firstMatch("a"), 3177);
    v8_regexp_utils.assertToStringEquals("b,b", res[dartx.get](1007).firstMatch("b"), 3178);
    v8_regexp_utils.assertToStringEquals("abab,b", res[dartx.get](1007).firstMatch("abab"), 3179);
    v8_regexp_utils.assertToStringEquals("baba,a", res[dartx.get](1007).firstMatch("baba   "), 3180);
    v8_regexp_utils.assertToStringEquals("b,b", res[dartx.get](1008).firstMatch("b"), 3181);
    v8_regexp_utils.assertToStringEquals("bbbb,b", res[dartx.get](1008).firstMatch("bbbb"), 3182);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1008).firstMatch("aaa   "), 3183);
    v8_regexp_utils.assertToStringEquals("c,c", res[dartx.get](1009).firstMatch("c"), 3184);
    v8_regexp_utils.assertToStringEquals("cccc,c", res[dartx.get](1009).firstMatch("cccc"), 3185);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("baba   "), 3186);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("a"), 3187);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aaabcde "), 3188);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aaaaa"), 3189);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aabbaa "), 3190);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aaaaa"), 3191);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aabbaa "), 3192);
    v8_regexp_utils.assertToStringEquals("12-sep-98,8", res[dartx.get](1009).firstMatch("12-sep-98"), 3193);
    v8_regexp_utils.assertToStringEquals("12-09-98,8", res[dartx.get](1009).firstMatch("12-09-98"), 3194);
    v8_regexp_utils.assertToStringEquals("*** F,F", res[dartx.get](1009).firstMatch("*** Failers"), 3195);
    v8_regexp_utils.assertToStringEquals("sep-12-98,8", res[dartx.get](1009).firstMatch("sep-12-98"), 3196);
    v8_regexp_utils.assertToStringEquals("    , ", res[dartx.get](1009).firstMatch("    "), 3197);
    v8_regexp_utils.assertToStringEquals("s,s", res[dartx.get](1009).firstMatch("saturday"), 3198);
    v8_regexp_utils.assertToStringEquals("sund,d", res[dartx.get](1009).firstMatch("sunday"), 3199);
    v8_regexp_utils.assertToStringEquals("S,S", res[dartx.get](1009).firstMatch("Saturday"), 3200);
    v8_regexp_utils.assertToStringEquals("Sund,d", res[dartx.get](1009).firstMatch("Sunday"), 3201);
    v8_regexp_utils.assertToStringEquals("SATURDAY,Y", res[dartx.get](1009).firstMatch("SATURDAY"), 3202);
    v8_regexp_utils.assertToStringEquals("SUNDAY,Y", res[dartx.get](1009).firstMatch("SUNDAY"), 3203);
    v8_regexp_utils.assertToStringEquals("SunD,D", res[dartx.get](1009).firstMatch("SunDay"), 3204);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("abcx"), 3205);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aBCx"), 3206);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("bbx"), 3207);
    v8_regexp_utils.assertToStringEquals("BBx,x", res[dartx.get](1009).firstMatch("BBx"), 3208);
    v8_regexp_utils.assertToStringEquals("*** F,F", res[dartx.get](1009).firstMatch("*** Failers"), 3209);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("abcX"), 3210);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aBCX"), 3211);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("bbX"), 3212);
    v8_regexp_utils.assertToStringEquals("BBX               , ", res[dartx.get](1009).firstMatch("BBX               "), 3213);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("ac"), 3214);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aC"), 3215);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("bD"), 3216);
    v8_regexp_utils.assertToStringEquals("eleph,h", res[dartx.get](1009).firstMatch("elephant"), 3217);
    v8_regexp_utils.assertToStringEquals("Europe , ", res[dartx.get](1009).firstMatch("Europe "), 3218);
    v8_regexp_utils.assertToStringEquals("frog,g", res[dartx.get](1009).firstMatch("frog"), 3219);
    v8_regexp_utils.assertToStringEquals("Fr,r", res[dartx.get](1009).firstMatch("France"), 3220);
    v8_regexp_utils.assertToStringEquals("*** F,F", res[dartx.get](1009).firstMatch("*** Failers"), 3221);
    v8_regexp_utils.assertToStringEquals("Afric,c", res[dartx.get](1009).firstMatch("Africa     "), 3222);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("ab"), 3223);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aBd"), 3224);
    v8_regexp_utils.assertToStringEquals("xy,y", res[dartx.get](1009).firstMatch("xy"), 3225);
    v8_regexp_utils.assertToStringEquals("xY,Y", res[dartx.get](1009).firstMatch("xY"), 3226);
    v8_regexp_utils.assertToStringEquals("ze,e", res[dartx.get](1009).firstMatch("zebra"), 3227);
    v8_regexp_utils.assertToStringEquals("Z,Z", res[dartx.get](1009).firstMatch("Zambesi"), 3228);
    v8_regexp_utils.assertToStringEquals("*** F,F", res[dartx.get](1009).firstMatch("*** Failers"), 3229);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("aCD  "), 3230);
    v8_regexp_utils.assertToStringEquals("XY  , ", res[dartx.get](1009).firstMatch("XY  "), 3231);
    v8_regexp_utils.assertToStringEquals("foo\n,\n", res[dartx.get](1009).firstMatch("foo\nbar"), 3232);
    v8_regexp_utils.assertToStringEquals("*** F,F", res[dartx.get](1009).firstMatch("*** Failers"), 3233);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("bar"), 3234);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("baz\nbar   "), 3235);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("barbaz"), 3236);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("barbarbaz "), 3237);
    v8_regexp_utils.assertToStringEquals("koo,o", res[dartx.get](1009).firstMatch("koobarbaz "), 3238);
    v8_regexp_utils.assertToStringEquals("*** F,F", res[dartx.get](1009).firstMatch("*** Failers"), 3239);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1009).firstMatch("baz"), 3240);
    v8_regexp_utils.assertToStringEquals("foo,o", res[dartx.get](1009).firstMatch("foobarbaz "), 3241);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1012).firstMatch("abc"), 3242);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1012).firstMatch("xabcy"), 3243);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1012).firstMatch("ababc"), 3244);
    v8_regexp_utils.assertNull(res[dartx.get](1012).firstMatch("*** Failers"), 3245);
    v8_regexp_utils.assertNull(res[dartx.get](1012).firstMatch("xbc"), 3246);
    v8_regexp_utils.assertNull(res[dartx.get](1012).firstMatch("axc"), 3247);
    v8_regexp_utils.assertNull(res[dartx.get](1012).firstMatch("abx"), 3248);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1013).firstMatch("abc"), 3249);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1014).firstMatch("abc"), 3250);
    v8_regexp_utils.assertToStringEquals("abbc", res[dartx.get](1014).firstMatch("abbc"), 3251);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](1014).firstMatch("abbbbc"), 3252);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1015).firstMatch("abbbbc"), 3253);
    v8_regexp_utils.assertToStringEquals("abbb", res[dartx.get](1016).firstMatch("abbbbc"), 3254);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](1017).firstMatch("abbbbc"), 3255);
    v8_regexp_utils.assertToStringEquals("abbc", res[dartx.get](1018).firstMatch("abbc"), 3256);
    v8_regexp_utils.assertNull(res[dartx.get](1018).firstMatch("*** Failers"), 3257);
    v8_regexp_utils.assertNull(res[dartx.get](1018).firstMatch("abc"), 3258);
    v8_regexp_utils.assertNull(res[dartx.get](1018).firstMatch("abq"), 3259);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](1020).firstMatch("abbbbc"), 3260);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](1021).firstMatch("abbbbc"), 3261);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](1022).firstMatch("abbbbc"), 3262);
    v8_regexp_utils.assertToStringEquals("abbbbc", res[dartx.get](1023).firstMatch("abbbbc"), 3263);
    v8_regexp_utils.assertNull(res[dartx.get](1024).firstMatch("*** Failers"), 3264);
    v8_regexp_utils.assertNull(res[dartx.get](1024).firstMatch("abq"), 3265);
    v8_regexp_utils.assertNull(res[dartx.get](1024).firstMatch("abbbbc"), 3266);
    v8_regexp_utils.assertToStringEquals("abbc", res[dartx.get](1025).firstMatch("abbc"), 3267);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1025).firstMatch("abc"), 3268);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1026).firstMatch("abc"), 3269);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1028).firstMatch("abc"), 3270);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1029).firstMatch("abc"), 3271);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1030).firstMatch("abc"), 3272);
    v8_regexp_utils.assertNull(res[dartx.get](1030).firstMatch("*** Failers"), 3273);
    v8_regexp_utils.assertNull(res[dartx.get](1030).firstMatch("abbbbc"), 3274);
    v8_regexp_utils.assertNull(res[dartx.get](1030).firstMatch("abcc"), 3275);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1031).firstMatch("abcc"), 3276);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1033).firstMatch("aabc"), 3277);
    v8_regexp_utils.assertNull(res[dartx.get](1033).firstMatch("*** Failers"), 3278);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1033).firstMatch("aabc"), 3279);
    v8_regexp_utils.assertNull(res[dartx.get](1033).firstMatch("aabcd"), 3280);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1034).firstMatch("abc"), 3281);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1035).firstMatch("abc"), 3282);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1036).firstMatch("abc"), 3283);
    v8_regexp_utils.assertToStringEquals("axc", res[dartx.get](1036).firstMatch("axc"), 3284);
    v8_regexp_utils.assertToStringEquals("axyzc", res[dartx.get](1037).firstMatch("axyzc"), 3285);
    v8_regexp_utils.assertToStringEquals("abd", res[dartx.get](1038).firstMatch("abd"), 3286);
    v8_regexp_utils.assertNull(res[dartx.get](1038).firstMatch("*** Failers"), 3287);
    v8_regexp_utils.assertNull(res[dartx.get](1038).firstMatch("axyzd"), 3288);
    v8_regexp_utils.assertNull(res[dartx.get](1038).firstMatch("abc"), 3289);
    v8_regexp_utils.assertToStringEquals("ace", res[dartx.get](1039).firstMatch("ace"), 3290);
    v8_regexp_utils.assertToStringEquals("ac", res[dartx.get](1040).firstMatch("aac"), 3291);
    v8_regexp_utils.assertToStringEquals("a-", res[dartx.get](1041).firstMatch("a-"), 3292);
    v8_regexp_utils.assertToStringEquals("a-", res[dartx.get](1042).firstMatch("a-"), 3293);
    v8_regexp_utils.assertToStringEquals("a]", res[dartx.get](1043).firstMatch("a]"), 3294);
    v8_regexp_utils.assertNull(res[dartx.get](1044).firstMatch("a]b"), 3295);
    v8_regexp_utils.assertToStringEquals("aed", res[dartx.get](1045).firstMatch("aed"), 3296);
    v8_regexp_utils.assertNull(res[dartx.get](1045).firstMatch("*** Failers"), 3297);
    v8_regexp_utils.assertNull(res[dartx.get](1045).firstMatch("abd"), 3298);
    v8_regexp_utils.assertNull(res[dartx.get](1045).firstMatch("abd"), 3299);
    v8_regexp_utils.assertToStringEquals("adc", res[dartx.get](1046).firstMatch("adc"), 3300);
    v8_regexp_utils.assertNull(res[dartx.get](1047).firstMatch("adc"), 3301);
    v8_regexp_utils.assertNull(res[dartx.get](1047).firstMatch("*** Failers"), 3302);
    v8_regexp_utils.assertNull(res[dartx.get](1047).firstMatch("a-c"), 3303);
    v8_regexp_utils.assertNull(res[dartx.get](1047).firstMatch("a]c"), 3304);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1048).firstMatch("a-"), 3305);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1048).firstMatch("-a"), 3306);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1048).firstMatch("-a-"), 3307);
    v8_regexp_utils.assertNull(res[dartx.get](1049).firstMatch("*** Failers"), 3308);
    v8_regexp_utils.assertNull(res[dartx.get](1049).firstMatch("xy"), 3309);
    v8_regexp_utils.assertNull(res[dartx.get](1049).firstMatch("yz"), 3310);
    v8_regexp_utils.assertNull(res[dartx.get](1049).firstMatch("xyz"), 3311);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1050).firstMatch("*** Failers"), 3312);
    v8_regexp_utils.assertNull(res[dartx.get](1050).firstMatch("a-"), 3313);
    v8_regexp_utils.assertNull(res[dartx.get](1050).firstMatch("-a"), 3314);
    v8_regexp_utils.assertNull(res[dartx.get](1050).firstMatch("-a-"), 3315);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](1051).firstMatch("xy"), 3316);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](1052).firstMatch("yz"), 3317);
    v8_regexp_utils.assertToStringEquals("y", res[dartx.get](1053).firstMatch("xyz"), 3318);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1054).firstMatch("a"), 3319);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1055).firstMatch("-"), 3320);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](1055).firstMatch("*** Failers"), 3321);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1055).firstMatch("-"), 3322);
    v8_regexp_utils.assertNull(res[dartx.get](1055).firstMatch("a"), 3323);
    v8_regexp_utils.assertToStringEquals("a b", res[dartx.get](1056).firstMatch("a b"), 3324);
    v8_regexp_utils.assertToStringEquals("a-b", res[dartx.get](1057).firstMatch("a-b"), 3325);
    v8_regexp_utils.assertNull(res[dartx.get](1057).firstMatch("*** Failers"), 3326);
    v8_regexp_utils.assertToStringEquals("a-b", res[dartx.get](1057).firstMatch("a-b"), 3327);
    v8_regexp_utils.assertNull(res[dartx.get](1057).firstMatch("a b"), 3328);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](1058).firstMatch("1"), 3329);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1059).firstMatch("-"), 3330);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](1059).firstMatch("*** Failers"), 3331);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1059).firstMatch("-"), 3332);
    v8_regexp_utils.assertNull(res[dartx.get](1059).firstMatch("1"), 3333);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1060).firstMatch("a"), 3334);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1061).firstMatch("-"), 3335);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](1061).firstMatch("*** Failers"), 3336);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1061).firstMatch("-"), 3337);
    v8_regexp_utils.assertNull(res[dartx.get](1061).firstMatch("a"), 3338);
    v8_regexp_utils.assertToStringEquals("a b", res[dartx.get](1062).firstMatch("a b"), 3339);
    v8_regexp_utils.assertToStringEquals("a-b", res[dartx.get](1063).firstMatch("a-b"), 3340);
    v8_regexp_utils.assertNull(res[dartx.get](1063).firstMatch("*** Failers"), 3341);
    v8_regexp_utils.assertToStringEquals("a-b", res[dartx.get](1063).firstMatch("a-b"), 3342);
    v8_regexp_utils.assertNull(res[dartx.get](1063).firstMatch("a b"), 3343);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](1064).firstMatch("1"), 3344);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1065).firstMatch("-"), 3345);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](1065).firstMatch("*** Failers"), 3346);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1065).firstMatch("-"), 3347);
    v8_regexp_utils.assertNull(res[dartx.get](1065).firstMatch("1"), 3348);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1066).firstMatch("abc"), 3349);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1066).firstMatch("abcd"), 3350);
    v8_regexp_utils.assertToStringEquals("ef,", res[dartx.get](1067).firstMatch("def"), 3351);
    v8_regexp_utils.assertToStringEquals("a(b", res[dartx.get](1069).firstMatch("a(b"), 3352);
    v8_regexp_utils.assertNull(res[dartx.get](1069).firstMatch("ab"), 3353);
    v8_regexp_utils.assertNull(res[dartx.get](1069).firstMatch("a((b"), 3354);
    v8_regexp_utils.assertNull(res[dartx.get](1070).firstMatch("a\b"), 3355);
    v8_regexp_utils.assertToStringEquals("a,a,a", res[dartx.get](1071).firstMatch("abc"), 3356);
    v8_regexp_utils.assertToStringEquals("abc,a,c", res[dartx.get](1072).firstMatch("abc"), 3357);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1073).firstMatch("aabbabc"), 3358);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1074).firstMatch("aabbabc"), 3359);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1075).firstMatch("abcabc"), 3360);
    v8_regexp_utils.assertToStringEquals("ab,b", res[dartx.get](1076).firstMatch("ab"), 3361);
    v8_regexp_utils.assertToStringEquals("ab,b", res[dartx.get](1077).firstMatch("ab"), 3362);
    v8_regexp_utils.assertToStringEquals("ab,b", res[dartx.get](1078).firstMatch("ab"), 3363);
    v8_regexp_utils.assertToStringEquals("ab,b", res[dartx.get](1079).firstMatch("ab"), 3364);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](1080).firstMatch("ab"), 3365);
    v8_regexp_utils.assertToStringEquals("a,a", res[dartx.get](1081).firstMatch("ab"), 3366);
    v8_regexp_utils.assertToStringEquals("cde", res[dartx.get](1082).firstMatch("cde"), 3367);
    v8_regexp_utils.assertNull(res[dartx.get](1083).firstMatch("*** Failers"), 3368);
    v8_regexp_utils.assertNull(res[dartx.get](1083).firstMatch("b"), 3369);
    v8_regexp_utils.assertToStringEquals("abbbcd,c", res[dartx.get](1085).firstMatch("abbbcd"), 3370);
    v8_regexp_utils.assertToStringEquals("abcd,a", res[dartx.get](1086).firstMatch("abcd"), 3371);
    v8_regexp_utils.assertToStringEquals("e", res[dartx.get](1087).firstMatch("e"), 3372);
    v8_regexp_utils.assertToStringEquals("ef,e", res[dartx.get](1088).firstMatch("ef"), 3373);
    v8_regexp_utils.assertToStringEquals("abcdefg", res[dartx.get](1089).firstMatch("abcdefg"), 3374);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1090).firstMatch("xabyabbbz"), 3375);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1090).firstMatch("xayabbbz"), 3376);
    v8_regexp_utils.assertToStringEquals("cde,cd", res[dartx.get](1091).firstMatch("abcde"), 3377);
    v8_regexp_utils.assertToStringEquals("hij", res[dartx.get](1092).firstMatch("hij"), 3378);
    v8_regexp_utils.assertToStringEquals("ef,", res[dartx.get](1094).firstMatch("abcdef"), 3379);
    v8_regexp_utils.assertToStringEquals("bcd,b", res[dartx.get](1095).firstMatch("abcd"), 3380);
    v8_regexp_utils.assertToStringEquals("abc,a", res[dartx.get](1096).firstMatch("abc"), 3381);
    v8_regexp_utils.assertToStringEquals("abc,bc", res[dartx.get](1097).firstMatch("abc"), 3382);
    v8_regexp_utils.assertToStringEquals("abcd,bc,d", res[dartx.get](1098).firstMatch("abcd"), 3383);
    v8_regexp_utils.assertToStringEquals("abcd,bc,d", res[dartx.get](1099).firstMatch("abcd"), 3384);
    v8_regexp_utils.assertToStringEquals("abcd,b,cd", res[dartx.get](1100).firstMatch("abcd"), 3385);
    v8_regexp_utils.assertToStringEquals("adcdcde", res[dartx.get](1101).firstMatch("adcdcde"), 3386);
    v8_regexp_utils.assertNull(res[dartx.get](1102).firstMatch("*** Failers"), 3387);
    v8_regexp_utils.assertNull(res[dartx.get](1102).firstMatch("abcde"), 3388);
    v8_regexp_utils.assertNull(res[dartx.get](1102).firstMatch("adcdcde"), 3389);
    v8_regexp_utils.assertToStringEquals("abc,ab", res[dartx.get](1103).firstMatch("abc"), 3390);
    v8_regexp_utils.assertToStringEquals("abcd,abc,a,b,d", res[dartx.get](1104).firstMatch("abcd"), 3391);
    v8_regexp_utils.assertToStringEquals("alpha", res[dartx.get](1105).firstMatch("alpha"), 3392);
    v8_regexp_utils.assertToStringEquals("bh,", res[dartx.get](1106).firstMatch("abh"), 3393);
    v8_regexp_utils.assertToStringEquals("effgz,effgz,", res[dartx.get](1107).firstMatch("effgz"), 3394);
    v8_regexp_utils.assertToStringEquals("ij,ij,j", res[dartx.get](1107).firstMatch("ij"), 3395);
    v8_regexp_utils.assertToStringEquals("effgz,effgz,", res[dartx.get](1107).firstMatch("reffgz"), 3396);
    v8_regexp_utils.assertNull(res[dartx.get](1107).firstMatch("*** Failers"), 3397);
    v8_regexp_utils.assertNull(res[dartx.get](1107).firstMatch("effg"), 3398);
    v8_regexp_utils.assertNull(res[dartx.get](1107).firstMatch("bcdd"), 3399);
    v8_regexp_utils.assertToStringEquals("a,a,a,a,a,a,a,a,a,a,a", res[dartx.get](1108).firstMatch("a"), 3400);
    v8_regexp_utils.assertToStringEquals("a,a,a,a,a,a,a,a,a,a", res[dartx.get](1109).firstMatch("a"), 3401);
    v8_regexp_utils.assertNull(res[dartx.get](1110).firstMatch("*** Failers"), 3402);
    v8_regexp_utils.assertNull(res[dartx.get](1110).firstMatch("aa"), 3403);
    v8_regexp_utils.assertNull(res[dartx.get](1110).firstMatch("uh-uh"), 3404);
    v8_regexp_utils.assertToStringEquals("multiple words", res[dartx.get](1111).firstMatch("multiple words, yeah"), 3405);
    v8_regexp_utils.assertToStringEquals("abcde,ab,de", res[dartx.get](1112).firstMatch("abcde"), 3406);
    v8_regexp_utils.assertToStringEquals("(a, b),a,b", res[dartx.get](1113).firstMatch("(a, b)"), 3407);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](1115).firstMatch("abcd"), 3408);
    v8_regexp_utils.assertToStringEquals("abcd,bc", res[dartx.get](1116).firstMatch("abcd"), 3409);
    v8_regexp_utils.assertToStringEquals("ac", res[dartx.get](1117).firstMatch("ac"), 3410);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1118).firstMatch("ABC"), 3411);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1118).firstMatch("XABCY"), 3412);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1118).firstMatch("ABABC"), 3413);
    v8_regexp_utils.assertNull(res[dartx.get](1118).firstMatch("*** Failers"), 3414);
    v8_regexp_utils.assertNull(res[dartx.get](1118).firstMatch("aaxabxbaxbbx"), 3415);
    v8_regexp_utils.assertNull(res[dartx.get](1118).firstMatch("XBC"), 3416);
    v8_regexp_utils.assertNull(res[dartx.get](1118).firstMatch("AXC"), 3417);
    v8_regexp_utils.assertNull(res[dartx.get](1118).firstMatch("ABX"), 3418);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1119).firstMatch("ABC"), 3419);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1120).firstMatch("ABC"), 3420);
    v8_regexp_utils.assertToStringEquals("ABBC", res[dartx.get](1120).firstMatch("ABBC"), 3421);
    v8_regexp_utils.assertToStringEquals("ABBBBC", res[dartx.get](1121).firstMatch("ABBBBC"), 3422);
    v8_regexp_utils.assertToStringEquals("ABBBBC", res[dartx.get](1122).firstMatch("ABBBBC"), 3423);
    v8_regexp_utils.assertToStringEquals("ABBC", res[dartx.get](1123).firstMatch("ABBC"), 3424);
    v8_regexp_utils.assertNull(res[dartx.get](1124).firstMatch("*** Failers"), 3425);
    v8_regexp_utils.assertNull(res[dartx.get](1124).firstMatch("ABC"), 3426);
    v8_regexp_utils.assertNull(res[dartx.get](1124).firstMatch("ABQ"), 3427);
    v8_regexp_utils.assertToStringEquals("ABBBBC", res[dartx.get](1126).firstMatch("ABBBBC"), 3428);
    v8_regexp_utils.assertToStringEquals("ABBBBC", res[dartx.get](1127).firstMatch("ABBBBC"), 3429);
    v8_regexp_utils.assertToStringEquals("ABBBBC", res[dartx.get](1128).firstMatch("ABBBBC"), 3430);
    v8_regexp_utils.assertToStringEquals("ABBBBC", res[dartx.get](1129).firstMatch("ABBBBC"), 3431);
    v8_regexp_utils.assertNull(res[dartx.get](1130).firstMatch("*** Failers"), 3432);
    v8_regexp_utils.assertNull(res[dartx.get](1130).firstMatch("ABQ"), 3433);
    v8_regexp_utils.assertNull(res[dartx.get](1130).firstMatch("ABBBBC"), 3434);
    v8_regexp_utils.assertToStringEquals("ABBC", res[dartx.get](1131).firstMatch("ABBC"), 3435);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1131).firstMatch("ABC"), 3436);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1132).firstMatch("ABC"), 3437);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1134).firstMatch("ABC"), 3438);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1135).firstMatch("ABC"), 3439);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1136).firstMatch("ABC"), 3440);
    v8_regexp_utils.assertNull(res[dartx.get](1136).firstMatch("*** Failers"), 3441);
    v8_regexp_utils.assertNull(res[dartx.get](1136).firstMatch("ABBBBC"), 3442);
    v8_regexp_utils.assertNull(res[dartx.get](1136).firstMatch("ABCC"), 3443);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1137).firstMatch("ABCC"), 3444);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1139).firstMatch("AABC"), 3445);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1140).firstMatch("ABC"), 3446);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1141).firstMatch("ABC"), 3447);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1142).firstMatch("ABC"), 3448);
    v8_regexp_utils.assertToStringEquals("AXC", res[dartx.get](1142).firstMatch("AXC"), 3449);
    v8_regexp_utils.assertToStringEquals("AXYZC", res[dartx.get](1143).firstMatch("AXYZC"), 3450);
    v8_regexp_utils.assertNull(res[dartx.get](1144).firstMatch("*** Failers"), 3451);
    v8_regexp_utils.assertToStringEquals("AABC", res[dartx.get](1144).firstMatch("AABC"), 3452);
    v8_regexp_utils.assertNull(res[dartx.get](1144).firstMatch("AXYZD"), 3453);
    v8_regexp_utils.assertToStringEquals("ABD", res[dartx.get](1145).firstMatch("ABD"), 3454);
    v8_regexp_utils.assertToStringEquals("ACE", res[dartx.get](1146).firstMatch("ACE"), 3455);
    v8_regexp_utils.assertNull(res[dartx.get](1146).firstMatch("*** Failers"), 3456);
    v8_regexp_utils.assertNull(res[dartx.get](1146).firstMatch("ABC"), 3457);
    v8_regexp_utils.assertNull(res[dartx.get](1146).firstMatch("ABD"), 3458);
    v8_regexp_utils.assertToStringEquals("AC", res[dartx.get](1147).firstMatch("AAC"), 3459);
    v8_regexp_utils.assertToStringEquals("A-", res[dartx.get](1148).firstMatch("A-"), 3460);
    v8_regexp_utils.assertToStringEquals("A-", res[dartx.get](1149).firstMatch("A-"), 3461);
    v8_regexp_utils.assertToStringEquals("A]", res[dartx.get](1150).firstMatch("A]"), 3462);
    v8_regexp_utils.assertNull(res[dartx.get](1151).firstMatch("A]B"), 3463);
    v8_regexp_utils.assertToStringEquals("AED", res[dartx.get](1152).firstMatch("AED"), 3464);
    v8_regexp_utils.assertToStringEquals("ADC", res[dartx.get](1153).firstMatch("ADC"), 3465);
    v8_regexp_utils.assertNull(res[dartx.get](1153).firstMatch("*** Failers"), 3466);
    v8_regexp_utils.assertNull(res[dartx.get](1153).firstMatch("ABD"), 3467);
    v8_regexp_utils.assertNull(res[dartx.get](1153).firstMatch("A-C"), 3468);
    v8_regexp_utils.assertNull(res[dartx.get](1154).firstMatch("ADC"), 3469);
    v8_regexp_utils.assertToStringEquals("AB", res[dartx.get](1155).firstMatch("ABC"), 3470);
    v8_regexp_utils.assertToStringEquals("AB", res[dartx.get](1155).firstMatch("ABCD"), 3471);
    v8_regexp_utils.assertToStringEquals("EF,", res[dartx.get](1156).firstMatch("DEF"), 3472);
    v8_regexp_utils.assertNull(res[dartx.get](1157).firstMatch("*** Failers"), 3473);
    v8_regexp_utils.assertNull(res[dartx.get](1157).firstMatch("A]C"), 3474);
    v8_regexp_utils.assertNull(res[dartx.get](1157).firstMatch("B"), 3475);
    v8_regexp_utils.assertToStringEquals("A(B", res[dartx.get](1158).firstMatch("A(B"), 3476);
    v8_regexp_utils.assertNull(res[dartx.get](1158).firstMatch("AB"), 3477);
    v8_regexp_utils.assertNull(res[dartx.get](1158).firstMatch("A((B"), 3478);
    v8_regexp_utils.assertNull(res[dartx.get](1159).firstMatch("AB"), 3479);
    v8_regexp_utils.assertToStringEquals("A,A,A", res[dartx.get](1160).firstMatch("ABC"), 3480);
    v8_regexp_utils.assertToStringEquals("ABC,A,C", res[dartx.get](1161).firstMatch("ABC"), 3481);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1162).firstMatch("AABBABC"), 3482);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1163).firstMatch("AABBABC"), 3483);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1164).firstMatch("ABCABC"), 3484);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1165).firstMatch("ABCABC"), 3485);
    v8_regexp_utils.assertToStringEquals("ABC", res[dartx.get](1166).firstMatch("ABCABC"), 3486);
    v8_regexp_utils.assertToStringEquals("AB,B", res[dartx.get](1167).firstMatch("AB"), 3487);
    v8_regexp_utils.assertToStringEquals("AB,B", res[dartx.get](1168).firstMatch("AB"), 3488);
    v8_regexp_utils.assertToStringEquals("AB,B", res[dartx.get](1169).firstMatch("AB"), 3489);
    v8_regexp_utils.assertToStringEquals("AB,B", res[dartx.get](1170).firstMatch("AB"), 3490);
    v8_regexp_utils.assertToStringEquals("A,A", res[dartx.get](1171).firstMatch("AB"), 3491);
    v8_regexp_utils.assertToStringEquals("A,A", res[dartx.get](1172).firstMatch("AB"), 3492);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1173).firstMatch("AB"), 3493);
    v8_regexp_utils.assertToStringEquals("CDE", res[dartx.get](1174).firstMatch("CDE"), 3494);
    v8_regexp_utils.assertToStringEquals("ABBBCD,C", res[dartx.get](1177).firstMatch("ABBBCD"), 3495);
    v8_regexp_utils.assertToStringEquals("ABCD,A", res[dartx.get](1178).firstMatch("ABCD"), 3496);
    v8_regexp_utils.assertToStringEquals("E", res[dartx.get](1179).firstMatch("E"), 3497);
    v8_regexp_utils.assertToStringEquals("EF,E", res[dartx.get](1180).firstMatch("EF"), 3498);
    v8_regexp_utils.assertToStringEquals("ABCDEFG", res[dartx.get](1181).firstMatch("ABCDEFG"), 3499);
    v8_regexp_utils.assertToStringEquals("AB", res[dartx.get](1182).firstMatch("XABYABBBZ"), 3500);
    v8_regexp_utils.assertToStringEquals("A", res[dartx.get](1182).firstMatch("XAYABBBZ"), 3501);
    v8_regexp_utils.assertToStringEquals("CDE,CD", res[dartx.get](1183).firstMatch("ABCDE"), 3502);
    v8_regexp_utils.assertToStringEquals("HIJ", res[dartx.get](1184).firstMatch("HIJ"), 3503);
    v8_regexp_utils.assertNull(res[dartx.get](1185).firstMatch("ABCDE"), 3504);
    v8_regexp_utils.assertToStringEquals("EF,", res[dartx.get](1186).firstMatch("ABCDEF"), 3505);
    v8_regexp_utils.assertToStringEquals("BCD,B", res[dartx.get](1187).firstMatch("ABCD"), 3506);
    v8_regexp_utils.assertToStringEquals("ABC,A", res[dartx.get](1188).firstMatch("ABC"), 3507);
    v8_regexp_utils.assertToStringEquals("ABC,BC", res[dartx.get](1189).firstMatch("ABC"), 3508);
    v8_regexp_utils.assertToStringEquals("ABCD,BC,D", res[dartx.get](1190).firstMatch("ABCD"), 3509);
    v8_regexp_utils.assertToStringEquals("ABCD,BC,D", res[dartx.get](1191).firstMatch("ABCD"), 3510);
    v8_regexp_utils.assertToStringEquals("ABCD,B,CD", res[dartx.get](1192).firstMatch("ABCD"), 3511);
    v8_regexp_utils.assertToStringEquals("ADCDCDE", res[dartx.get](1193).firstMatch("ADCDCDE"), 3512);
    v8_regexp_utils.assertToStringEquals("ABC,AB", res[dartx.get](1195).firstMatch("ABC"), 3513);
    v8_regexp_utils.assertToStringEquals("ABCD,ABC,A,B,D", res[dartx.get](1196).firstMatch("ABCD"), 3514);
    v8_regexp_utils.assertToStringEquals("ALPHA", res[dartx.get](1197).firstMatch("ALPHA"), 3515);
    v8_regexp_utils.assertToStringEquals("BH,", res[dartx.get](1198).firstMatch("ABH"), 3516);
    v8_regexp_utils.assertToStringEquals("EFFGZ,EFFGZ,", res[dartx.get](1199).firstMatch("EFFGZ"), 3517);
    v8_regexp_utils.assertToStringEquals("IJ,IJ,J", res[dartx.get](1199).firstMatch("IJ"), 3518);
    v8_regexp_utils.assertToStringEquals("EFFGZ,EFFGZ,", res[dartx.get](1199).firstMatch("REFFGZ"), 3519);
    v8_regexp_utils.assertNull(res[dartx.get](1199).firstMatch("*** Failers"), 3520);
    v8_regexp_utils.assertNull(res[dartx.get](1199).firstMatch("ADCDCDE"), 3521);
    v8_regexp_utils.assertNull(res[dartx.get](1199).firstMatch("EFFG"), 3522);
    v8_regexp_utils.assertNull(res[dartx.get](1199).firstMatch("BCDD"), 3523);
    v8_regexp_utils.assertToStringEquals("A,A,A,A,A,A,A,A,A,A,A", res[dartx.get](1200).firstMatch("A"), 3524);
    v8_regexp_utils.assertToStringEquals("A,A,A,A,A,A,A,A,A,A", res[dartx.get](1201).firstMatch("A"), 3525);
    v8_regexp_utils.assertToStringEquals("A,A", res[dartx.get](1202).firstMatch("A"), 3526);
    v8_regexp_utils.assertToStringEquals("C,C", res[dartx.get](1203).firstMatch("C"), 3527);
    v8_regexp_utils.assertNull(res[dartx.get](1204).firstMatch("*** Failers"), 3528);
    v8_regexp_utils.assertNull(res[dartx.get](1204).firstMatch("AA"), 3529);
    v8_regexp_utils.assertNull(res[dartx.get](1204).firstMatch("UH-UH"), 3530);
    v8_regexp_utils.assertToStringEquals("MULTIPLE WORDS", res[dartx.get](1205).firstMatch("MULTIPLE WORDS, YEAH"), 3531);
    v8_regexp_utils.assertToStringEquals("ABCDE,AB,DE", res[dartx.get](1206).firstMatch("ABCDE"), 3532);
    v8_regexp_utils.assertToStringEquals("(A, B),A,B", res[dartx.get](1207).firstMatch("(A, B)"), 3533);
    v8_regexp_utils.assertToStringEquals("ABCD", res[dartx.get](1209).firstMatch("ABCD"), 3534);
    v8_regexp_utils.assertToStringEquals("ABCD,BC", res[dartx.get](1210).firstMatch("ABCD"), 3535);
    v8_regexp_utils.assertToStringEquals("AC", res[dartx.get](1211).firstMatch("AC"), 3536);
    v8_regexp_utils.assertToStringEquals("ad", res[dartx.get](1212).firstMatch("abad"), 3537);
    v8_regexp_utils.assertToStringEquals("ad", res[dartx.get](1213).firstMatch("abad"), 3538);
    v8_regexp_utils.assertToStringEquals("ad", res[dartx.get](1214).firstMatch("abad"), 3539);
    v8_regexp_utils.assertToStringEquals("ace,e", res[dartx.get](1215).firstMatch("ace"), 3540);
    v8_regexp_utils.assertToStringEquals("ace,e", res[dartx.get](1216).firstMatch("ace"), 3541);
    v8_regexp_utils.assertToStringEquals("ace,e", res[dartx.get](1217).firstMatch("ace"), 3542);
    v8_regexp_utils.assertToStringEquals("acd,d", res[dartx.get](1217).firstMatch("acdbcdbe"), 3543);
    v8_regexp_utils.assertToStringEquals("acdbcdbe,e", res[dartx.get](1218).firstMatch("acdbcdbe"), 3544);
    v8_regexp_utils.assertToStringEquals("acdb,b", res[dartx.get](1219).firstMatch("acdbcdbe"), 3545);
    v8_regexp_utils.assertToStringEquals("acdbcdb,b", res[dartx.get](1220).firstMatch("acdbcdbe"), 3546);
    v8_regexp_utils.assertToStringEquals("acdbcd,d", res[dartx.get](1221).firstMatch("acdbcdbe"), 3547);
    v8_regexp_utils.assertToStringEquals("foobar,bar,,bar", res[dartx.get](1222).firstMatch("foobar"), 3548);
    v8_regexp_utils.assertToStringEquals("acdbcdbe,e", res[dartx.get](1223).firstMatch("acdbcdbe"), 3549);
    v8_regexp_utils.assertToStringEquals("acdbcdbe,e", res[dartx.get](1224).firstMatch("acdbcdbe"), 3550);
    v8_regexp_utils.assertToStringEquals("acdbcdbe,e", res[dartx.get](1225).firstMatch("acdbcdbe"), 3551);
    v8_regexp_utils.assertToStringEquals("acdbcdb,b", res[dartx.get](1226).firstMatch("acdbcdbe"), 3552);
    v8_regexp_utils.assertToStringEquals("acdbcdbe,e", res[dartx.get](1227).firstMatch("acdbcdbe"), 3553);
    v8_regexp_utils.assertToStringEquals("acdbcdb,b", res[dartx.get](1228).firstMatch("acdbcdbe"), 3554);
    v8_regexp_utils.assertToStringEquals("ace,c,e", res[dartx.get](1229).firstMatch("ace"), 3555);
    v8_regexp_utils.assertToStringEquals("AB,A", res[dartx.get](1230).firstMatch("AB"), 3556);
    v8_regexp_utils.assertToStringEquals(".,.,", res[dartx.get](1231).firstMatch("."), 3557);
    v8_regexp_utils.assertToStringEquals("<&", res[dartx.get](1232).firstMatch("<&OUT"), 3558);
    v8_regexp_utils.assertToStringEquals("foobar,,,,b,a,r", res[dartx.get](1233).firstMatch("foobar"), 3559);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("ab"), 3560);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("*** Failers"), 3561);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("cb"), 3562);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("b"), 3563);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("ab"), 3564);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("b"), 3565);
    v8_regexp_utils.assertToStringEquals(",,,,,,", res[dartx.get](1233).firstMatch("b"), 3566);
    v8_regexp_utils.assertToStringEquals("aba", res[dartx.get](1234).firstMatch("aba"), 3567);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1235).firstMatch("aba"), 3568);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1236).firstMatch("abc"), 3569);
    v8_regexp_utils.assertToStringEquals("aax,a", res[dartx.get](1237).firstMatch("aax"), 3570);
    v8_regexp_utils.assertToStringEquals("aax,a,a", res[dartx.get](1238).firstMatch("aax"), 3571);
    v8_regexp_utils.assertToStringEquals("aax,a,a", res[dartx.get](1239).firstMatch("aax"), 3572);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1240).firstMatch("cab"), 3573);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("cab"), 3574);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3575);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3576);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3577);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3578);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3579);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("cb"), 3580);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3581);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3582);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3583);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3584);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3585);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3586);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3587);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3588);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3589);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3590);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3591);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3592);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3593);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3594);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3595);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3596);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3597);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3598);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3599);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("AB"), 3600);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3601);
    v8_regexp_utils.assertToStringEquals("ab,", res[dartx.get](1241).firstMatch("ab"), 3602);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3603);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3604);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3605);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("AB"), 3606);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3607);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3608);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("aB"), 3609);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3610);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("Ab"), 3611);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("AB"), 3612);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("*** Failers"), 3613);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("AB"), 3614);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("a\nB"), 3615);
    v8_regexp_utils.assertNull(res[dartx.get](1241).firstMatch("a\nB"), 3616);
    v8_regexp_utils.assertToStringEquals("cabbbb", res[dartx.get](1242).firstMatch("cabbbb"), 3617);
    v8_regexp_utils.assertToStringEquals("caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", res[dartx.get](1243).firstMatch("caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"), 3618);
    v8_regexp_utils.assertToStringEquals("foobar1234baz", res[dartx.get](1244).firstMatch("foobar1234baz"), 3619);
    v8_regexp_utils.assertToStringEquals("x~~,~~", res[dartx.get](1245).firstMatch("x~~"), 3620);
    v8_regexp_utils.assertToStringEquals("aaac", res[dartx.get](1246).firstMatch("aaac"), 3621);
    v8_regexp_utils.assertToStringEquals("aaac", res[dartx.get](1247).firstMatch("aaac"), 3622);
    v8_regexp_utils.assertNull(res[dartx.get](1247).firstMatch("*** Failers"), 3623);
    v8_regexp_utils.assertNull(res[dartx.get](1247).firstMatch("B\nB"), 3624);
    v8_regexp_utils.assertNull(res[dartx.get](1247).firstMatch("dbcb"), 3625);
    v8_regexp_utils.assertNull(res[dartx.get](1247).firstMatch("dbaacb"), 3626);
    v8_regexp_utils.assertNull(res[dartx.get](1247).firstMatch("dbaacb"), 3627);
    v8_regexp_utils.assertNull(res[dartx.get](1247).firstMatch("cdaccb"), 3628);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("*** Failers"), 3629);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("dbcb"), 3630);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a--"), 3631);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\nc\n"), 3632);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\nc\n"), 3633);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\n"), 3634);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\n"), 3635);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\n"), 3636);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\n"), 3637);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\nc\n"), 3638);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\nc\n"), 3639);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\nc\n"), 3640);
    v8_regexp_utils.assertNull(res[dartx.get](1248).firstMatch("a\nb\nc\n"), 3641);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("*** Failers"), 3642);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a\nb\nc\n"), 3643);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a\nb\nc\n"), 3644);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a\nb\nc\n"), 3645);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a"), 3646);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("*** Failers"), 3647);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a"), 3648);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a"), 3649);
    v8_regexp_utils.assertNull(res[dartx.get](1250).firstMatch("a"), 3650);
    v8_regexp_utils.assertToStringEquals("one:,one:", res[dartx.get](1251).firstMatch("one:"), 3651);
    v8_regexp_utils.assertNull(res[dartx.get](1251).firstMatch("a"), 3652);
    v8_regexp_utils.assertToStringEquals("abcd,,abcd", res[dartx.get](1252).firstMatch("abcd"), 3653);
    v8_regexp_utils.assertToStringEquals("xy:z:::abcd,xy:z:::,abcd", res[dartx.get](1252).firstMatch("xy:z:::abcd"), 3654);
    v8_regexp_utils.assertToStringEquals("aexyc,c", res[dartx.get](1253).firstMatch("aexycd"), 3655);
    v8_regexp_utils.assertToStringEquals("aab,aa", res[dartx.get](1254).firstMatch("caab"), 3656);
    v8_regexp_utils.assertToStringEquals("abcd,,abcd", res[dartx.get](1255).firstMatch("abcd"), 3657);
    v8_regexp_utils.assertToStringEquals("xy:z:::abcd,xy:z:::,abcd", res[dartx.get](1255).firstMatch("xy:z:::abcd"), 3658);
    v8_regexp_utils.assertToStringEquals("Failers,,Failers", res[dartx.get](1255).firstMatch("*** Failers"), 3659);
    v8_regexp_utils.assertNull(res[dartx.get](1255).firstMatch("abcd:"), 3660);
    v8_regexp_utils.assertNull(res[dartx.get](1255).firstMatch("abcd:"), 3661);
    v8_regexp_utils.assertToStringEquals("aexyc,c", res[dartx.get](1256).firstMatch("aexycd"), 3662);
    v8_regexp_utils.assertNull(res[dartx.get](1257).firstMatch("aaab"), 3663);
    v8_regexp_utils.assertToStringEquals(":[,:[", res[dartx.get](1258).firstMatch("a:[b]:"), 3664);
    v8_regexp_utils.assertToStringEquals("=[,=[", res[dartx.get](1259).firstMatch("a=[b]="), 3665);
    v8_regexp_utils.assertToStringEquals(".[,.[", res[dartx.get](1260).firstMatch("a.[b]."), 3666);
    v8_regexp_utils.assertNull(res[dartx.get](1260).firstMatch("aaab"), 3667);
    v8_regexp_utils.assertNull(res[dartx.get](1260).firstMatch("aaab"), 3668);
    v8_regexp_utils.assertNull(res[dartx.get](1260).firstMatch("((abc(ade)ufh()()x"), 3669);
    v8_regexp_utils.assertNull(res[dartx.get](1261).firstMatch("*** Failers"), 3670);
    v8_regexp_utils.assertNull(res[dartx.get](1261).firstMatch("aaab"), 3671);
    v8_regexp_utils.assertNull(res[dartx.get](1261).firstMatch("a\nb\n"), 3672);
    v8_regexp_utils.assertNull(res[dartx.get](1262).firstMatch("a\nb\n"), 3673);
    v8_regexp_utils.assertNull(res[dartx.get](1264).firstMatch("a\nb"), 3674);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("a\nb"), 3675);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("*** Failers"), 3676);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("alphabetabcd"), 3677);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("endingwxyz"), 3678);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("*** Failers"), 3679);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("a rather long string that doesn't end with one of them"), 3680);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("word cat dog elephant mussel cow horse canary baboon snake shark otherword"), 3681);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("word cat dog elephant mussel cow horse canary baboon snake shark"), 3682);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope"), 3683);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("999foo"), 3684);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123999foo "), 3685);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("*** Failers"), 3686);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123abcfoo"), 3687);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("999foo"), 3688);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123999foo "), 3689);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("*** Failers"), 3690);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123abcfoo"), 3691);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123abcfoo"), 3692);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123456foo "), 3693);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("*** Failers"), 3694);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123999foo  "), 3695);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123abcfoo   "), 3696);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123456foo "), 3697);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("*** Failers"), 3698);
    v8_regexp_utils.assertNull(res[dartx.get](1265).firstMatch("123999foo  "), 3699);
    v8_regexp_utils.assertToStringEquals("ZA,A,", res[dartx.get](1266).firstMatch("ZABCDEFG"), 3700);
    v8_regexp_utils.assertToStringEquals("ZA,A,", res[dartx.get](1267).firstMatch("ZABCDEFG"), 3701);
    v8_regexp_utils.assertToStringEquals("ZA,A,,", res[dartx.get](1268).firstMatch("ZABCDEFG"), 3702);
    v8_regexp_utils.assertToStringEquals("ZA,A,,", res[dartx.get](1268).firstMatch("ZABCDEFG"), 3703);
    v8_regexp_utils.assertToStringEquals("ZA,A,,", res[dartx.get](1268).firstMatch("ZABCDEFG"), 3704);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1269).firstMatch("abbab"), 3705);
    v8_regexp_utils.assertToStringEquals("a", res[dartx.get](1270).firstMatch("abcde"), 3711);
    v8_regexp_utils.assertToStringEquals("-", res[dartx.get](1270).firstMatch("-things"), 3712);
    v8_regexp_utils.assertToStringEquals("0", res[dartx.get](1270).firstMatch("0digit"), 3713);
    v8_regexp_utils.assertNull(res[dartx.get](1270).firstMatch("*** Failers"), 3714);
    v8_regexp_utils.assertNull(res[dartx.get](1270).firstMatch("bcdef    "), 3715);
    v8_regexp_utils.assertNull(res[dartx.get](1271).firstMatch("> \t\n\f\r\v<"), 3716);
    v8_regexp_utils.assertNull(res[dartx.get](1271).firstMatch(" "), 3717);
    v8_regexp_utils.assertNull(res[dartx.get](1272).firstMatch("> \t\n\f\r\v<"), 3718);
    v8_regexp_utils.assertNull(res[dartx.get](1272).firstMatch(" "), 3719);
    v8_regexp_utils.assertToStringEquals(" \t\n\f\r\v", res[dartx.get](1273).firstMatch("> \t\n\f\r\v<"), 3720);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](1273).firstMatch(" "), 3721);
    v8_regexp_utils.assertToStringEquals(" \t\n\f\r\v", res[dartx.get](1274).firstMatch("> \t\n\f\r\v<"), 3722);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](1274).firstMatch(" "), 3723);
    v8_regexp_utils.assertNull(res[dartx.get](1275).firstMatch("ab"), 3724);
    v8_regexp_utils.assertNull(res[dartx.get](1278).firstMatch("abcabcabc"), 3725);
    v8_regexp_utils.assertNull(res[dartx.get](1278).firstMatch("abc(*+|abc "), 3726);
    v8_regexp_utils.assertNull(res[dartx.get](1279).firstMatch("abc abcabc"), 3727);
    v8_regexp_utils.assertNull(res[dartx.get](1279).firstMatch("*** Failers"), 3728);
    v8_regexp_utils.assertNull(res[dartx.get](1279).firstMatch("abcabcabc  "), 3729);
    v8_regexp_utils.assertNull(res[dartx.get](1280).firstMatch("abc#not comment\n    literal     "), 3730);
    v8_regexp_utils.assertNull(res[dartx.get](1281).firstMatch("abc#not comment\n    literal     "), 3731);
    v8_regexp_utils.assertNull(res[dartx.get](1282).firstMatch("abc#not comment\n    literal     "), 3732);
    v8_regexp_utils.assertNull(res[dartx.get](1283).firstMatch("abc#not comment\n    literal     "), 3733);
    v8_regexp_utils.assertNull(res[dartx.get](1284).firstMatch("abc\\$xyz"), 3734);
    v8_regexp_utils.assertNull(res[dartx.get](1285).firstMatch("abc\\$xyz"), 3735);
    v8_regexp_utils.assertNull(res[dartx.get](1286).firstMatch("abc"), 3736);
    v8_regexp_utils.assertNull(res[dartx.get](1286).firstMatch("*** Failers"), 3737);
    v8_regexp_utils.assertNull(res[dartx.get](1286).firstMatch("xyzabc  "), 3738);
    v8_regexp_utils.assertNull(res[dartx.get](1287).firstMatch("abc1abc2xyzabc3"), 3739);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](1288).firstMatch("abc1abc2xyzabc3 "), 3740);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("*** Failers "), 3742);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("Xa b c d Y "), 3743);
    v8_regexp_utils.assertToStringEquals("abcY", res[dartx.get](1288).firstMatch("XabcY"), 3744);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("AxyzB "), 3745);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("XabCY"), 3746);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("*** Failers"), 3747);
    v8_regexp_utils.assertToStringEquals("abcY", res[dartx.get](1288).firstMatch("XabcY  "), 3748);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("abCE"), 3749);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("DE"), 3750);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("*** Failers"), 3751);
    v8_regexp_utils.assertToStringEquals("abcE", res[dartx.get](1288).firstMatch("abcE"), 3752);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("abCe  "), 3753);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("dE"), 3754);
    v8_regexp_utils.assertNull(res[dartx.get](1288).firstMatch("De    "), 3755);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("z"), 3756);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("a"), 3757);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("-"), 3758);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("d"), 3759);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("] "), 3760);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("*** Failers"), 3761);
    v8_regexp_utils.assertNull(res[dartx.get](1289).firstMatch("b     "), 3762);
    v8_regexp_utils.assertToStringEquals("z", res[dartx.get](1290).firstMatch("z"), 3763);
    v8_regexp_utils.assertToStringEquals("C", res[dartx.get](1290).firstMatch("C "), 3764);
    v8_regexp_utils.assertToStringEquals("M", res[dartx.get](1291).firstMatch("M "), 3765);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch(""), 3766);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("REGular"), 3767);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("regulaer"), 3768);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("Regex  "), 3769);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("regul�r "), 3770);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("�����"), 3771);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("�����"), 3772);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("�����"), 3773);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("�����"), 3774);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("XAZXB"), 3775);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("123a"), 3776);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("ac"), 3777);
    v8_regexp_utils.assertToStringEquals("b,", res[dartx.get](1292).firstMatch("bbbbc"), 3778);
    v8_regexp_utils.assertToStringEquals("ab,a", res[dartx.get](1292).firstMatch("abc"), 3779);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("*** Failers"), 3780);
    v8_regexp_utils.assertToStringEquals("b,", res[dartx.get](1292).firstMatch("bca"), 3781);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch(""), 3782);
    v8_regexp_utils.assertToStringEquals("ab,a", res[dartx.get](1292).firstMatch("abc"), 3783);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("*** Failers"), 3784);
    v8_regexp_utils.assertToStringEquals("b,", res[dartx.get](1292).firstMatch("bca"), 3785);
    v8_regexp_utils.assertToStringEquals("ab,a", res[dartx.get](1292).firstMatch("abc"), 3786);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("*** Failers"), 3787);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("def  "), 3788);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch(""), 3789);
    v8_regexp_utils.assertToStringEquals("ab,a", res[dartx.get](1292).firstMatch("abc"), 3790);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("*** Failers"), 3791);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch("def  "), 3792);
    v8_regexp_utils.assertNull(res[dartx.get](1292).firstMatch(""), 3793);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](1293).firstMatch("this is a line\nbreak"), 3794);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](1293).firstMatch("line one\nthis is a line\nbreak in the second line "), 3795);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](1294).firstMatch("this is a line\nbreak"), 3796);
    v8_regexp_utils.assertNull(res[dartx.get](1294).firstMatch("** Failers "), 3797);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](1294).firstMatch("line one\nthis is a line\nbreak in the second line "), 3798);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](1295).firstMatch("this is a line\nbreak"), 3799);
    v8_regexp_utils.assertNull(res[dartx.get](1295).firstMatch("** Failers "), 3800);
    v8_regexp_utils.assertToStringEquals("line\nbreak", res[dartx.get](1295).firstMatch("line one\nthis is a line\nbreak in the second line "), 3801);
    v8_regexp_utils.assertNull(res[dartx.get](1296).firstMatch("123P"), 3802);
    v8_regexp_utils.assertNull(res[dartx.get](1296).firstMatch("a4PR"), 3803);
    v8_regexp_utils.assertNull(res[dartx.get](1297).firstMatch("123P"), 3804);
    v8_regexp_utils.assertNull(res[dartx.get](1297).firstMatch("4PR"), 3805);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("a\nb\nc\n"), 3806);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch(" "), 3807);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("A\nC\nC\n "), 3808);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("AB"), 3809);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("aB  "), 3810);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("AB"), 3811);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("aB  "), 3812);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("AB"), 3813);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("aB  "), 3814);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("AB"), 3815);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1298).firstMatch("aB  "), 3816);
    v8_regexp_utils.assertToStringEquals("Content-Type:xxxxxyyy ", res[dartx.get](1299).firstMatch("Content-Type:xxxxxyyy "), 3817);
    v8_regexp_utils.assertToStringEquals("Content-Type:xxxxxyyyz", res[dartx.get](1300).firstMatch("Content-Type:xxxxxyyyz"), 3818);
    v8_regexp_utils.assertToStringEquals("Content-Type:xxxyyy ", res[dartx.get](1301).firstMatch("Content-Type:xxxyyy "), 3819);
    v8_regexp_utils.assertToStringEquals("Content-Type:xxxyyyz", res[dartx.get](1302).firstMatch("Content-Type:xxxyyyz"), 3820);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\nabc"), 3821);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\nabc<lf>"), 3822);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\r\nabc<lf>"), 3823);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\rabc<cr>"), 3824);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\r\nabc<crlf>"), 3825);
    v8_regexp_utils.assertNull(res[dartx.get](1303).firstMatch("** Failers "), 3826);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\nabc<cr>"), 3827);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\r\nabc<cr>"), 3828);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\nabc<crlf>"), 3829);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\rabc<crlf>"), 3830);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1303).firstMatch("xyz\rabc<lf>"), 3831);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc"), 3832);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\n "), 3833);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\npqr "), 3834);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\r<cr> "), 3835);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\rpqr<cr> "), 3836);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\r\n<crlf> "), 3837);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\r\npqr<crlf> "), 3838);
    v8_regexp_utils.assertNull(res[dartx.get](1304).firstMatch("** Failers"), 3839);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\r "), 3840);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\rpqr "), 3841);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\r\n "), 3842);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1304).firstMatch("xyzabc\r\npqr "), 3843);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1305).firstMatch("xyz\rabcdef"), 3844);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1305).firstMatch("xyz\nabcdef<lf>"), 3845);
    v8_regexp_utils.assertNull(res[dartx.get](1305).firstMatch("** Failers  "), 3846);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1305).firstMatch("xyz\nabcdef"), 3847);
    v8_regexp_utils.assertNull(res[dartx.get](1305).firstMatch("   "), 3848);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1306).firstMatch("xyz\nabcdef"), 3849);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1306).firstMatch("xyz\rabcdef<cr>"), 3850);
    v8_regexp_utils.assertNull(res[dartx.get](1306).firstMatch("** Failers  "), 3851);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1306).firstMatch("xyz\rabcdef"), 3852);
    v8_regexp_utils.assertNull(res[dartx.get](1306).firstMatch("   "), 3853);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1307).firstMatch("xyz\r\nabcdef"), 3854);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1307).firstMatch("xyz\rabcdef<cr>"), 3855);
    v8_regexp_utils.assertNull(res[dartx.get](1307).firstMatch("** Failers  "), 3856);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1307).firstMatch("xyz\rabcdef"), 3857);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1308).firstMatch("abc\ndef"), 3858);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1308).firstMatch("abc\rdef"), 3859);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1308).firstMatch("abc\r\ndef"), 3860);
    v8_regexp_utils.assertToStringEquals("<cr>abc", res[dartx.get](1308).firstMatch("<cr>abc\ndef"), 3861);
    v8_regexp_utils.assertToStringEquals("<cr>abc", res[dartx.get](1308).firstMatch("<cr>abc\rdef"), 3862);
    v8_regexp_utils.assertToStringEquals("<cr>abc", res[dartx.get](1308).firstMatch("<cr>abc\r\ndef"), 3863);
    v8_regexp_utils.assertToStringEquals("<crlf>abc", res[dartx.get](1308).firstMatch("<crlf>abc\ndef"), 3864);
    v8_regexp_utils.assertToStringEquals("<crlf>abc", res[dartx.get](1308).firstMatch("<crlf>abc\rdef"), 3865);
    v8_regexp_utils.assertToStringEquals("<crlf>abc", res[dartx.get](1308).firstMatch("<crlf>abc\r\ndef"), 3866);
    v8_regexp_utils.assertNull(res[dartx.get](1309).firstMatch("abc\ndef"), 3867);
    v8_regexp_utils.assertNull(res[dartx.get](1309).firstMatch("abc\rdef"), 3868);
    v8_regexp_utils.assertNull(res[dartx.get](1309).firstMatch("abc\r\ndef"), 3869);
    v8_regexp_utils.assertToStringEquals("abc=xyz\\,", res[dartx.get](1310).firstMatch("abc=xyz\\\npqr"), 3870);
    v8_regexp_utils.assertToStringEquals("aaaa,a,", res[dartx.get](1311).firstMatch("aaaa"), 3871);
    v8_regexp_utils.assertToStringEquals("aaaa", res[dartx.get](1312).firstMatch("aaaa"), 3872);
    v8_regexp_utils.assertToStringEquals("aaaa,a,", res[dartx.get](1313).firstMatch("aaaa"), 3873);
    v8_regexp_utils.assertToStringEquals("aaaa", res[dartx.get](1314).firstMatch("aaaa"), 3874);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("a\rb"), 3875);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("a\nb<cr> "), 3876);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("** Failers"), 3877);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("a\nb"), 3878);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("a\nb<any>"), 3879);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("a\rb<cr>   "), 3880);
    v8_regexp_utils.assertNull(res[dartx.get](1317).firstMatch("a\rb<any>   "), 3881);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](1318).firstMatch("abc1 \nabc2 \vabc3xx \fabc4 \rabc5xx \r\nabc6 abc7 JUNK"), 3882);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](1319).firstMatch("abc1\n abc2\v abc3\f abc4\r abc5\r\n abc6 abc9"), 3883);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("a\nb"), 3884);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("a\rb"), 3885);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("a\r\nb"), 3886);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("a\vb"), 3887);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("a\fb"), 3888);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("ab   "), 3889);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("** Failers"), 3890);
    v8_regexp_utils.assertNull(res[dartx.get](1320).firstMatch("a\n\rb    "), 3891);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1321).firstMatch("ab"), 3892);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\nb"), 3893);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\rb"), 3894);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\r\nb"), 3895);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\vb"), 3896);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\fb"), 3897);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("ab   "), 3898);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\n\rb    "), 3899);
    v8_regexp_utils.assertNull(res[dartx.get](1321).firstMatch("a\n\r\fb "), 3900);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\nb"), 3901);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\rb"), 3902);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\r\nb"), 3903);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\vb"), 3904);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\fb"), 3905);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("ab   "), 3906);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\n\rb    "), 3907);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("a\n\r\fb "), 3908);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("** Failers"), 3909);
    v8_regexp_utils.assertNull(res[dartx.get](1322).firstMatch("ab  "), 3910);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\nb"), 3911);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\n\rb"), 3912);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\n\rb"), 3913);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\r\n\r\nb "), 3914);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\r\n\r\n\r\nb "), 3915);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\n\r\n\rb"), 3916);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\n\n\r\nb "), 3917);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("** Failers"), 3918);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\n\n\n\rb"), 3919);
    v8_regexp_utils.assertNull(res[dartx.get](1323).firstMatch("a\r"), 3920);
    v8_regexp_utils.assertToStringEquals("aRb", res[dartx.get](1324).firstMatch("aRb"), 3921);
    v8_regexp_utils.assertNull(res[dartx.get](1324).firstMatch("** Failers"), 3922);
    v8_regexp_utils.assertNull(res[dartx.get](1324).firstMatch("a\nb  "), 3923);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](1325).firstMatch("afoo"), 3924);
    v8_regexp_utils.assertNull(res[dartx.get](1325).firstMatch("** Failers "), 3925);
    v8_regexp_utils.assertNull(res[dartx.get](1325).firstMatch("\r\nfoo "), 3926);
    v8_regexp_utils.assertNull(res[dartx.get](1325).firstMatch("\nfoo "), 3927);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](1326).firstMatch("afoo"), 3928);
    v8_regexp_utils.assertNull(res[dartx.get](1326).firstMatch("\nfoo "), 3929);
    v8_regexp_utils.assertNull(res[dartx.get](1326).firstMatch("** Failers "), 3930);
    v8_regexp_utils.assertNull(res[dartx.get](1326).firstMatch("\r\nfoo "), 3931);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](1327).firstMatch("afoo"), 3932);
    v8_regexp_utils.assertNull(res[dartx.get](1327).firstMatch("** Failers "), 3933);
    v8_regexp_utils.assertNull(res[dartx.get](1327).firstMatch("\nfoo "), 3934);
    v8_regexp_utils.assertNull(res[dartx.get](1327).firstMatch("\r\nfoo "), 3935);
    v8_regexp_utils.assertToStringEquals("afoo", res[dartx.get](1328).firstMatch("afoo"), 3936);
    v8_regexp_utils.assertNull(res[dartx.get](1328).firstMatch("\r\nfoo "), 3937);
    v8_regexp_utils.assertNull(res[dartx.get](1328).firstMatch("\nfoo "), 3938);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1329).firstMatch("abc\r\rxyz"), 3939);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1329).firstMatch("abc\n\rxyz  "), 3940);
    v8_regexp_utils.assertNull(res[dartx.get](1329).firstMatch("** Failers "), 3941);
    v8_regexp_utils.assertToStringEquals("", res[dartx.get](1329).firstMatch("abc\r\nxyz"), 3942);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1330).firstMatch("XABC"), 3943);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("** Failers "), 3944);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1330).firstMatch("XABCB"), 3945);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("abc\r\n\r\n"), 3946);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("abc\r\n\r\n"), 3947);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("abc\r\n\r\n"), 3948);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(?|(abc)|(xyz))"), VoidToRegExp()), 3949);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(x)(?|(abc)|(xyz))(x)"), VoidToRegExp()), 3950);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("xabcx"), 3951);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("xxyzx "), 3952);
    v8_regexp_utils.assertThrows(dart.fn(() => core.RegExp.new("(x)(?|(abc)(pqr)|(xyz))(x)"), VoidToRegExp()), 3953);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("xabcpqrx"), 3954);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("xxyzx "), 3955);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("abcabc"), 3956);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("xyzabc "), 3957);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("** Failers "), 3958);
    v8_regexp_utils.assertNull(res[dartx.get](1330).firstMatch("xyzxyz "), 3959);
    v8_regexp_utils.assertNull(res[dartx.get](1331).firstMatch("X X\n"), 3960);
    v8_regexp_utils.assertNull(res[dartx.get](1331).firstMatch("X\tX\v"), 3961);
    v8_regexp_utils.assertNull(res[dartx.get](1331).firstMatch("** Failers"), 3962);
    v8_regexp_utils.assertNull(res[dartx.get](1331).firstMatch("  X\n   "), 3963);
    v8_regexp_utils.assertNull(res[dartx.get](1332).firstMatch("\t  X\n\v\f\r\n"), 3964);
    v8_regexp_utils.assertNull(res[dartx.get](1332).firstMatch("\t  \n\v\f\r\n"), 3965);
    v8_regexp_utils.assertNull(res[dartx.get](1332).firstMatch("\t  \n\v\f"), 3966);
    v8_regexp_utils.assertNull(res[dartx.get](1332).firstMatch("** Failers "), 3967);
    v8_regexp_utils.assertNull(res[dartx.get](1332).firstMatch("\t  \n\v"), 3968);
    v8_regexp_utils.assertNull(res[dartx.get](1332).firstMatch(" "), 3969);
    v8_regexp_utils.assertNull(res[dartx.get](1333).firstMatch("XY  ABCDE"), 3970);
    v8_regexp_utils.assertNull(res[dartx.get](1333).firstMatch("XY  PQR ST "), 3971);
    v8_regexp_utils.assertNull(res[dartx.get](1334).firstMatch("XY  AB    PQRS"), 3972);
    v8_regexp_utils.assertNull(res[dartx.get](1335).firstMatch(">XNNNYZ"), 3973);
    v8_regexp_utils.assertNull(res[dartx.get](1335).firstMatch(">  X NYQZ"), 3974);
    v8_regexp_utils.assertNull(res[dartx.get](1335).firstMatch("** Failers"), 3975);
    v8_regexp_utils.assertNull(res[dartx.get](1335).firstMatch(">XYZ   "), 3976);
    v8_regexp_utils.assertNull(res[dartx.get](1335).firstMatch(">  X NY Z"), 3977);
    v8_regexp_utils.assertNull(res[dartx.get](1336).firstMatch(">XY\nZ\nA\vNN\f"), 3978);
    v8_regexp_utils.assertNull(res[dartx.get](1336).firstMatch(">\n\rX\nY\n\vZZZ\nAAA\vNNN\f"), 3979);
    v8_regexp_utils.assertNull(res[dartx.get](1337).firstMatch("\r\nA"), 3980);
    v8_regexp_utils.assertToStringEquals("\nA", res[dartx.get](1338).firstMatch("\r\nA "), 3981);
    v8_regexp_utils.assertToStringEquals("\nA", res[dartx.get](1339).firstMatch("\r\nA "), 3982);
    v8_regexp_utils.assertToStringEquals("\nA,\n", res[dartx.get](1340).firstMatch("\r\nA "), 3983);
    v8_regexp_utils.assertNull(res[dartx.get](1341).firstMatch("a\rb"), 3984);
    v8_regexp_utils.assertNull(res[dartx.get](1341).firstMatch("a\nb"), 3985);
    v8_regexp_utils.assertNull(res[dartx.get](1341).firstMatch("a\r\nb"), 3986);
    v8_regexp_utils.assertNull(res[dartx.get](1341).firstMatch("** Failers"), 3987);
    v8_regexp_utils.assertNull(res[dartx.get](1341).firstMatch("ab"), 3988);
    v8_regexp_utils.assertNull(res[dartx.get](1341).firstMatch("a\vb     "), 3989);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("a\rb"), 3990);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("a\nb"), 3991);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("a\r\nb"), 3992);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("ab"), 3993);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("a\vb     "), 3994);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("** Failers "), 3995);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("ab<bsr_anycrlf>"), 3996);
    v8_regexp_utils.assertNull(res[dartx.get](1342).firstMatch("a\vb<bsr_anycrlf>"), 3997);
    v8_regexp_utils.assertNull(res[dartx.get](1343).firstMatch("a\rb"), 3998);
    v8_regexp_utils.assertNull(res[dartx.get](1343).firstMatch("a\nb"), 3999);
    v8_regexp_utils.assertNull(res[dartx.get](1343).firstMatch("a\r\nb"), 4000);
    v8_regexp_utils.assertNull(res[dartx.get](1343).firstMatch("** Failers"), 4001);
    v8_regexp_utils.assertNull(res[dartx.get](1343).firstMatch("ab"), 4002);
    v8_regexp_utils.assertNull(res[dartx.get](1343).firstMatch("a\vb     "), 4003);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("a\rb"), 4004);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("a\nb"), 4005);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("a\r\nb"), 4006);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("ab"), 4007);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("a\vb     "), 4008);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("** Failers "), 4009);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("ab<bsr_anycrlf>"), 4010);
    v8_regexp_utils.assertNull(res[dartx.get](1344).firstMatch("a\vb<bsr_anycrlf>"), 4011);
    v8_regexp_utils.assertNull(res[dartx.get](1345).firstMatch("a\r\n\nb"), 4012);
    v8_regexp_utils.assertNull(res[dartx.get](1345).firstMatch("a\n\r\rb"), 4013);
    v8_regexp_utils.assertNull(res[dartx.get](1345).firstMatch("a\r\n\r\n\r\n\r\nb"), 4014);
    v8_regexp_utils.assertNull(res[dartx.get](1345).firstMatch("** Failers"), 4015);
    v8_regexp_utils.assertNull(res[dartx.get](1345).firstMatch("a85b"), 4016);
    v8_regexp_utils.assertNull(res[dartx.get](1345).firstMatch("a\v bb     "), 4017);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a\r\rb"), 4018);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a\n\n\nb"), 4019);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a\r\n\n\r\rb"), 4020);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a85b"), 4021);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a\v bb     "), 4022);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("** Failers "), 4023);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a\r\r\r\r\rb "), 4024);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a85b<bsr_anycrlf>"), 4025);
    v8_regexp_utils.assertNull(res[dartx.get](1346).firstMatch("a\v bb<bsr_anycrlf>"), 4026);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1347).firstMatch("abc "), 4027);
    v8_regexp_utils.assertNull(res[dartx.get](1348).firstMatch("** Failers"), 4028);
    v8_regexp_utils.assertNull(res[dartx.get](1348).firstMatch("ab"), 4029);
    v8_regexp_utils.assertNull(res[dartx.get](1349).firstMatch("** Failers"), 4030);
    v8_regexp_utils.assertNull(res[dartx.get](1349).firstMatch("ab "), 4031);
    v8_regexp_utils.assertNull(res[dartx.get](1349).firstMatch("** Failers"), 4032);
    v8_regexp_utils.assertNull(res[dartx.get](1349).firstMatch("ab "), 4033);
    v8_regexp_utils.assertToStringEquals("aXb", res[dartx.get](1350).firstMatch("aXb"), 4034);
    v8_regexp_utils.assertToStringEquals("a\nb", res[dartx.get](1350).firstMatch("a\nb "), 4035);
    v8_regexp_utils.assertNull(res[dartx.get](1350).firstMatch("** Failers"), 4036);
    v8_regexp_utils.assertNull(res[dartx.get](1350).firstMatch("ab  "), 4037);
    v8_regexp_utils.assertToStringEquals("aXb", res[dartx.get](1351).firstMatch("aXb"), 4038);
    v8_regexp_utils.assertToStringEquals("a\nX\nXb", res[dartx.get](1351).firstMatch("a\nX\nXb "), 4039);
    v8_regexp_utils.assertNull(res[dartx.get](1351).firstMatch("** Failers"), 4040);
    v8_regexp_utils.assertNull(res[dartx.get](1351).firstMatch("ab  "), 4041);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("ab"), 4042);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("ax{100}b  "), 4043);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("ax{100}x{100}b  "), 4044);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("ax{100}b  "), 4045);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("ax{100}x{100}b  "), 4046);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("*** Failers "), 4047);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch("ab"), 4048);
    v8_regexp_utils.assertNull(res[dartx.get](1352).firstMatch(" "), 4049);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1353).firstMatch("Xoanon"), 4050);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1353).firstMatch("+Xoanon"), 4051);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1353).firstMatch("x{300}Xoanon "), 4052);
    v8_regexp_utils.assertNull(res[dartx.get](1353).firstMatch("*** Failers "), 4053);
    v8_regexp_utils.assertNull(res[dartx.get](1353).firstMatch("YXoanon  "), 4054);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1354).firstMatch("YXoanon"), 4055);
    v8_regexp_utils.assertNull(res[dartx.get](1354).firstMatch("*** Failers"), 4056);
    v8_regexp_utils.assertNull(res[dartx.get](1354).firstMatch("Xoanon"), 4057);
    v8_regexp_utils.assertNull(res[dartx.get](1354).firstMatch("+Xoanon    "), 4058);
    v8_regexp_utils.assertNull(res[dartx.get](1354).firstMatch("x{300}Xoanon "), 4059);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1355).firstMatch("X+oanon"), 4060);
    v8_regexp_utils.assertNull(res[dartx.get](1355).firstMatch("ZXx{300}oanon "), 4061);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1355).firstMatch("FAX "), 4062);
    v8_regexp_utils.assertNull(res[dartx.get](1355).firstMatch("*** Failers "), 4063);
    v8_regexp_utils.assertNull(res[dartx.get](1355).firstMatch("Xoanon  "), 4064);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1356).firstMatch("Xoanon  "), 4065);
    v8_regexp_utils.assertNull(res[dartx.get](1356).firstMatch("*** Failers"), 4066);
    v8_regexp_utils.assertNull(res[dartx.get](1356).firstMatch("X+oanon"), 4067);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1356).firstMatch("ZXx{300}oanon "), 4068);
    v8_regexp_utils.assertNull(res[dartx.get](1356).firstMatch("FAX "), 4069);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](1357).firstMatch("abcd"), 4070);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1357).firstMatch("ax{100}   "), 4071);
    v8_regexp_utils.assertToStringEquals("b", res[dartx.get](1357).firstMatch("ab99"), 4072);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1357).firstMatch("x{123}x{123}45"), 4073);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1357).firstMatch("x{400}x{401}x{402}6  "), 4074);
    v8_regexp_utils.assertToStringEquals("*", res[dartx.get](1357).firstMatch("*** Failers"), 4075);
    v8_regexp_utils.assertToStringEquals("d", res[dartx.get](1357).firstMatch("d99"), 4076);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1357).firstMatch("x{123}x{122}4   "), 4077);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1357).firstMatch("x{400}x{403}6  "), 4078);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1357).firstMatch("x{400}x{401}x{402}x{402}6  "), 4079);
    v8_regexp_utils.assertNull(res[dartx.get](1358).firstMatch("�]"), 4080);
    v8_regexp_utils.assertNull(res[dartx.get](1358).firstMatch("�"), 4081);
    v8_regexp_utils.assertNull(res[dartx.get](1358).firstMatch("���"), 4082);
    v8_regexp_utils.assertNull(res[dartx.get](1358).firstMatch("���?"), 4083);
    v8_regexp_utils.assertToStringEquals("acb", res[dartx.get](1359).firstMatch("acb"), 4084);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1359).firstMatch("ab"), 4085);
    v8_regexp_utils.assertNull(res[dartx.get](1359).firstMatch("ax{100}b "), 4086);
    v8_regexp_utils.assertNull(res[dartx.get](1359).firstMatch("*** Failers"), 4087);
    v8_regexp_utils.assertNull(res[dartx.get](1359).firstMatch("a\nb  "), 4088);
    v8_regexp_utils.assertNull(res[dartx.get](1360).firstMatch("ax{4000}xyb "), 4089);
    v8_regexp_utils.assertNull(res[dartx.get](1360).firstMatch("ax{4000}yb "), 4090);
    v8_regexp_utils.assertNull(res[dartx.get](1360).firstMatch("ax{4000}x{100}yb "), 4091);
    v8_regexp_utils.assertNull(res[dartx.get](1360).firstMatch("*** Failers"), 4092);
    v8_regexp_utils.assertNull(res[dartx.get](1360).firstMatch("ax{4000}b "), 4093);
    v8_regexp_utils.assertNull(res[dartx.get](1360).firstMatch("ac\ncb "), 4094);
    v8_regexp_utils.assertToStringEquals("aÀ,,À", res[dartx.get](1361).firstMatch("aÀb"), 4095);
    v8_regexp_utils.assertToStringEquals("ax,,x", res[dartx.get](1362).firstMatch("ax{100}b"), 4096);
    v8_regexp_utils.assertToStringEquals("aÀb,À,b", res[dartx.get](1363).firstMatch("aÀb"), 4097);
    v8_regexp_utils.assertToStringEquals("ax{100}b,x{100},b", res[dartx.get](1364).firstMatch("ax{100}b"), 4098);
    v8_regexp_utils.assertToStringEquals("aÀ,À,", res[dartx.get](1365).firstMatch("aÀbcd"), 4099);
    v8_regexp_utils.assertToStringEquals("ax{,x,{", res[dartx.get](1366).firstMatch("ax{240}bcd"), 4100);
    v8_regexp_utils.assertToStringEquals("aÀ,À,", res[dartx.get](1367).firstMatch("aÀbcd"), 4101);
    v8_regexp_utils.assertToStringEquals("ax{,x,{", res[dartx.get](1368).firstMatch("ax{240}bcd"), 4102);
    v8_regexp_utils.assertToStringEquals("aÀ,,À", res[dartx.get](1369).firstMatch("aÀbcd"), 4103);
    v8_regexp_utils.assertToStringEquals("ax,,x", res[dartx.get](1370).firstMatch("ax{240}bcd"), 4104);
    v8_regexp_utils.assertNull(res[dartx.get](1371).firstMatch("ax{1234}xyb "), 4105);
    v8_regexp_utils.assertNull(res[dartx.get](1371).firstMatch("ax{1234}x{4321}yb "), 4106);
    v8_regexp_utils.assertNull(res[dartx.get](1371).firstMatch("ax{1234}x{4321}x{3412}b "), 4107);
    v8_regexp_utils.assertNull(res[dartx.get](1371).firstMatch("*** Failers"), 4108);
    v8_regexp_utils.assertNull(res[dartx.get](1371).firstMatch("ax{1234}b "), 4109);
    v8_regexp_utils.assertNull(res[dartx.get](1371).firstMatch("ac\ncb "), 4110);
    v8_regexp_utils.assertToStringEquals("ax{1234}xyb,x{1234}xy", res[dartx.get](1372).firstMatch("ax{1234}xyb "), 4111);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}yb,x{1234}x{4321}y", res[dartx.get](1372).firstMatch("ax{1234}x{4321}yb "), 4112);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}b,x{1234}x{4321}x{3412}", res[dartx.get](1372).firstMatch("ax{1234}x{4321}x{3412}b "), 4113);
    v8_regexp_utils.assertToStringEquals("axxxxbcdefghijb,xxxxbcdefghij", res[dartx.get](1372).firstMatch("axxxxbcdefghijb "), 4114);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}x{3421}b,x{1234}x{4321}x{3412}x{3421}", res[dartx.get](1372).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 4115);
    v8_regexp_utils.assertNull(res[dartx.get](1372).firstMatch("*** Failers"), 4116);
    v8_regexp_utils.assertToStringEquals("ax{1234}b,x{1234}", res[dartx.get](1372).firstMatch("ax{1234}b "), 4117);
    v8_regexp_utils.assertToStringEquals("ax{1234}xyb,x{1234}xy", res[dartx.get](1373).firstMatch("ax{1234}xyb "), 4118);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}yb,x{1234}x{4321}y", res[dartx.get](1373).firstMatch("ax{1234}x{4321}yb "), 4119);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}b,x{1234}x{4321}x{3412}", res[dartx.get](1373).firstMatch("ax{1234}x{4321}x{3412}b "), 4120);
    v8_regexp_utils.assertToStringEquals("axxxxb,xxxx", res[dartx.get](1373).firstMatch("axxxxbcdefghijb "), 4121);
    v8_regexp_utils.assertToStringEquals("ax{1234}x{4321}x{3412}x{3421}b,x{1234}x{4321}x{3412}x{3421}", res[dartx.get](1373).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 4122);
    v8_regexp_utils.assertNull(res[dartx.get](1373).firstMatch("*** Failers"), 4123);
    v8_regexp_utils.assertToStringEquals("ax{1234}b,x{1234}", res[dartx.get](1373).firstMatch("ax{1234}b "), 4124);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("ax{1234}xyb "), 4125);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("ax{1234}x{4321}yb "), 4126);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("ax{1234}x{4321}x{3412}b "), 4127);
    v8_regexp_utils.assertToStringEquals("axxxxb,xxxx", res[dartx.get](1374).firstMatch("axxxxbcdefghijb "), 4128);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 4129);
    v8_regexp_utils.assertToStringEquals("axbxxb,xbxx", res[dartx.get](1374).firstMatch("axbxxbcdefghijb "), 4130);
    v8_regexp_utils.assertToStringEquals("axxxxxb,xxxxx", res[dartx.get](1374).firstMatch("axxxxxbcdefghijb "), 4131);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("*** Failers"), 4132);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("ax{1234}b "), 4133);
    v8_regexp_utils.assertNull(res[dartx.get](1374).firstMatch("axxxxxxbcdefghijb "), 4134);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{1234}xyb "), 4135);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{1234}x{4321}yb "), 4136);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{1234}x{4321}x{3412}b "), 4137);
    v8_regexp_utils.assertToStringEquals("axxxxb,xxxx", res[dartx.get](1375).firstMatch("axxxxbcdefghijb "), 4138);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{1234}x{4321}x{3412}x{3421}b "), 4139);
    v8_regexp_utils.assertToStringEquals("axbxxb,xbxx", res[dartx.get](1375).firstMatch("axbxxbcdefghijb "), 4140);
    v8_regexp_utils.assertToStringEquals("axxxxxb,xxxxx", res[dartx.get](1375).firstMatch("axxxxxbcdefghijb "), 4141);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("*** Failers"), 4142);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{1234}b "), 4143);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("axxxxxxbcdefghijb "), 4144);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("*** Failers"), 4145);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("x{100}"), 4146);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("aXbcd"), 4147);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{100}bcd"), 4148);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("ax{100000}bcd"), 4149);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("x{100}x{100}x{100}b"), 4150);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("*** Failers "), 4151);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("x{100}x{100}b"), 4152);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("x{ab} "), 4153);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("Â«"), 4154);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("*** Failers "), 4155);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch(" {ab}"), 4156);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("WXYZ"), 4157);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("x{256}XYZ "), 4158);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("*** Failers"), 4159);
    v8_regexp_utils.assertNull(res[dartx.get](1375).firstMatch("XYZ "), 4160);
    v8_regexp_utils.assertToStringEquals("bcd", res[dartx.get](1376).firstMatch("bcd"), 4161);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1377).firstMatch("x{100}bc"), 4163);
    v8_regexp_utils.assertToStringEquals("x{100}bcA", res[dartx.get](1378).firstMatch("x{100}bcAa"), 4164);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1379).firstMatch("x{100}bca"), 4165);
    v8_regexp_utils.assertToStringEquals("bcd", res[dartx.get](1380).firstMatch("bcd"), 4166);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1381).firstMatch("x{100}bc"), 4168);
    v8_regexp_utils.assertToStringEquals("x{100}bc", res[dartx.get](1382).firstMatch("x{100}bcAa"), 4169);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1383).firstMatch("x{100}bca"), 4170);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcd"), 4171);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcd"), 4172);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1383).firstMatch("x{100}x{100} "), 4173);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1383).firstMatch("x{100}x{100} "), 4174);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1383).firstMatch("x{100}x{100}x{100}x{100} "), 4175);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abce"), 4176);
    v8_regexp_utils.assertToStringEquals("x{", res[dartx.get](1383).firstMatch("x{100}x{100}x{100}x{100} "), 4177);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcdx{100}x{100}x{100}x{100} "), 4178);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcdx{100}x{100}x{100}x{100} "), 4179);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcdx{100}x{100}x{100}x{100} "), 4180);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcdx{100}x{100}x{100}XX"), 4181);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcdx{100}x{100}x{100}x{100}x{100}x{100}x{100}XX"), 4182);
    v8_regexp_utils.assertNull(res[dartx.get](1383).firstMatch("abcdx{100}x{100}x{100}x{100}x{100}x{100}x{100}XX"), 4183);
    v8_regexp_utils.assertToStringEquals("Xy", res[dartx.get](1383).firstMatch("Xyyyax{100}x{100}bXzzz"), 4184);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1386).firstMatch("1X2"), 4185);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1386).firstMatch("1x{100}2 "), 4186);
    v8_regexp_utils.assertToStringEquals(">X", res[dartx.get](1387).firstMatch("> >X Y"), 4187);
    v8_regexp_utils.assertToStringEquals(">x", res[dartx.get](1387).firstMatch("> >x{100} Y"), 4188);
    v8_regexp_utils.assertToStringEquals("1", res[dartx.get](1388).firstMatch("x{100}3"), 4189);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](1389).firstMatch("x{100} X"), 4190);
    v8_regexp_utils.assertToStringEquals("abcd", res[dartx.get](1390).firstMatch("12abcd34"), 4191);
    v8_regexp_utils.assertToStringEquals("*** Failers", res[dartx.get](1390).firstMatch("*** Failers"), 4192);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1390).firstMatch("1234  "), 4193);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1391).firstMatch("12abcd34"), 4194);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1391).firstMatch("12ab34"), 4195);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](1391).firstMatch("*** Failers  "), 4196);
    v8_regexp_utils.assertNull(res[dartx.get](1391).firstMatch("1234"), 4197);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1391).firstMatch("12a34  "), 4198);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1392).firstMatch("12abcd34"), 4199);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1392).firstMatch("12ab34"), 4200);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1392).firstMatch("*** Failers  "), 4201);
    v8_regexp_utils.assertNull(res[dartx.get](1392).firstMatch("1234"), 4202);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1392).firstMatch("12a34  "), 4203);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1393).firstMatch("12abcd34"), 4204);
    v8_regexp_utils.assertNull(res[dartx.get](1393).firstMatch("*** Failers"), 4205);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1394).firstMatch("12abcd34"), 4206);
    v8_regexp_utils.assertToStringEquals("123", res[dartx.get](1394).firstMatch("1234abcd"), 4207);
    v8_regexp_utils.assertNull(res[dartx.get](1394).firstMatch("*** Failers  "), 4208);
    v8_regexp_utils.assertNull(res[dartx.get](1394).firstMatch("1.4 "), 4209);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1395).firstMatch("12abcd34"), 4210);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1395).firstMatch("1234abcd"), 4211);
    v8_regexp_utils.assertNull(res[dartx.get](1395).firstMatch("*** Failers  "), 4212);
    v8_regexp_utils.assertNull(res[dartx.get](1395).firstMatch("1.4 "), 4213);
    v8_regexp_utils.assertToStringEquals("12abcd34", res[dartx.get](1396).firstMatch("12abcd34"), 4214);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](1396).firstMatch("*** Failers"), 4215);
    v8_regexp_utils.assertNull(res[dartx.get](1396).firstMatch("     "), 4216);
    v8_regexp_utils.assertToStringEquals("12a", res[dartx.get](1397).firstMatch("12abcd34"), 4217);
    v8_regexp_utils.assertToStringEquals("123", res[dartx.get](1397).firstMatch("1234abcd"), 4218);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](1397).firstMatch("*** Failers"), 4219);
    v8_regexp_utils.assertNull(res[dartx.get](1397).firstMatch("       "), 4220);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1398).firstMatch("12abcd34"), 4221);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1398).firstMatch("1234abcd"), 4222);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1398).firstMatch("*** Failers"), 4223);
    v8_regexp_utils.assertNull(res[dartx.get](1398).firstMatch("       "), 4224);
    v8_regexp_utils.assertToStringEquals(">      <", res[dartx.get](1399).firstMatch("12>      <34"), 4225);
    v8_regexp_utils.assertNull(res[dartx.get](1399).firstMatch("*** Failers"), 4226);
    v8_regexp_utils.assertToStringEquals(">  <", res[dartx.get](1400).firstMatch("ab>  <cd"), 4227);
    v8_regexp_utils.assertToStringEquals(">   <", res[dartx.get](1400).firstMatch("ab>   <ce"), 4228);
    v8_regexp_utils.assertNull(res[dartx.get](1400).firstMatch("*** Failers"), 4229);
    v8_regexp_utils.assertNull(res[dartx.get](1400).firstMatch("ab>    <cd "), 4230);
    v8_regexp_utils.assertToStringEquals(">  <", res[dartx.get](1401).firstMatch("ab>  <cd"), 4231);
    v8_regexp_utils.assertToStringEquals(">   <", res[dartx.get](1401).firstMatch("ab>   <ce"), 4232);
    v8_regexp_utils.assertNull(res[dartx.get](1401).firstMatch("*** Failers"), 4233);
    v8_regexp_utils.assertNull(res[dartx.get](1401).firstMatch("ab>    <cd "), 4234);
    v8_regexp_utils.assertToStringEquals("12", res[dartx.get](1402).firstMatch("12      34"), 4235);
    v8_regexp_utils.assertToStringEquals("Failers", res[dartx.get](1402).firstMatch("*** Failers"), 4236);
    v8_regexp_utils.assertNull(res[dartx.get](1402).firstMatch("+++=*! "), 4237);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1403).firstMatch("ab  cd"), 4238);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1403).firstMatch("abcd ce"), 4239);
    v8_regexp_utils.assertToStringEquals("Fai", res[dartx.get](1403).firstMatch("*** Failers"), 4240);
    v8_regexp_utils.assertNull(res[dartx.get](1403).firstMatch("a.b.c"), 4241);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1404).firstMatch("ab  cd"), 4242);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1404).firstMatch("abcd ce"), 4243);
    v8_regexp_utils.assertToStringEquals("Fa", res[dartx.get](1404).firstMatch("*** Failers"), 4244);
    v8_regexp_utils.assertNull(res[dartx.get](1404).firstMatch("a.b.c"), 4245);
    v8_regexp_utils.assertToStringEquals("====", res[dartx.get](1405).firstMatch("12====34"), 4246);
    v8_regexp_utils.assertToStringEquals("*** ", res[dartx.get](1405).firstMatch("*** Failers"), 4247);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](1405).firstMatch("abcd "), 4248);
    v8_regexp_utils.assertToStringEquals("===", res[dartx.get](1406).firstMatch("ab====cd"), 4249);
    v8_regexp_utils.assertToStringEquals("==", res[dartx.get](1406).firstMatch("ab==cd"), 4250);
    v8_regexp_utils.assertToStringEquals("***", res[dartx.get](1406).firstMatch("*** Failers"), 4251);
    v8_regexp_utils.assertNull(res[dartx.get](1406).firstMatch("a.b.c"), 4252);
    v8_regexp_utils.assertToStringEquals("==", res[dartx.get](1407).firstMatch("ab====cd"), 4253);
    v8_regexp_utils.assertToStringEquals("==", res[dartx.get](1407).firstMatch("ab==cd"), 4254);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4255);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("a.b.c"), 4256);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}"), 4257);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("Zx{100}"), 4258);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}Z"), 4259);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers "), 4260);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("Zx{100}"), 4261);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}"), 4262);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}Z"), 4263);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers "), 4264);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abcx{200}X"), 4265);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abcx{100}X "), 4266);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4267);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("X  "), 4268);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abcx{200}X"), 4269);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abcx{100}X "), 4270);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abQX "), 4271);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4272);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("X  "), 4273);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abcx{100}x{200}x{100}X"), 4274);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4275);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("abcx{200}X"), 4276);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("X  "), 4277);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("AX"), 4278);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{150}X"), 4279);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{500}X "), 4280);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4281);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}X"), 4282);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("x{200}X   "), 4283);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("AX"), 4284);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{150}X"), 4285);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{500}X "), 4286);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4287);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}X"), 4288);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("x{200}X   "), 4289);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("QX "), 4290);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("AX"), 4291);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{500}X "), 4292);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4293);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}X"), 4294);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{150}X"), 4295);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("x{200}X   "), 4296);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("z"), 4297);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("Z "), 4298);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{100}"), 4299);
    v8_regexp_utils.assertToStringEquals("**", res[dartx.get](1407).firstMatch("*** Failers"), 4300);
    v8_regexp_utils.assertNull(res[dartx.get](1407).firstMatch("x{102}"), 4301);
    v8_regexp_utils.assertToStringEquals("  ", res[dartx.get](1407).firstMatch("y    "), 4302);
    v8_regexp_utils.assertToStringEquals("ÿ", res[dartx.get](1408).firstMatch(">ÿ<"), 4303);
    v8_regexp_utils.assertNull(res[dartx.get](1409).firstMatch(">x{ff}<"), 4304);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1410).firstMatch("XYZ"), 4305);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1411).firstMatch("XYZ"), 4306);
    v8_regexp_utils.assertToStringEquals("x", res[dartx.get](1411).firstMatch("x{123} "), 4307);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1416).firstMatch("catac"), 4308);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1416).firstMatch("ax{256}a "), 4309);
    v8_regexp_utils.assertToStringEquals(",", res[dartx.get](1416).firstMatch("x{85}"), 4310);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](1417).firstMatch("abc1 \nabc2 \vabc3xx \fabc4 \rabc5xx \r\nabc6 x{0085}abc7 x{2028}abc8 x{2029}abc9 JUNK"), 4311);
    v8_regexp_utils.assertToStringEquals("abc1", res[dartx.get](1418).firstMatch("abc1\n abc2\v abc3\f abc4\r abc5\r\n abc6x{0085} abc7x{2028} abc8x{2029} abc9"), 4312);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("a\nb"), 4313);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("a\rb"), 4314);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("a\r\nb"), 4315);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("a\vb"), 4316);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("a\fb"), 4317);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("ax{85}b   "), 4318);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("ax{2028}b "), 4319);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("ax{2029}b "), 4320);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("** Failers"), 4321);
    v8_regexp_utils.assertNull(res[dartx.get](1419).firstMatch("a\n\rb    "), 4322);
    v8_regexp_utils.assertToStringEquals("ab", res[dartx.get](1420).firstMatch("ab"), 4323);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\nb"), 4324);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\rb"), 4325);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\r\nb"), 4326);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\vb"), 4327);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\fx{2028}x{2029}b"), 4328);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("ax{85}b   "), 4329);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\n\rb    "), 4330);
    v8_regexp_utils.assertNull(res[dartx.get](1420).firstMatch("a\n\rx{85}\fb "), 4331);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\nb"), 4332);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\rb"), 4333);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\r\nb"), 4334);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\vb"), 4335);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\fx{2028}x{2029}b"), 4336);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("ax{85}b   "), 4337);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\n\rb    "), 4338);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("a\n\rx{85}\fb "), 4339);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("** Failers"), 4340);
    v8_regexp_utils.assertNull(res[dartx.get](1421).firstMatch("ab  "), 4341);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\nb"), 4342);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\n\rb"), 4343);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\n\rx{85}b"), 4344);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\r\n\r\nb "), 4345);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\r\n\r\n\r\nb "), 4346);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\n\r\n\rb"), 4347);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\n\n\r\nb "), 4348);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("** Failers"), 4349);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\n\n\n\rb"), 4350);
    v8_regexp_utils.assertNull(res[dartx.get](1422).firstMatch("a\r"), 4351);
    v8_regexp_utils.assertNull(res[dartx.get](1423).firstMatch("\t x{a0}X\n\v\f\r\n"), 4352);
    v8_regexp_utils.assertNull(res[dartx.get](1424).firstMatch(" x{a0}X\n\v\f\r\n"), 4353);
    v8_regexp_utils.assertNull(res[dartx.get](1425).firstMatch(">\t x{a0}X\n\n\n<"), 4354);
    v8_regexp_utils.assertNull(res[dartx.get](1426).firstMatch(">\t x{a0}X\n\n\n<"), 4355);
    v8_regexp_utils.assertNull(res[dartx.get](1427).firstMatch("X X\n"), 4356);
    v8_regexp_utils.assertNull(res[dartx.get](1427).firstMatch("X\tX\v"), 4357);
    v8_regexp_utils.assertNull(res[dartx.get](1427).firstMatch("** Failers"), 4358);
    v8_regexp_utils.assertNull(res[dartx.get](1427).firstMatch("x{a0} X\n   "), 4359);
    v8_regexp_utils.assertNull(res[dartx.get](1428).firstMatch("\t x{a0}X\n\v\f\r\n"), 4360);
    v8_regexp_utils.assertNull(res[dartx.get](1428).firstMatch("\t x{a0}\n\v\f\r\n"), 4361);
    v8_regexp_utils.assertNull(res[dartx.get](1428).firstMatch("\t x{a0}\n\v\f"), 4362);
    v8_regexp_utils.assertNull(res[dartx.get](1428).firstMatch("** Failers "), 4363);
    v8_regexp_utils.assertNull(res[dartx.get](1428).firstMatch("\t x{a0}\n\v"), 4364);
    v8_regexp_utils.assertNull(res[dartx.get](1428).firstMatch(" "), 4365);
    v8_regexp_utils.assertNull(res[dartx.get](1429).firstMatch("x{3001}x{3000}x{2030}x{2028}"), 4366);
    v8_regexp_utils.assertNull(res[dartx.get](1429).firstMatch("Xx{180e}Xx{85}"), 4367);
    v8_regexp_utils.assertNull(res[dartx.get](1429).firstMatch("** Failers"), 4368);
    v8_regexp_utils.assertNull(res[dartx.get](1429).firstMatch("x{2009} X\n   "), 4369);
    v8_regexp_utils.assertNull(res[dartx.get](1430).firstMatch("x{1680}x{180e}x{2007}Xx{2028}x{2029}\f\r\n"), 4370);
    v8_regexp_utils.assertNull(res[dartx.get](1430).firstMatch("\tx{205f}x{a0}\nx{2029}\fx{2028}\n"), 4371);
    v8_regexp_utils.assertNull(res[dartx.get](1430).firstMatch("\t x{202f}\n\v\f"), 4372);
    v8_regexp_utils.assertNull(res[dartx.get](1430).firstMatch("** Failers "), 4373);
    v8_regexp_utils.assertNull(res[dartx.get](1430).firstMatch("\tx{200a}x{a0}x{2028}\v"), 4374);
    v8_regexp_utils.assertNull(res[dartx.get](1430).firstMatch(" "), 4375);
    v8_regexp_utils.assertNull(res[dartx.get](1431).firstMatch("a\rb"), 4376);
    v8_regexp_utils.assertNull(res[dartx.get](1431).firstMatch("a\nb"), 4377);
    v8_regexp_utils.assertNull(res[dartx.get](1431).firstMatch("a\r\nb"), 4378);
    v8_regexp_utils.assertNull(res[dartx.get](1431).firstMatch("** Failers"), 4379);
    v8_regexp_utils.assertNull(res[dartx.get](1431).firstMatch("ax{85}b"), 4380);
    v8_regexp_utils.assertNull(res[dartx.get](1431).firstMatch("a\vb     "), 4381);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("a\rb"), 4382);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("a\nb"), 4383);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("a\r\nb"), 4384);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("ax{85}b"), 4385);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("a\vb     "), 4386);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("** Failers "), 4387);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("ax{85}b<bsr_anycrlf>"), 4388);
    v8_regexp_utils.assertNull(res[dartx.get](1432).firstMatch("a\vb<bsr_anycrlf>"), 4389);
    v8_regexp_utils.assertNull(res[dartx.get](1433).firstMatch("a\rb"), 4390);
    v8_regexp_utils.assertNull(res[dartx.get](1433).firstMatch("a\nb"), 4391);
    v8_regexp_utils.assertNull(res[dartx.get](1433).firstMatch("a\r\nb"), 4392);
    v8_regexp_utils.assertNull(res[dartx.get](1433).firstMatch("** Failers"), 4393);
    v8_regexp_utils.assertNull(res[dartx.get](1433).firstMatch("ax{85}b"), 4394);
    v8_regexp_utils.assertNull(res[dartx.get](1433).firstMatch("a\vb     "), 4395);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("a\rb"), 4396);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("a\nb"), 4397);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("a\r\nb"), 4398);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("ax{85}b"), 4399);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("a\vb     "), 4400);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("** Failers "), 4401);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("ax{85}b<bsr_anycrlf>"), 4402);
    v8_regexp_utils.assertNull(res[dartx.get](1434).firstMatch("a\vb<bsr_anycrlf>"), 4403);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1435).firstMatch("Ax{1ec5}ABCXYZ"), 4404);
    v8_regexp_utils.assertNull(res[dartx.get](1437).firstMatch("AB"), 4405);
    v8_regexp_utils.assertNull(res[dartx.get](1437).firstMatch("*** Failers"), 4406);
    v8_regexp_utils.assertNull(res[dartx.get](1437).firstMatch("A0"), 4407);
    v8_regexp_utils.assertNull(res[dartx.get](1437).firstMatch("00   "), 4408);
    v8_regexp_utils.assertNull(res[dartx.get](1438).firstMatch("AB"), 4409);
    v8_regexp_utils.assertNull(res[dartx.get](1438).firstMatch("Ax{300}BC "), 4410);
    v8_regexp_utils.assertNull(res[dartx.get](1438).firstMatch("Ax{300}x{301}x{302}BC "), 4411);
    v8_regexp_utils.assertNull(res[dartx.get](1438).firstMatch("*** Failers"), 4412);
    v8_regexp_utils.assertNull(res[dartx.get](1438).firstMatch("x{300}  "), 4413);
    v8_regexp_utils.assertNull(res[dartx.get](1439).firstMatch("ABC"), 4414);
    v8_regexp_utils.assertNull(res[dartx.get](1439).firstMatch("Ax{300}Bx{300}x{301}C "), 4415);
    v8_regexp_utils.assertNull(res[dartx.get](1439).firstMatch("Ax{300}x{301}x{302}BC "), 4416);
    v8_regexp_utils.assertNull(res[dartx.get](1439).firstMatch("*** Failers"), 4417);
    v8_regexp_utils.assertNull(res[dartx.get](1439).firstMatch("x{300}  "), 4418);
    v8_regexp_utils.assertNull(res[dartx.get](1440).firstMatch("abcd"), 4419);
    v8_regexp_utils.assertNull(res[dartx.get](1440).firstMatch("a "), 4420);
    v8_regexp_utils.assertNull(res[dartx.get](1440).firstMatch("*** Failers "), 4421);
    v8_regexp_utils.assertNull(res[dartx.get](1441).firstMatch("1234"), 4422);
    v8_regexp_utils.assertNull(res[dartx.get](1441).firstMatch("= "), 4423);
    v8_regexp_utils.assertNull(res[dartx.get](1441).firstMatch("*** Failers "), 4424);
    v8_regexp_utils.assertNull(res[dartx.get](1441).firstMatch("abcd "), 4425);
    v8_regexp_utils.assertNull(res[dartx.get](1442).firstMatch("abcdAx{300}x{301}x{302}"), 4426);
    v8_regexp_utils.assertNull(res[dartx.get](1442).firstMatch("Ax{300}x{301}x{302}"), 4427);
    v8_regexp_utils.assertNull(res[dartx.get](1442).firstMatch("Ax{300}x{301}x{302}Ax{300}x{301}x{302}"), 4428);
    v8_regexp_utils.assertNull(res[dartx.get](1442).firstMatch("a "), 4429);
    v8_regexp_utils.assertNull(res[dartx.get](1442).firstMatch("*** Failers "), 4430);
    v8_regexp_utils.assertNull(res[dartx.get](1442).firstMatch("x{300}x{301}x{302}"), 4431);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1443).firstMatch("abc"), 4432);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1443).firstMatch("Ax{300}abc"), 4433);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1443).firstMatch("Ax{300}x{301}x{302}Ax{300}Ax{300}Ax{300}abcxyz"), 4434);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1443).firstMatch("x{300}abc  "), 4435);
    v8_regexp_utils.assertNull(res[dartx.get](1443).firstMatch("*** Failers"), 4436);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1444).firstMatch("abc"), 4437);
    v8_regexp_utils.assertNull(res[dartx.get](1444).firstMatch("Ax{300}abc"), 4438);
    v8_regexp_utils.assertNull(res[dartx.get](1444).firstMatch("*** Failers"), 4439);
    v8_regexp_utils.assertNull(res[dartx.get](1444).firstMatch("Ax{300}x{301}x{302}Ax{300}Ax{300}Ax{300}abcxyz"), 4440);
    v8_regexp_utils.assertNull(res[dartx.get](1444).firstMatch("x{300}abc  "), 4441);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1445).firstMatch("abc"), 4442);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1445).firstMatch("Ax{300}abc"), 4443);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1445).firstMatch("Ax{300}x{301}x{302}Ax{300}Ax{300}Ax{300}abcxyz"), 4444);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1445).firstMatch("x{300}abc  "), 4445);
    v8_regexp_utils.assertNull(res[dartx.get](1445).firstMatch("*** Failers"), 4446);
    v8_regexp_utils.assertToStringEquals("abc", res[dartx.get](1446).firstMatch("abc"), 4447);
    v8_regexp_utils.assertNull(res[dartx.get](1446).firstMatch("Ax{300}abc"), 4448);
    v8_regexp_utils.assertNull(res[dartx.get](1446).firstMatch("Ax{300}x{301}x{302}Ax{300}Ax{300}Ax{300}abcxyz"), 4449);
    v8_regexp_utils.assertNull(res[dartx.get](1446).firstMatch("*** Failers"), 4450);
    v8_regexp_utils.assertNull(res[dartx.get](1446).firstMatch("x{300}abc  "), 4451);
    v8_regexp_utils.assertNull(res[dartx.get](1447).firstMatch("A=b"), 4452);
    v8_regexp_utils.assertNull(res[dartx.get](1447).firstMatch("=c "), 4453);
    v8_regexp_utils.assertNull(res[dartx.get](1447).firstMatch("*** Failers"), 4454);
    v8_regexp_utils.assertNull(res[dartx.get](1447).firstMatch("1=2 "), 4455);
    v8_regexp_utils.assertNull(res[dartx.get](1447).firstMatch("AAAA=b  "), 4456);
    v8_regexp_utils.assertNull(res[dartx.get](1448).firstMatch("AAAA=b"), 4457);
    v8_regexp_utils.assertNull(res[dartx.get](1448).firstMatch("=c "), 4458);
    v8_regexp_utils.assertNull(res[dartx.get](1448).firstMatch("*** Failers"), 4459);
    v8_regexp_utils.assertNull(res[dartx.get](1448).firstMatch("1=2  "), 4460);
    v8_regexp_utils.assertNull(res[dartx.get](1449).firstMatch("Ax{300}x{301}x{302}Ax{300}x{301}x{302}X"), 4461);
    v8_regexp_utils.assertNull(res[dartx.get](1449).firstMatch("Ax{300}x{301}x{302}Ax{300}x{301}x{302}Ax{300}x{301}x{302}X "), 4462);
    v8_regexp_utils.assertNull(res[dartx.get](1449).firstMatch("*** Failers"), 4463);
    v8_regexp_utils.assertNull(res[dartx.get](1449).firstMatch("X"), 4464);
    v8_regexp_utils.assertNull(res[dartx.get](1449).firstMatch("Ax{300}x{301}x{302}X"), 4465);
    v8_regexp_utils.assertNull(res[dartx.get](1449).firstMatch("Ax{300}x{301}x{302}Ax{300}x{301}x{302}Ax{300}x{301}x{302}Ax{300}x{301}x{302}X"), 4466);
    v8_regexp_utils.assertNull(res[dartx.get](1450).firstMatch("x{c0}x{30f}x{660}x{66c}x{f01}x{1680}<"), 4467);
    v8_regexp_utils.assertNull(res[dartx.get](1450).firstMatch("\npx{300}9!$ < "), 4468);
    v8_regexp_utils.assertNull(res[dartx.get](1450).firstMatch("** Failers "), 4469);
    v8_regexp_utils.assertNull(res[dartx.get](1450).firstMatch("apx{300}9!$ < "), 4470);
    v8_regexp_utils.assertNull(res[dartx.get](1451).firstMatch("X"), 4471);
    v8_regexp_utils.assertNull(res[dartx.get](1451).firstMatch("** Failers "), 4472);
    v8_regexp_utils.assertNull(res[dartx.get](1451).firstMatch(""), 4473);
    v8_regexp_utils.assertNull(res[dartx.get](1452).firstMatch("9"), 4474);
    v8_regexp_utils.assertNull(res[dartx.get](1452).firstMatch("** Failers "), 4475);
    v8_regexp_utils.assertNull(res[dartx.get](1452).firstMatch("x{c0}"), 4476);
    v8_regexp_utils.assertNull(res[dartx.get](1453).firstMatch("X"), 4477);
    v8_regexp_utils.assertNull(res[dartx.get](1453).firstMatch("** Failers "), 4478);
    v8_regexp_utils.assertNull(res[dartx.get](1453).firstMatch("x{30f}"), 4479);
    v8_regexp_utils.assertNull(res[dartx.get](1454).firstMatch("X"), 4480);
    v8_regexp_utils.assertNull(res[dartx.get](1454).firstMatch("** Failers "), 4481);
    v8_regexp_utils.assertNull(res[dartx.get](1454).firstMatch("x{660}"), 4482);
    v8_regexp_utils.assertNull(res[dartx.get](1455).firstMatch("X"), 4483);
    v8_regexp_utils.assertNull(res[dartx.get](1455).firstMatch("** Failers "), 4484);
    v8_regexp_utils.assertNull(res[dartx.get](1455).firstMatch("x{66c}"), 4485);
    v8_regexp_utils.assertNull(res[dartx.get](1456).firstMatch("X"), 4486);
    v8_regexp_utils.assertNull(res[dartx.get](1456).firstMatch("** Failers "), 4487);
    v8_regexp_utils.assertNull(res[dartx.get](1456).firstMatch("x{f01}"), 4488);
    v8_regexp_utils.assertNull(res[dartx.get](1457).firstMatch("X"), 4489);
    v8_regexp_utils.assertNull(res[dartx.get](1457).firstMatch("** Failers "), 4490);
    v8_regexp_utils.assertNull(res[dartx.get](1457).firstMatch("x{1680}"), 4491);
    v8_regexp_utils.assertNull(res[dartx.get](1458).firstMatch("x{017}"), 4492);
    v8_regexp_utils.assertNull(res[dartx.get](1458).firstMatch("x{09f} "), 4493);
    v8_regexp_utils.assertNull(res[dartx.get](1458).firstMatch("** Failers"), 4494);
    v8_regexp_utils.assertNull(res[dartx.get](1458).firstMatch("x{0600} "), 4495);
    v8_regexp_utils.assertNull(res[dartx.get](1459).firstMatch("x{601}"), 4496);
    v8_regexp_utils.assertNull(res[dartx.get](1459).firstMatch("** Failers"), 4497);
    v8_regexp_utils.assertNull(res[dartx.get](1459).firstMatch("x{09f} "), 4498);
    v8_regexp_utils.assertNull(res[dartx.get](1460).firstMatch("** Failers"), 4499);
    v8_regexp_utils.assertNull(res[dartx.get](1460).firstMatch("x{09f} "), 4500);
    v8_regexp_utils.assertNull(res[dartx.get](1461).firstMatch("x{f8ff}"), 4501);
    v8_regexp_utils.assertNull(res[dartx.get](1461).firstMatch("** Failers"), 4502);
    v8_regexp_utils.assertNull(res[dartx.get](1461).firstMatch("x{09f} "), 4503);
    v8_regexp_utils.assertNull(res[dartx.get](1462).firstMatch("?x{dfff}"), 4504);
    v8_regexp_utils.assertNull(res[dartx.get](1462).firstMatch("** Failers"), 4505);
    v8_regexp_utils.assertNull(res[dartx.get](1462).firstMatch("x{09f} "), 4506);
    v8_regexp_utils.assertNull(res[dartx.get](1463).firstMatch("a"), 4507);
    v8_regexp_utils.assertNull(res[dartx.get](1463).firstMatch("** Failers "), 4508);
    v8_regexp_utils.assertNull(res[dartx.get](1463).firstMatch("Z"), 4509);
    v8_regexp_utils.assertNull(res[dartx.get](1463).firstMatch("x{e000}  "), 4510);
    v8_regexp_utils.assertNull(res[dartx.get](1464).firstMatch("x{2b0}"), 4511);
    v8_regexp_utils.assertNull(res[dartx.get](1464).firstMatch("** Failers"), 4512);
    v8_regexp_utils.assertNull(res[dartx.get](1464).firstMatch("a "), 4513);
    v8_regexp_utils.assertNull(res[dartx.get](1465).firstMatch("x{1bb}"), 4514);
    v8_regexp_utils.assertNull(res[dartx.get](1465).firstMatch("** Failers"), 4515);
    v8_regexp_utils.assertNull(res[dartx.get](1465).firstMatch("a "), 4516);
    v8_regexp_utils.assertNull(res[dartx.get](1465).firstMatch("x{2b0}"), 4517);
    v8_regexp_utils.assertNull(res[dartx.get](1466).firstMatch("x{1c5}"), 4518);
    v8_regexp_utils.assertNull(res[dartx.get](1466).firstMatch("** Failers"), 4519);
    v8_regexp_utils.assertNull(res[dartx.get](1466).firstMatch("a "), 4520);
    v8_regexp_utils.assertNull(res[dartx.get](1466).firstMatch("x{2b0}"), 4521);
    v8_regexp_utils.assertNull(res[dartx.get](1467).firstMatch("A"), 4522);
    v8_regexp_utils.assertNull(res[dartx.get](1467).firstMatch("** Failers"), 4523);
    v8_regexp_utils.assertNull(res[dartx.get](1467).firstMatch("x{2b0}"), 4524);
    v8_regexp_utils.assertNull(res[dartx.get](1468).firstMatch("x{903}"), 4525);
    v8_regexp_utils.assertNull(res[dartx.get](1468).firstMatch("** Failers"), 4526);
    v8_regexp_utils.assertNull(res[dartx.get](1468).firstMatch("X"), 4527);
    v8_regexp_utils.assertNull(res[dartx.get](1468).firstMatch("x{300}"), 4528);
    v8_regexp_utils.assertNull(res[dartx.get](1468).firstMatch("   "), 4529);
    v8_regexp_utils.assertNull(res[dartx.get](1469).firstMatch("x{488}"), 4530);
    v8_regexp_utils.assertNull(res[dartx.get](1469).firstMatch("** Failers"), 4531);
    v8_regexp_utils.assertNull(res[dartx.get](1469).firstMatch("X"), 4532);
    v8_regexp_utils.assertNull(res[dartx.get](1469).firstMatch("x{903}"), 4533);
    v8_regexp_utils.assertNull(res[dartx.get](1469).firstMatch("x{300}"), 4534);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("x{300}"), 4535);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("** Failers"), 4536);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("X"), 4537);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("x{903}"), 4538);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("0123456789x{660}x{661}x{662}x{663}x{664}x{665}x{666}x{667}x{668}x{669}x{66a}"), 4539);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("x{6f0}x{6f1}x{6f2}x{6f3}x{6f4}x{6f5}x{6f6}x{6f7}x{6f8}x{6f9}x{6fa}"), 4540);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("x{966}x{967}x{968}x{969}x{96a}x{96b}x{96c}x{96d}x{96e}x{96f}x{970}"), 4541);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("** Failers"), 4542);
    v8_regexp_utils.assertNull(res[dartx.get](1470).firstMatch("X"), 4543);
    v8_regexp_utils.assertNull(res[dartx.get](1471).firstMatch("x{16ee}"), 4544);
    v8_regexp_utils.assertNull(res[dartx.get](1471).firstMatch("** Failers"), 4545);
    v8_regexp_utils.assertNull(res[dartx.get](1471).firstMatch("X"), 4546);
    v8_regexp_utils.assertNull(res[dartx.get](1471).firstMatch("x{966}"), 4547);
    v8_regexp_utils.assertNull(res[dartx.get](1472).firstMatch("x{b2}"), 4548);
    v8_regexp_utils.assertNull(res[dartx.get](1472).firstMatch("x{b3}"), 4549);
    v8_regexp_utils.assertNull(res[dartx.get](1472).firstMatch("** Failers"), 4550);
    v8_regexp_utils.assertNull(res[dartx.get](1472).firstMatch("X"), 4551);
    v8_regexp_utils.assertNull(res[dartx.get](1472).firstMatch("x{16ee}"), 4552);
    v8_regexp_utils.assertNull(res[dartx.get](1473).firstMatch("_"), 4553);
    v8_regexp_utils.assertNull(res[dartx.get](1473).firstMatch("x{203f}"), 4554);
    v8_regexp_utils.assertNull(res[dartx.get](1473).firstMatch("** Failers"), 4555);
    v8_regexp_utils.assertNull(res[dartx.get](1473).firstMatch("X"), 4556);
    v8_regexp_utils.assertNull(res[dartx.get](1473).firstMatch("-"), 4557);
    v8_regexp_utils.assertNull(res[dartx.get](1473).firstMatch("x{58a}"), 4558);
    v8_regexp_utils.assertNull(res[dartx.get](1474).firstMatch("-"), 4559);
    v8_regexp_utils.assertNull(res[dartx.get](1474).firstMatch("x{58a}"), 4560);
    v8_regexp_utils.assertNull(res[dartx.get](1474).firstMatch("** Failers"), 4561);
    v8_regexp_utils.assertNull(res[dartx.get](1474).firstMatch("X"), 4562);
    v8_regexp_utils.assertNull(res[dartx.get](1474).firstMatch("x{203f}"), 4563);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch(")"), 4564);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("]"), 4565);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("}"), 4566);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("x{f3b}"), 4567);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("** Failers"), 4568);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("X"), 4569);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("x{203f}"), 4570);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("("), 4571);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("["), 4572);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("{"), 4573);
    v8_regexp_utils.assertNull(res[dartx.get](1475).firstMatch("x{f3c}"), 4574);
    v8_regexp_utils.assertNull(res[dartx.get](1476).firstMatch("x{bb}"), 4575);
    v8_regexp_utils.assertNull(res[dartx.get](1476).firstMatch("x{2019}"), 4576);
    v8_regexp_utils.assertNull(res[dartx.get](1476).firstMatch("** Failers"), 4577);
    v8_regexp_utils.assertNull(res[dartx.get](1476).firstMatch("X"), 4578);
    v8_regexp_utils.assertNull(res[dartx.get](1476).firstMatch("x{203f}"), 4579);
    v8_regexp_utils.assertNull(res[dartx.get](1477).firstMatch("x{ab}"), 4580);
    v8_regexp_utils.assertNull(res[dartx.get](1477).firstMatch("x{2018}"), 4581);
    v8_regexp_utils.assertNull(res[dartx.get](1477).firstMatch("** Failers"), 4582);
    v8_regexp_utils.assertNull(res[dartx.get](1477).firstMatch("X"), 4583);
    v8_regexp_utils.assertNull(res[dartx.get](1477).firstMatch("x{203f}"), 4584);
    v8_regexp_utils.assertNull(res[dartx.get](1478).firstMatch("!"), 4585);
    v8_regexp_utils.assertNull(res[dartx.get](1478).firstMatch("x{37e}"), 4586);
    v8_regexp_utils.assertNull(res[dartx.get](1478).firstMatch("** Failers"), 4587);
    v8_regexp_utils.assertNull(res[dartx.get](1478).firstMatch("X"), 4588);
    v8_regexp_utils.assertNull(res[dartx.get](1478).firstMatch("x{203f}"), 4589);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("("), 4590);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("["), 4591);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("{"), 4592);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("x{f3c}"), 4593);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("** Failers"), 4594);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("X"), 4595);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch(")"), 4596);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("]"), 4597);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("}"), 4598);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("x{f3b}"), 4599);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("$x{a2}x{a3}x{a4}x{a5}x{a6}"), 4600);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("x{9f2}"), 4601);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("** Failers"), 4602);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("X"), 4603);
    v8_regexp_utils.assertNull(res[dartx.get](1479).firstMatch("x{2c2}"), 4604);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("x{2c2}"), 4605);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("** Failers"), 4606);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("X"), 4607);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("x{9f2}"), 4608);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("+<|~x{ac}x{2044}"), 4609);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("** Failers"), 4610);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("X"), 4611);
    v8_regexp_utils.assertNull(res[dartx.get](1480).firstMatch("x{9f2}"), 4612);
    v8_regexp_utils.assertNull(res[dartx.get](1481).firstMatch("x{a6}"), 4613);
    v8_regexp_utils.assertNull(res[dartx.get](1481).firstMatch("x{482} "), 4614);
    v8_regexp_utils.assertNull(res[dartx.get](1481).firstMatch("** Failers"), 4615);
    v8_regexp_utils.assertNull(res[dartx.get](1481).firstMatch("X"), 4616);
    v8_regexp_utils.assertNull(res[dartx.get](1481).firstMatch("x{9f2}"), 4617);
    v8_regexp_utils.assertNull(res[dartx.get](1482).firstMatch("x{2028}"), 4618);
    v8_regexp_utils.assertNull(res[dartx.get](1482).firstMatch("** Failers"), 4619);
    v8_regexp_utils.assertNull(res[dartx.get](1482).firstMatch("X"), 4620);
    v8_regexp_utils.assertNull(res[dartx.get](1482).firstMatch("x{2029}"), 4621);
    v8_regexp_utils.assertNull(res[dartx.get](1483).firstMatch("x{2029}"), 4622);
    v8_regexp_utils.assertNull(res[dartx.get](1483).firstMatch("** Failers"), 4623);
    v8_regexp_utils.assertNull(res[dartx.get](1483).firstMatch("X"), 4624);
    v8_regexp_utils.assertNull(res[dartx.get](1483).firstMatch("x{2028}"), 4625);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("\\ \\"), 4626);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{a0}"), 4627);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{1680}"), 4628);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{180e}"), 4629);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{2000}"), 4630);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{2001}     "), 4631);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("** Failers"), 4632);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{2028}"), 4633);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("x{200d} "), 4634);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("  x{660}x{661}x{662}ABC"), 4635);
    v8_regexp_utils.assertNull(res[dartx.get](1484).firstMatch("  x{660}x{661}x{662}ABC"), 4636);
    v8_regexp_utils.assertNull(res[dartx.get](1485).firstMatch("  x{660}x{661}x{662}ABC"), 4637);
    v8_regexp_utils.assertNull(res[dartx.get](1486).firstMatch("  x{660}x{661}x{662}ABC"), 4638);
    v8_regexp_utils.assertNull(res[dartx.get](1487).firstMatch("  x{660}x{661}x{662}ABC"), 4639);
    v8_regexp_utils.assertNull(res[dartx.get](1488).firstMatch("  x{660}x{661}x{662}ABC"), 4640);
    v8_regexp_utils.assertNull(res[dartx.get](1489).firstMatch("  x{660}x{661}x{662}ABC"), 4641);
    v8_regexp_utils.assertNull(res[dartx.get](1490).firstMatch("  x{660}x{661}x{662}ABC"), 4642);
    v8_regexp_utils.assertNull(res[dartx.get](1491).firstMatch("  x{660}x{661}x{662}ABC"), 4643);
    v8_regexp_utils.assertNull(res[dartx.get](1492).firstMatch("  x{660}x{661}x{662}ABC"), 4644);
    v8_regexp_utils.assertNull(res[dartx.get](1493).firstMatch("  x{660}x{661}x{662}ABC"), 4645);
    v8_regexp_utils.assertNull(res[dartx.get](1493).firstMatch("  x{660}x{661}x{662}ABC"), 4646);
    v8_regexp_utils.assertNull(res[dartx.get](1493).firstMatch("  x{660}x{661}x{662}ABC"), 4647);
    v8_regexp_utils.assertNull(res[dartx.get](1493).firstMatch("  ** Failers"), 4648);
    v8_regexp_utils.assertNull(res[dartx.get](1493).firstMatch("  x{660}x{661}x{662}ABC"), 4649);
    v8_regexp_utils.assertNull(res[dartx.get](1494).firstMatch("A"), 4650);
    v8_regexp_utils.assertNull(res[dartx.get](1494).firstMatch("ax{10a0}B "), 4651);
    v8_regexp_utils.assertNull(res[dartx.get](1494).firstMatch("** Failers "), 4652);
    v8_regexp_utils.assertNull(res[dartx.get](1494).firstMatch("a"), 4653);
    v8_regexp_utils.assertNull(res[dartx.get](1494).firstMatch("x{1d00}  "), 4654);
    v8_regexp_utils.assertNull(res[dartx.get](1495).firstMatch("1234"), 4655);
    v8_regexp_utils.assertNull(res[dartx.get](1495).firstMatch("** Failers"), 4656);
    v8_regexp_utils.assertNull(res[dartx.get](1495).firstMatch("ABC "), 4657);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("1234"), 4658);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("** Failers"), 4659);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("ABC "), 4660);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("A2XYZ"), 4661);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("123A5XYZPQR"), 4662);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("ABAx{660}XYZpqr"), 4663);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("** Failers"), 4664);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("AXYZ"), 4665);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("XYZ     "), 4666);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("1XYZ"), 4667);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("AB=XYZ.. "), 4668);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("XYZ "), 4669);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("** Failers"), 4670);
    v8_regexp_utils.assertNull(res[dartx.get](1496).firstMatch("WXYZ "), 4671);
    v8_regexp_utils.assertNull(res[dartx.get](1497).firstMatch("1234"), 4672);
    v8_regexp_utils.assertNull(res[dartx.get](1497).firstMatch("1234"), 4673);
    v8_regexp_utils.assertNull(res[dartx.get](1497).firstMatch("12-34"), 4674);
    v8_regexp_utils.assertToStringEquals("{", res[dartx.get](1497).firstMatch("12+x{661}-34  "), 4675);
    v8_regexp_utils.assertNull(res[dartx.get](1497).firstMatch("** Failers"), 4676);
    v8_regexp_utils.assertToStringEquals("d", res[dartx.get](1497).firstMatch("abcd  "), 4677);
    v8_regexp_utils.assertToStringEquals("d", res[dartx.get](1498).firstMatch("abcd"), 4678);
    v8_regexp_utils.assertNull(res[dartx.get](1498).firstMatch("** Failers"), 4679);
    v8_regexp_utils.assertNull(res[dartx.get](1498).firstMatch("1234"), 4680);
    v8_regexp_utils.assertNull(res[dartx.get](1499).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 4681);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](1499).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 4682);
    v8_regexp_utils.assertToStringEquals(" ", res[dartx.get](1499).firstMatch(" "), 4683);
    v8_regexp_utils.assertNull(res[dartx.get](1499).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 4684);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](1499).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 4685);
    v8_regexp_utils.assertNull(res[dartx.get](1500).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 4686);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](1500).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 4687);
    v8_regexp_utils.assertNull(res[dartx.get](1501).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 4688);
    v8_regexp_utils.assertNull(res[dartx.get](1501).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 4689);
    v8_regexp_utils.assertNull(res[dartx.get](1502).firstMatch("11111111111111111111111111111111111111111111111111111111111111111111111"), 4690);
    v8_regexp_utils.assertToStringEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", res[dartx.get](1502).firstMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 4691);
    v8_regexp_utils.assertNull(res[dartx.get](1503).firstMatch("a"), 4692);
    v8_regexp_utils.assertNull(res[dartx.get](1503).firstMatch("A "), 4693);
    v8_regexp_utils.assertNull(res[dartx.get](1504).firstMatch("a"), 4694);
    v8_regexp_utils.assertNull(res[dartx.get](1504).firstMatch("A "), 4695);
    v8_regexp_utils.assertNull(res[dartx.get](1505).firstMatch("A"), 4696);
    v8_regexp_utils.assertNull(res[dartx.get](1505).firstMatch("aZ"), 4697);
    v8_regexp_utils.assertNull(res[dartx.get](1505).firstMatch("** Failers"), 4698);
    v8_regexp_utils.assertNull(res[dartx.get](1505).firstMatch("abc   "), 4699);
    v8_regexp_utils.assertNull(res[dartx.get](1506).firstMatch("A"), 4700);
    v8_regexp_utils.assertNull(res[dartx.get](1506).firstMatch("aZ"), 4701);
    v8_regexp_utils.assertNull(res[dartx.get](1506).firstMatch("** Failers"), 4702);
    v8_regexp_utils.assertNull(res[dartx.get](1506).firstMatch("abc   "), 4703);
    v8_regexp_utils.assertNull(res[dartx.get](1507).firstMatch("a"), 4704);
    v8_regexp_utils.assertNull(res[dartx.get](1507).firstMatch("Az"), 4705);
    v8_regexp_utils.assertNull(res[dartx.get](1507).firstMatch("** Failers"), 4706);
    v8_regexp_utils.assertNull(res[dartx.get](1507).firstMatch("ABC   "), 4707);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("a"), 4708);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Az"), 4709);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("** Failers"), 4710);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("ABC   "), 4711);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{c0}"), 4712);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{e0} "), 4713);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{c0}"), 4714);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{e0} "), 4715);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb0}"), 4716);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("** Failers"), 4717);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("ax{391}x{10427}x{ff3a}x{1fb0}   "), 4718);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{3b1}x{10427}x{ff3a}x{1fb0}"), 4719);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{1044F}x{ff3a}x{1fb0}"), 4720);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{10427}x{ff5a}x{1fb0}"), 4721);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb8}"), 4722);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb0}"), 4723);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("ax{391}x{10427}x{ff3a}x{1fb0}   "), 4724);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{3b1}x{10427}x{ff3a}x{1fb0}"), 4725);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{1044F}x{ff3a}x{1fb0}"), 4726);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{10427}x{ff5a}x{1fb0}"), 4727);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Ax{391}x{10427}x{ff3a}x{1fb8}"), 4728);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{391}x{3b1}x{3b1}x{3b1}x{391}"), 4729);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{391}x{3b1}x{3b1}x{3b1}x{391}X"), 4730);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{391}x{3b1}x{3b1}x{3b1}x{391}X"), 4731);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{391}"), 4732);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{ff3a}"), 4733);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{3b1}"), 4734);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{ff5a}   "), 4735);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{c0}"), 4736);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{e0} "), 4737);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{104}"), 4738);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{105}"), 4739);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{109}  "), 4740);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("** Failers"), 4741);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{100}"), 4742);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{10a} "), 4743);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Z"), 4744);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("z"), 4745);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{39c}"), 4746);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{178}"), 4747);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("|"), 4748);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{80}"), 4749);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{ff}"), 4750);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{100}"), 4751);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{101} "), 4752);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("** Failers"), 4753);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("x{102}"), 4754);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("Y"), 4755);
    v8_regexp_utils.assertNull(res[dartx.get](1508).firstMatch("y           "), 4756);
    v8_regexp_utils.assertNull(res[dartx.get](1509).firstMatch("A"), 4757);
    v8_regexp_utils.assertNull(res[dartx.get](1509).firstMatch("Ax{300}BC "), 4758);
    v8_regexp_utils.assertNull(res[dartx.get](1509).firstMatch("Ax{300}x{301}x{302}BC "), 4759);
    v8_regexp_utils.assertNull(res[dartx.get](1509).firstMatch("*** Failers"), 4760);
    v8_regexp_utils.assertNull(res[dartx.get](1509).firstMatch("x{300}  "), 4761);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1510).firstMatch("X123"), 4762);
    v8_regexp_utils.assertNull(res[dartx.get](1510).firstMatch("*** Failers"), 4763);
    v8_regexp_utils.assertNull(res[dartx.get](1510).firstMatch("AXYZ"), 4764);
    v8_regexp_utils.assertNull(res[dartx.get](1511).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 4765);
    v8_regexp_utils.assertNull(res[dartx.get](1511).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 4766);
    v8_regexp_utils.assertNull(res[dartx.get](1512).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 4767);
    v8_regexp_utils.assertNull(res[dartx.get](1512).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 4768);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](1513).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 4769);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](1513).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 4770);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](1514).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301} "), 4771);
    v8_regexp_utils.assertToStringEquals("A,,A", res[dartx.get](1514).firstMatch("Ax{300}x{301}x{302}BCAx{300}x{301}C "), 4772);
    v8_regexp_utils.assertNull(res[dartx.get](1515).firstMatch("*** Failers"), 4773);
    v8_regexp_utils.assertNull(res[dartx.get](1515).firstMatch("Ax{300}x{301}x{302}"), 4774);
    v8_regexp_utils.assertNull(res[dartx.get](1516).firstMatch("Ax{300}x{301}Bx{300}X"), 4775);
    v8_regexp_utils.assertNull(res[dartx.get](1516).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}"), 4776);
    v8_regexp_utils.assertNull(res[dartx.get](1516).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}X"), 4777);
    v8_regexp_utils.assertNull(res[dartx.get](1516).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}DAx{300}X"), 4778);
    v8_regexp_utils.assertNull(res[dartx.get](1517).firstMatch("Ax{300}x{301}Bx{300}X"), 4779);
    v8_regexp_utils.assertNull(res[dartx.get](1517).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}"), 4780);
    v8_regexp_utils.assertNull(res[dartx.get](1517).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}X"), 4781);
    v8_regexp_utils.assertNull(res[dartx.get](1517).firstMatch("Ax{300}x{301}Bx{300}Cx{300}x{301}DAx{300}X"), 4782);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("12X"), 4783);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("123X"), 4784);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("*** Failers"), 4785);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("X"), 4786);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("1X"), 4787);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("1234X     "), 4788);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("x{100}   "), 4789);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("x{101} "), 4790);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("x{2e81}x{3007}x{2f804}x{31a0}"), 4791);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("** Failers"), 4792);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("x{2e7f}  "), 4793);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("x{3105}"), 4794);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("** Failers"), 4795);
    v8_regexp_utils.assertNull(res[dartx.get](1518).firstMatch("x{30ff}  "), 4796);
    v8_regexp_utils.assertNull(res[dartx.get](1519).firstMatch("x{06e9}"), 4797);
    v8_regexp_utils.assertNull(res[dartx.get](1519).firstMatch("x{060b}"), 4798);
    v8_regexp_utils.assertNull(res[dartx.get](1519).firstMatch("** Failers"), 4799);
    v8_regexp_utils.assertNull(res[dartx.get](1519).firstMatch("Xx{06e9}   "), 4800);
    v8_regexp_utils.assertNull(res[dartx.get](1520).firstMatch("x{2f800}"), 4801);
    v8_regexp_utils.assertNull(res[dartx.get](1520).firstMatch("** Failers"), 4802);
    v8_regexp_utils.assertNull(res[dartx.get](1520).firstMatch("x{a014}"), 4803);
    v8_regexp_utils.assertNull(res[dartx.get](1520).firstMatch("x{a4c6}   "), 4804);
    v8_regexp_utils.assertNull(res[dartx.get](1521).firstMatch("AXYZ"), 4805);
    v8_regexp_utils.assertNull(res[dartx.get](1521).firstMatch("x{1234}XYZ "), 4806);
    v8_regexp_utils.assertNull(res[dartx.get](1521).firstMatch("** Failers"), 4807);
    v8_regexp_utils.assertNull(res[dartx.get](1521).firstMatch("X  "), 4808);
    v8_regexp_utils.assertNull(res[dartx.get](1522).firstMatch("** Failers"), 4809);
    v8_regexp_utils.assertNull(res[dartx.get](1522).firstMatch("AX"), 4810);
    v8_regexp_utils.assertNull(res[dartx.get](1523).firstMatch("XYZ"), 4811);
    v8_regexp_utils.assertNull(res[dartx.get](1523).firstMatch("AXYZ"), 4812);
    v8_regexp_utils.assertNull(res[dartx.get](1523).firstMatch("x{1234}XYZ "), 4813);
    v8_regexp_utils.assertNull(res[dartx.get](1523).firstMatch("** Failers"), 4814);
    v8_regexp_utils.assertNull(res[dartx.get](1523).firstMatch("ABXYZ   "), 4815);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("XYZ"), 4816);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("** Failers"), 4817);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("AXYZ"), 4818);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("x{1234}XYZ "), 4819);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("ABXYZ   "), 4820);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("AXYZ"), 4821);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("x{1234}XYZ"), 4822);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("Ax{1234}XYZ"), 4823);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("** Failers"), 4824);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("XYZ"), 4825);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("** Failers"), 4826);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("AXYZ"), 4827);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("x{1234}XYZ"), 4828);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("Ax{1234}XYZ"), 4829);
    v8_regexp_utils.assertNull(res[dartx.get](1524).firstMatch("XYZ"), 4830);
    v8_regexp_utils.assertNull(res[dartx.get](1525).firstMatch("XYZ"), 4831);
    v8_regexp_utils.assertNull(res[dartx.get](1525).firstMatch("AXYZ"), 4832);
    v8_regexp_utils.assertNull(res[dartx.get](1525).firstMatch("x{1234}XYZ"), 4833);
    v8_regexp_utils.assertNull(res[dartx.get](1525).firstMatch("Ax{1234}XYZ"), 4834);
    v8_regexp_utils.assertNull(res[dartx.get](1525).firstMatch("** Failers"), 4835);
    v8_regexp_utils.assertNull(res[dartx.get](1526).firstMatch("XYZ"), 4836);
    v8_regexp_utils.assertNull(res[dartx.get](1526).firstMatch("** Failers"), 4837);
    v8_regexp_utils.assertNull(res[dartx.get](1526).firstMatch("AXYZ"), 4838);
    v8_regexp_utils.assertNull(res[dartx.get](1526).firstMatch("x{1234}XYZ"), 4839);
    v8_regexp_utils.assertNull(res[dartx.get](1526).firstMatch("Ax{1234}XYZ"), 4840);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1527).firstMatch("AXYZ"), 4841);
    v8_regexp_utils.assertNull(res[dartx.get](1527).firstMatch("x{1234}XYZ "), 4842);
    v8_regexp_utils.assertNull(res[dartx.get](1527).firstMatch("** Failers"), 4843);
    v8_regexp_utils.assertNull(res[dartx.get](1527).firstMatch("X  "), 4844);
    v8_regexp_utils.assertNull(res[dartx.get](1528).firstMatch("** Failers"), 4845);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1528).firstMatch("AX"), 4846);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1529).firstMatch("XYZ"), 4847);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1529).firstMatch("AXYZ"), 4848);
    v8_regexp_utils.assertNull(res[dartx.get](1529).firstMatch("x{1234}XYZ "), 4849);
    v8_regexp_utils.assertNull(res[dartx.get](1529).firstMatch("** Failers"), 4850);
    v8_regexp_utils.assertNull(res[dartx.get](1529).firstMatch("ABXYZ   "), 4851);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1530).firstMatch("XYZ"), 4852);
    v8_regexp_utils.assertNull(res[dartx.get](1530).firstMatch("** Failers"), 4853);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1530).firstMatch("AXYZ"), 4854);
    v8_regexp_utils.assertNull(res[dartx.get](1530).firstMatch("x{1234}XYZ "), 4855);
    v8_regexp_utils.assertNull(res[dartx.get](1530).firstMatch("ABXYZ   "), 4856);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1531).firstMatch("AXYZ"), 4857);
    v8_regexp_utils.assertNull(res[dartx.get](1531).firstMatch("x{1234}XYZ"), 4858);
    v8_regexp_utils.assertNull(res[dartx.get](1531).firstMatch("Ax{1234}XYZ"), 4859);
    v8_regexp_utils.assertNull(res[dartx.get](1531).firstMatch("** Failers"), 4860);
    v8_regexp_utils.assertNull(res[dartx.get](1531).firstMatch("XYZ"), 4861);
    v8_regexp_utils.assertNull(res[dartx.get](1532).firstMatch("** Failers"), 4862);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1532).firstMatch("AXYZ"), 4863);
    v8_regexp_utils.assertNull(res[dartx.get](1532).firstMatch("x{1234}XYZ"), 4864);
    v8_regexp_utils.assertNull(res[dartx.get](1532).firstMatch("Ax{1234}XYZ"), 4865);
    v8_regexp_utils.assertNull(res[dartx.get](1532).firstMatch("XYZ"), 4866);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1533).firstMatch("XYZ"), 4867);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1533).firstMatch("AXYZ"), 4868);
    v8_regexp_utils.assertNull(res[dartx.get](1533).firstMatch("x{1234}XYZ"), 4869);
    v8_regexp_utils.assertNull(res[dartx.get](1533).firstMatch("Ax{1234}XYZ"), 4870);
    v8_regexp_utils.assertNull(res[dartx.get](1533).firstMatch("** Failers"), 4871);
    v8_regexp_utils.assertToStringEquals("X", res[dartx.get](1534).firstMatch("XYZ"), 4872);
    v8_regexp_utils.assertNull(res[dartx.get](1534).firstMatch("** Failers"), 4873);
    v8_regexp_utils.assertToStringEquals("AX", res[dartx.get](1534).firstMatch("AXYZ"), 4874);
    v8_regexp_utils.assertNull(res[dartx.get](1534).firstMatch("x{1234}XYZ"), 4875);
    v8_regexp_utils.assertNull(res[dartx.get](1534).firstMatch("Ax{1234}XYZ"), 4876);
    v8_regexp_utils.assertNull(res[dartx.get](1535).firstMatch("abcdefgh"), 4877);
    v8_regexp_utils.assertNull(res[dartx.get](1535).firstMatch("x{1234}\n\rx{3456}xyz "), 4878);
    v8_regexp_utils.assertNull(res[dartx.get](1536).firstMatch("abcdefgh"), 4879);
    v8_regexp_utils.assertNull(res[dartx.get](1536).firstMatch("x{1234}\n\rx{3456}xyz "), 4880);
    v8_regexp_utils.assertNull(res[dartx.get](1537).firstMatch("** Failers"), 4881);
    v8_regexp_utils.assertNull(res[dartx.get](1537).firstMatch("abcdefgh"), 4882);
    v8_regexp_utils.assertNull(res[dartx.get](1537).firstMatch("x{1234}\n\rx{3456}xyz "), 4883);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" AXY"), 4884);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" aXY"), 4885);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" x{1c5}XY"), 4886);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" ** Failers"), 4887);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" x{1bb}XY"), 4888);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" x{2b0}XY"), 4889);
    v8_regexp_utils.assertNull(res[dartx.get](1538).firstMatch(" !XY      "), 4890);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" AXY"), 4891);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" aXY"), 4892);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" x{1c5}XY"), 4893);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" ** Failers"), 4894);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" x{1bb}XY"), 4895);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" x{2b0}XY"), 4896);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" !XY      "), 4897);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" AXY"), 4898);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" aXY"), 4899);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" AbcdeXyz "), 4900);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" x{1c5}AbXY"), 4901);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" abcDEXypqreXlmn "), 4902);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" ** Failers"), 4903);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" x{1bb}XY"), 4904);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" x{2b0}XY"), 4905);
    v8_regexp_utils.assertNull(res[dartx.get](1539).firstMatch(" !XY      "), 4906);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" AXY"), 4907);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" aXY"), 4908);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" AbcdeXyz "), 4909);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" x{1c5}AbXY"), 4910);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" abcDEXypqreXlmn "), 4911);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" ** Failers"), 4912);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" x{1bb}XY"), 4913);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" x{2b0}XY"), 4914);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" !XY      "), 4915);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" AXY"), 4916);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" aXY"), 4917);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" AbcdeXyz "), 4918);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" x{1c5}AbXY"), 4919);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" abcDEXypqreXlmn "), 4920);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" ** Failers"), 4921);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" x{1bb}XY"), 4922);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" x{2b0}XY"), 4923);
    v8_regexp_utils.assertNull(res[dartx.get](1540).firstMatch(" !XY      "), 4924);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" AXY"), 4925);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" aXY"), 4926);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" AbcdeXyz "), 4927);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" x{1c5}AbXY"), 4928);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" abcDEXypqreXlmn "), 4929);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" ** Failers"), 4930);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" x{1bb}XY"), 4931);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" x{2b0}XY"), 4932);
    v8_regexp_utils.assertNull(res[dartx.get](1541).firstMatch(" !XY      "), 4933);
    v8_regexp_utils.assertNull(res[dartx.get](1542).firstMatch(" !XY"), 4934);
    v8_regexp_utils.assertNull(res[dartx.get](1542).firstMatch(" x{1bb}XY"), 4935);
    v8_regexp_utils.assertNull(res[dartx.get](1542).firstMatch(" x{2b0}XY"), 4936);
    v8_regexp_utils.assertNull(res[dartx.get](1542).firstMatch(" ** Failers"), 4937);
    v8_regexp_utils.assertNull(res[dartx.get](1542).firstMatch(" x{1c5}XY"), 4938);
    v8_regexp_utils.assertNull(res[dartx.get](1542).firstMatch(" AXY      "), 4939);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch(" !XY"), 4940);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch(" x{1bb}XY"), 4941);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch(" x{2b0}XY"), 4942);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch(" ** Failers"), 4943);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch(" x{1c5}XY"), 4944);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch(" AXY      "), 4945);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch("x{c0}x{e0}x{116}x{117}"), 4946);
    v8_regexp_utils.assertNull(res[dartx.get](1543).firstMatch("x{c0}x{e0}x{116}x{117}"), 4947);
    v8_regexp_utils.assertNull(res[dartx.get](1545).firstMatch("123abcdefg"), 4948);
    v8_regexp_utils.assertNull(res[dartx.get](1545).firstMatch("123abcÄÅzz"), 4949);
    v8_regexp_utils.assertNull(res[dartx.get](1546).firstMatch("x{102A4}x{AA52}x{A91D}x{1C46}x{10283}x{1092E}x{1C6B}x{A93B}x{A8BF}x{1BA0}x{A50A}===="), 4950);
    v8_regexp_utils.assertNull(res[dartx.get](1546).firstMatch("x{a77d}x{1d79}"), 4951);
    v8_regexp_utils.assertNull(res[dartx.get](1546).firstMatch("x{1d79}x{a77d} "), 4952);
    v8_regexp_utils.assertNull(res[dartx.get](1546).firstMatch("x{a77d}x{1d79}"), 4953);
    v8_regexp_utils.assertNull(res[dartx.get](1546).firstMatch("** Failers "), 4954);
    v8_regexp_utils.assertNull(res[dartx.get](1546).firstMatch("x{1d79}x{a77d} "), 4955);
  };
  dart.fn(pcre_test.main, VoidTovoid$());
  v8_regexp_utils.assertEquals = function(actual, expected, message) {
    if (message === void 0) message = null;
    expect$.Expect.equals(actual, expected, message);
  };
  dart.fn(v8_regexp_utils.assertEquals, dynamicAnddynamic__Tovoid());
  v8_regexp_utils.assertTrue = function(actual, message) {
    if (message === void 0) message = null;
    expect$.Expect.isTrue(actual, message);
  };
  dart.fn(v8_regexp_utils.assertTrue, dynamic__Tovoid());
  v8_regexp_utils.assertFalse = function(actual, message) {
    if (message === void 0) message = null;
    expect$.Expect.isFalse(actual, message);
  };
  dart.fn(v8_regexp_utils.assertFalse, dynamic__Tovoid());
  v8_regexp_utils.assertThrows = function(fn, testid) {
    if (testid === void 0) testid = null;
    expect$.Expect.throws(VoidTovoid()._check(fn), null, dart.str`Test ${testid}`);
  };
  dart.fn(v8_regexp_utils.assertThrows, dynamic__Tovoid$());
  v8_regexp_utils.assertNull = function(actual, testid) {
    if (testid === void 0) testid = null;
    expect$.Expect.isNull(actual, dart.str`Test ${testid}`);
  };
  dart.fn(v8_regexp_utils.assertNull, dynamic__Tovoid$());
  v8_regexp_utils.assertToStringEquals = function(str, match, testid) {
    let actual = [];
    for (let i = 0; i <= dart.notNull(core.num._check(dart.dload(match, 'groupCount'))); i++) {
      let g = dart.dsend(match, 'group', i);
      actual[dartx.add](g == null ? "" : g);
    }
    expect$.Expect.equals(str, actual[dartx.join](","), dart.str`Test ${testid}`);
  };
  dart.fn(v8_regexp_utils.assertToStringEquals, dynamicAnddynamicAndnumTovoid());
  v8_regexp_utils.shouldBeTrue = function(actual) {
    expect$.Expect.isTrue(actual);
  };
  dart.fn(v8_regexp_utils.shouldBeTrue, dynamicTovoid());
  v8_regexp_utils.shouldBeFalse = function(actual) {
    expect$.Expect.isFalse(actual);
  };
  dart.fn(v8_regexp_utils.shouldBeFalse, dynamicTovoid());
  v8_regexp_utils.shouldBeNull = function(actual) {
    expect$.Expect.isNull(actual);
  };
  dart.fn(v8_regexp_utils.shouldBeNull, dynamicTovoid());
  v8_regexp_utils.shouldBe = function(actual, expected, message) {
    if (message === void 0) message = null;
    if (expected == null) {
      expect$.Expect.isNull(actual, message);
    } else {
      expect$.Expect.equals(dart.dload(expected, 'length'), dart.dsend(dart.dload(actual, 'groupCount'), '+', 1));
      for (let i = 0; i <= dart.notNull(core.num._check(dart.dload(actual, 'groupCount'))); i++) {
        expect$.Expect.equals(dart.dindex(expected, i), dart.dsend(actual, 'group', i), message);
      }
    }
  };
  dart.fn(v8_regexp_utils.shouldBe, dynamicAnddynamic__Tovoid());
  v8_regexp_utils.firstMatch = function(str, pattern) {
    return pattern.firstMatch(str);
  };
  dart.fn(v8_regexp_utils.firstMatch, StringAndRegExpToMatch());
  v8_regexp_utils.allStringMatches = function(str, pattern) {
    return pattern.allMatches(str)[dartx.map](core.String)(dart.fn(m => m.group(0), MatchToString()))[dartx.toList]();
  };
  dart.fn(v8_regexp_utils.allStringMatches, StringAndRegExpToListOfString());
  v8_regexp_utils.description = function(str) {
  };
  dart.fn(v8_regexp_utils.description, dynamicTovoid());
  // Exports:
  exports.pcre_test = pcre_test;
  exports.v8_regexp_utils = v8_regexp_utils;
});
