dart_library.library('corelib/regexp/pcre-test-4_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__pcre$45test$454_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const pcre$45test$454_test = Object.create(null);
  const v8_regexp_utils = Object.create(null);
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.functionType(dart.void, [])))();
  let ListOfString = () => (ListOfString = dart.constFn(core.List$(core.String)))();
  let MatchToString = () => (MatchToString = dart.constFn(dart.definiteFunctionType(core.String, [core.Match])))();
  let VoidTovoid$ = () => (VoidTovoid$ = dart.constFn(dart.definiteFunctionType(dart.void, [])))();
  let dynamicAnddynamic__Tovoid = () => (dynamicAnddynamic__Tovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic, dart.dynamic], [core.String])))();
  let dynamic__Tovoid = () => (dynamic__Tovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic], [core.String])))();
  let dynamic__Tovoid$ = () => (dynamic__Tovoid$ = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic], [core.num])))();
  let dynamicAnddynamicAndnumTovoid = () => (dynamicAnddynamicAndnumTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic, dart.dynamic, core.num])))();
  let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic])))();
  let StringAndRegExpToMatch = () => (StringAndRegExpToMatch = dart.constFn(dart.definiteFunctionType(core.Match, [core.String, core.RegExp])))();
  let StringAndRegExpToListOfString = () => (StringAndRegExpToListOfString = dart.constFn(dart.definiteFunctionType(ListOfString(), [core.String, core.RegExp])))();
  pcre$45test$454_test.main = function() {
    v8_regexp_utils.description("A chunk of our port of PCRE's test suite, adapted to be more applicable to JavaScript.");
    let regex0 = core.RegExp.new("a.b");
    let input0 = "acb";
    let results = JSArrayOfString().of(["acb"]);
    v8_regexp_utils.shouldBe(regex0.firstMatch(input0), results);
    let input1 = "ab";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex0.firstMatch(input1), results);
    let input2 = "aĀb";
    results = JSArrayOfString().of(["aĀb"]);
    v8_regexp_utils.shouldBe(regex0.firstMatch(input2), results);
    let input3 = "a\nb";
    results = null;
    v8_regexp_utils.shouldBe(regex0.firstMatch(input3), results);
    let regex1 = core.RegExp.new("a(.{3})b");
    input0 = "a䀀xyb";
    results = JSArrayOfString().of(["a䀀xyb", "䀀xy"]);
    v8_regexp_utils.shouldBe(regex1.firstMatch(input0), results);
    input1 = "a䀀yb";
    results = JSArrayOfString().of(["a䀀yb", "䀀y"]);
    v8_regexp_utils.shouldBe(regex1.firstMatch(input1), results);
    input2 = "a䀀Āyb";
    results = JSArrayOfString().of(["a䀀Āyb", "䀀Āy"]);
    v8_regexp_utils.shouldBe(regex1.firstMatch(input2), results);
    input3 = "a䀀b";
    results = null;
    v8_regexp_utils.shouldBe(regex1.firstMatch(input3), results);
    let input4 = "ac\ncb";
    results = null;
    v8_regexp_utils.shouldBe(regex1.firstMatch(input4), results);
    let regex2 = core.RegExp.new("a(.*?)(.)");
    input0 = "aÀb";
    results = JSArrayOfString().of(["aÀ", "", "À"]);
    v8_regexp_utils.shouldBe(regex2.firstMatch(input0), results);
    let regex3 = core.RegExp.new("a(.*?)(.)");
    input0 = "aĀb";
    results = JSArrayOfString().of(["aĀ", "", "Ā"]);
    v8_regexp_utils.shouldBe(regex3.firstMatch(input0), results);
    let regex4 = core.RegExp.new("a(.*)(.)");
    input0 = "aÀb";
    results = JSArrayOfString().of(["aÀb", "À", "b"]);
    v8_regexp_utils.shouldBe(regex4.firstMatch(input0), results);
    let regex5 = core.RegExp.new("a(.*)(.)");
    input0 = "aĀb";
    results = JSArrayOfString().of(["aĀb", "Ā", "b"]);
    v8_regexp_utils.shouldBe(regex5.firstMatch(input0), results);
    let regex6 = core.RegExp.new("a(.)(.)");
    input0 = "aÀbcd";
    results = JSArrayOfString().of(["aÀ", "À", ""]);
    v8_regexp_utils.shouldBe(regex6.firstMatch(input0), results);
    let regex7 = core.RegExp.new("a(.)(.)");
    input0 = "aɀbcd";
    results = JSArrayOfString().of(["aɀb", "ɀ", "b"]);
    v8_regexp_utils.shouldBe(regex7.firstMatch(input0), results);
    let regex8 = core.RegExp.new("a(.?)(.)");
    input0 = "aÀbcd";
    results = JSArrayOfString().of(["aÀ", "À", ""]);
    v8_regexp_utils.shouldBe(regex8.firstMatch(input0), results);
    let regex9 = core.RegExp.new("a(.?)(.)");
    input0 = "aɀbcd";
    results = JSArrayOfString().of(["aɀb", "ɀ", "b"]);
    v8_regexp_utils.shouldBe(regex9.firstMatch(input0), results);
    let regex10 = core.RegExp.new("a(.??)(.)");
    input0 = "aÀbcd";
    results = JSArrayOfString().of(["aÀ", "", "À"]);
    v8_regexp_utils.shouldBe(regex10.firstMatch(input0), results);
    let regex11 = core.RegExp.new("a(.??)(.)");
    input0 = "aɀbcd";
    results = JSArrayOfString().of(["aɀ", "", "ɀ"]);
    v8_regexp_utils.shouldBe(regex11.firstMatch(input0), results);
    let regex12 = core.RegExp.new("a(.{3})b");
    input0 = "aሴxyb";
    results = JSArrayOfString().of(["aሴxyb", "ሴxy"]);
    v8_regexp_utils.shouldBe(regex12.firstMatch(input0), results);
    input1 = "aሴ䌡yb";
    results = JSArrayOfString().of(["aሴ䌡yb", "ሴ䌡y"]);
    v8_regexp_utils.shouldBe(regex12.firstMatch(input1), results);
    input2 = "aሴ䌡㐒b";
    results = JSArrayOfString().of(["aሴ䌡㐒b", "ሴ䌡㐒"]);
    v8_regexp_utils.shouldBe(regex12.firstMatch(input2), results);
    input3 = "aሴb";
    results = null;
    v8_regexp_utils.shouldBe(regex12.firstMatch(input3), results);
    input4 = "ac\ncb";
    results = null;
    v8_regexp_utils.shouldBe(regex12.firstMatch(input4), results);
    let regex13 = core.RegExp.new("a(.{3,})b");
    input0 = "aሴxyb";
    results = JSArrayOfString().of(["aሴxyb", "ሴxy"]);
    v8_regexp_utils.shouldBe(regex13.firstMatch(input0), results);
    input1 = "aሴ䌡yb";
    results = JSArrayOfString().of(["aሴ䌡yb", "ሴ䌡y"]);
    v8_regexp_utils.shouldBe(regex13.firstMatch(input1), results);
    input2 = "aሴ䌡㐒b";
    results = JSArrayOfString().of(["aሴ䌡㐒b", "ሴ䌡㐒"]);
    v8_regexp_utils.shouldBe(regex13.firstMatch(input2), results);
    input3 = "axxxxbcdefghijb";
    results = JSArrayOfString().of(["axxxxbcdefghijb", "xxxxbcdefghij"]);
    v8_regexp_utils.shouldBe(regex13.firstMatch(input3), results);
    input4 = "aሴ䌡㐒㐡b";
    results = JSArrayOfString().of(["aሴ䌡㐒㐡b", "ሴ䌡㐒㐡"]);
    v8_regexp_utils.shouldBe(regex13.firstMatch(input4), results);
    let input5 = "aሴb";
    results = null;
    v8_regexp_utils.shouldBe(regex13.firstMatch(input5), results);
    let regex14 = core.RegExp.new("a(.{3,}?)b");
    input0 = "aሴxyb";
    results = JSArrayOfString().of(["aሴxyb", "ሴxy"]);
    v8_regexp_utils.shouldBe(regex14.firstMatch(input0), results);
    input1 = "aሴ䌡yb";
    results = JSArrayOfString().of(["aሴ䌡yb", "ሴ䌡y"]);
    v8_regexp_utils.shouldBe(regex14.firstMatch(input1), results);
    input2 = "aሴ䌡㐒b";
    results = JSArrayOfString().of(["aሴ䌡㐒b", "ሴ䌡㐒"]);
    v8_regexp_utils.shouldBe(regex14.firstMatch(input2), results);
    input3 = "axxxxbcdefghijb";
    results = JSArrayOfString().of(["axxxxb", "xxxx"]);
    v8_regexp_utils.shouldBe(regex14.firstMatch(input3), results);
    input4 = "aሴ䌡㐒㐡b";
    results = JSArrayOfString().of(["aሴ䌡㐒㐡b", "ሴ䌡㐒㐡"]);
    v8_regexp_utils.shouldBe(regex14.firstMatch(input4), results);
    input5 = "aሴb";
    results = null;
    v8_regexp_utils.shouldBe(regex14.firstMatch(input5), results);
    let regex15 = core.RegExp.new("a(.{3,5})b");
    input0 = "aሴxyb";
    results = JSArrayOfString().of(["aሴxyb", "ሴxy"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input0), results);
    input1 = "aሴ䌡yb";
    results = JSArrayOfString().of(["aሴ䌡yb", "ሴ䌡y"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input1), results);
    input2 = "aሴ䌡㐒b";
    results = JSArrayOfString().of(["aሴ䌡㐒b", "ሴ䌡㐒"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input2), results);
    input3 = "axxxxbcdefghijb";
    results = JSArrayOfString().of(["axxxxb", "xxxx"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input3), results);
    input4 = "aሴ䌡㐒㐡b";
    results = JSArrayOfString().of(["aሴ䌡㐒㐡b", "ሴ䌡㐒㐡"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input4), results);
    input5 = "axbxxbcdefghijb";
    results = JSArrayOfString().of(["axbxxb", "xbxx"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input5), results);
    let input6 = "axxxxxbcdefghijb";
    results = JSArrayOfString().of(["axxxxxb", "xxxxx"]);
    v8_regexp_utils.shouldBe(regex15.firstMatch(input6), results);
    let input7 = "aሴb";
    results = null;
    v8_regexp_utils.shouldBe(regex15.firstMatch(input7), results);
    let input8 = "axxxxxxbcdefghijb";
    results = null;
    v8_regexp_utils.shouldBe(regex15.firstMatch(input8), results);
    let regex16 = core.RegExp.new("a(.{3,5}?)b");
    input0 = "aሴxyb";
    results = JSArrayOfString().of(["aሴxyb", "ሴxy"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input0), results);
    input1 = "aሴ䌡yb";
    results = JSArrayOfString().of(["aሴ䌡yb", "ሴ䌡y"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input1), results);
    input2 = "aሴ䌡㐒b";
    results = JSArrayOfString().of(["aሴ䌡㐒b", "ሴ䌡㐒"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input2), results);
    input3 = "axxxxbcdefghijb";
    results = JSArrayOfString().of(["axxxxb", "xxxx"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input3), results);
    input4 = "aሴ䌡㐒㐡b";
    results = JSArrayOfString().of(["aሴ䌡㐒㐡b", "ሴ䌡㐒㐡"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input4), results);
    input5 = "axbxxbcdefghijb";
    results = JSArrayOfString().of(["axbxxb", "xbxx"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input5), results);
    input6 = "axxxxxbcdefghijb";
    results = JSArrayOfString().of(["axxxxxb", "xxxxx"]);
    v8_regexp_utils.shouldBe(regex16.firstMatch(input6), results);
    input7 = "aሴb";
    results = null;
    v8_regexp_utils.shouldBe(regex16.firstMatch(input7), results);
    input8 = "axxxxxxbcdefghijb";
    results = null;
    v8_regexp_utils.shouldBe(regex16.firstMatch(input8), results);
    let regex17 = core.RegExp.new("^[a\\u00c0]");
    input0 = "Ā";
    results = null;
    v8_regexp_utils.shouldBe(regex17.firstMatch(input0), results);
    let regex21 = core.RegExp.new("(?:\\u0100){3}b");
    input0 = "ĀĀĀb";
    results = JSArrayOfString().of(["ĀĀĀb"]);
    v8_regexp_utils.shouldBe(regex21.firstMatch(input0), results);
    input1 = "ĀĀb";
    results = null;
    v8_regexp_utils.shouldBe(regex21.firstMatch(input1), results);
    let regex22 = core.RegExp.new("\\u00ab");
    input0 = "«";
    results = JSArrayOfString().of(["«"]);
    v8_regexp_utils.shouldBe(regex22.firstMatch(input0), results);
    input1 = "Â«";
    results = JSArrayOfString().of(["«"]);
    v8_regexp_utils.shouldBe(regex22.firstMatch(input1), results);
    input2 = " {ab}";
    results = null;
    v8_regexp_utils.shouldBe(regex22.firstMatch(input2), results);
    let regex30 = core.RegExp.new("^[^a]{2}");
    input0 = "Ābc";
    results = JSArrayOfString().of(["Āb"]);
    v8_regexp_utils.shouldBe(regex30.firstMatch(input0), results);
    let regex31 = core.RegExp.new("^[^a]{2,}");
    input0 = "ĀbcAa";
    results = JSArrayOfString().of(["ĀbcA"]);
    v8_regexp_utils.shouldBe(regex31.firstMatch(input0), results);
    let regex32 = core.RegExp.new("^[^a]{2,}?");
    input0 = "Ābca";
    results = JSArrayOfString().of(["Āb"]);
    v8_regexp_utils.shouldBe(regex32.firstMatch(input0), results);
    let regex33 = core.RegExp.new("^[^a]{2}", {caseSensitive: false});
    input0 = "Ābc";
    results = JSArrayOfString().of(["Āb"]);
    v8_regexp_utils.shouldBe(regex33.firstMatch(input0), results);
    let regex34 = core.RegExp.new("^[^a]{2,}", {caseSensitive: false});
    input0 = "ĀbcAa";
    results = JSArrayOfString().of(["Ābc"]);
    v8_regexp_utils.shouldBe(regex34.firstMatch(input0), results);
    let regex35 = core.RegExp.new("^[^a]{2,}?", {caseSensitive: false});
    input0 = "Ābca";
    results = JSArrayOfString().of(["Āb"]);
    v8_regexp_utils.shouldBe(regex35.firstMatch(input0), results);
    let regex36 = core.RegExp.new("\\u0100{0,0}");
    input0 = "abcd";
    results = JSArrayOfString().of([""]);
    v8_regexp_utils.shouldBe(regex36.firstMatch(input0), results);
    let regex37 = core.RegExp.new("\\u0100?");
    input0 = "abcd";
    results = JSArrayOfString().of([""]);
    v8_regexp_utils.shouldBe(regex37.firstMatch(input0), results);
    input1 = "ĀĀ";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex37.firstMatch(input1), results);
    let regex38 = core.RegExp.new("\\u0100{0,3}");
    input0 = "ĀĀ";
    results = JSArrayOfString().of(["ĀĀ"]);
    v8_regexp_utils.shouldBe(regex38.firstMatch(input0), results);
    input1 = "ĀĀĀĀ";
    results = JSArrayOfString().of(["ĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex38.firstMatch(input1), results);
    let regex39 = core.RegExp.new("\\u0100*");
    input0 = "abce";
    results = JSArrayOfString().of([""]);
    v8_regexp_utils.shouldBe(regex39.firstMatch(input0), results);
    input1 = "ĀĀĀĀ";
    results = JSArrayOfString().of(["ĀĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex39.firstMatch(input1), results);
    let regex40 = core.RegExp.new("\\u0100{1,1}");
    input0 = "abcdĀĀĀĀ";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex40.firstMatch(input0), results);
    let regex41 = core.RegExp.new("\\u0100{1,3}");
    input0 = "abcdĀĀĀĀ";
    results = JSArrayOfString().of(["ĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex41.firstMatch(input0), results);
    let regex42 = core.RegExp.new("\\u0100+");
    input0 = "abcdĀĀĀĀ";
    results = JSArrayOfString().of(["ĀĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex42.firstMatch(input0), results);
    let regex43 = core.RegExp.new("\\u0100{3}");
    input0 = "abcdĀĀĀXX";
    results = JSArrayOfString().of(["ĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex43.firstMatch(input0), results);
    let regex44 = core.RegExp.new("\\u0100{3,5}");
    input0 = "abcdĀĀĀĀĀĀĀXX";
    results = JSArrayOfString().of(["ĀĀĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex44.firstMatch(input0), results);
    let regex45 = core.RegExp.new("\\u0100{3,}");
    input0 = "abcdĀĀĀĀĀĀĀXX";
    results = JSArrayOfString().of(["ĀĀĀĀĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex45.firstMatch(input0), results);
    let regex47 = core.RegExp.new("\\D*");
    input0 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
    results = JSArrayOfString().of(["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]);
    v8_regexp_utils.shouldBe(regex47.firstMatch(input0), results);
    let regex48 = core.RegExp.new("\\D*");
    input0 = "ĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀ";
    results = JSArrayOfString().of(["ĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀĀ"]);
    v8_regexp_utils.shouldBe(regex48.firstMatch(input0), results);
    let regex49 = core.RegExp.new("\\D");
    input0 = "1X2";
    results = JSArrayOfString().of(["X"]);
    v8_regexp_utils.shouldBe(regex49.firstMatch(input0), results);
    input1 = "1Ā2";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex49.firstMatch(input1), results);
    let regex50 = core.RegExp.new(">\\S");
    input0 = "> >X Y";
    results = JSArrayOfString().of([">X"]);
    v8_regexp_utils.shouldBe(regex50.firstMatch(input0), results);
    input1 = "> >Ā Y";
    results = JSArrayOfString().of([">Ā"]);
    v8_regexp_utils.shouldBe(regex50.firstMatch(input1), results);
    let regex51 = core.RegExp.new("\\d");
    input0 = "Ā3";
    results = JSArrayOfString().of(["3"]);
    v8_regexp_utils.shouldBe(regex51.firstMatch(input0), results);
    let regex52 = core.RegExp.new("\\s");
    input0 = "Ā X";
    results = JSArrayOfString().of([" "]);
    v8_regexp_utils.shouldBe(regex52.firstMatch(input0), results);
    let regex53 = core.RegExp.new("\\D+");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["abcd"]);
    v8_regexp_utils.shouldBe(regex53.firstMatch(input0), results);
    input1 = "1234";
    results = null;
    v8_regexp_utils.shouldBe(regex53.firstMatch(input1), results);
    let regex54 = core.RegExp.new("\\D{2,3}");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["abc"]);
    v8_regexp_utils.shouldBe(regex54.firstMatch(input0), results);
    input1 = "12ab34";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex54.firstMatch(input1), results);
    input2 = "1234";
    results = null;
    v8_regexp_utils.shouldBe(regex54.firstMatch(input2), results);
    input3 = "12a34";
    results = null;
    v8_regexp_utils.shouldBe(regex54.firstMatch(input3), results);
    let regex55 = core.RegExp.new("\\D{2,3}?");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex55.firstMatch(input0), results);
    input1 = "12ab34";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex55.firstMatch(input1), results);
    input2 = "1234";
    results = null;
    v8_regexp_utils.shouldBe(regex55.firstMatch(input2), results);
    input3 = "12a34";
    results = null;
    v8_regexp_utils.shouldBe(regex55.firstMatch(input3), results);
    let regex56 = core.RegExp.new("\\d+");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex56.firstMatch(input0), results);
    let regex57 = core.RegExp.new("\\d{2,3}");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex57.firstMatch(input0), results);
    input1 = "1234abcd";
    results = JSArrayOfString().of(["123"]);
    v8_regexp_utils.shouldBe(regex57.firstMatch(input1), results);
    input2 = "1.4";
    results = null;
    v8_regexp_utils.shouldBe(regex57.firstMatch(input2), results);
    let regex58 = core.RegExp.new("\\d{2,3}?");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex58.firstMatch(input0), results);
    input1 = "1234abcd";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex58.firstMatch(input1), results);
    input2 = "1.4";
    results = null;
    v8_regexp_utils.shouldBe(regex58.firstMatch(input2), results);
    let regex59 = core.RegExp.new("\\S+");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["12abcd34"]);
    v8_regexp_utils.shouldBe(regex59.firstMatch(input0), results);
    input1 = "    ";
    results = null;
    v8_regexp_utils.shouldBe(regex59.firstMatch(input1), results);
    let regex60 = core.RegExp.new("\\S{2,3}");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["12a"]);
    v8_regexp_utils.shouldBe(regex60.firstMatch(input0), results);
    input1 = "1234abcd";
    results = JSArrayOfString().of(["123"]);
    v8_regexp_utils.shouldBe(regex60.firstMatch(input1), results);
    input2 = "    ";
    results = null;
    v8_regexp_utils.shouldBe(regex60.firstMatch(input2), results);
    let regex61 = core.RegExp.new("\\S{2,3}?");
    input0 = "12abcd34";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex61.firstMatch(input0), results);
    input1 = "1234abcd";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex61.firstMatch(input1), results);
    input2 = "    ";
    results = null;
    v8_regexp_utils.shouldBe(regex61.firstMatch(input2), results);
    let regex62 = core.RegExp.new(">\\s+<");
    input0 = "12>      <34";
    results = JSArrayOfString().of([">      <"]);
    v8_regexp_utils.shouldBe(regex62.firstMatch(input0), results);
    let regex63 = core.RegExp.new(">\\s{2,3}<");
    input0 = "ab>  <cd";
    results = JSArrayOfString().of([">  <"]);
    v8_regexp_utils.shouldBe(regex63.firstMatch(input0), results);
    input1 = "ab>   <ce";
    results = JSArrayOfString().of([">   <"]);
    v8_regexp_utils.shouldBe(regex63.firstMatch(input1), results);
    input2 = "ab>    <cd";
    results = null;
    v8_regexp_utils.shouldBe(regex63.firstMatch(input2), results);
    let regex64 = core.RegExp.new(">\\s{2,3}?<");
    input0 = "ab>  <cd";
    results = JSArrayOfString().of([">  <"]);
    v8_regexp_utils.shouldBe(regex64.firstMatch(input0), results);
    input1 = "ab>   <ce";
    results = JSArrayOfString().of([">   <"]);
    v8_regexp_utils.shouldBe(regex64.firstMatch(input1), results);
    input2 = "ab>    <cd";
    results = null;
    v8_regexp_utils.shouldBe(regex64.firstMatch(input2), results);
    let regex65 = core.RegExp.new("\\w+");
    input0 = "12      34";
    results = JSArrayOfString().of(["12"]);
    v8_regexp_utils.shouldBe(regex65.firstMatch(input0), results);
    input1 = "+++=*!";
    results = null;
    v8_regexp_utils.shouldBe(regex65.firstMatch(input1), results);
    let regex66 = core.RegExp.new("\\w{2,3}");
    input0 = "ab  cd";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex66.firstMatch(input0), results);
    input1 = "abcd ce";
    results = JSArrayOfString().of(["abc"]);
    v8_regexp_utils.shouldBe(regex66.firstMatch(input1), results);
    input2 = "a.b.c";
    results = null;
    v8_regexp_utils.shouldBe(regex66.firstMatch(input2), results);
    let regex67 = core.RegExp.new("\\w{2,3}?");
    input0 = "ab  cd";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex67.firstMatch(input0), results);
    input1 = "abcd ce";
    results = JSArrayOfString().of(["ab"]);
    v8_regexp_utils.shouldBe(regex67.firstMatch(input1), results);
    input2 = "a.b.c";
    results = null;
    v8_regexp_utils.shouldBe(regex67.firstMatch(input2), results);
    let regex68 = core.RegExp.new("\\W+");
    input0 = "12====34";
    results = JSArrayOfString().of(["===="]);
    v8_regexp_utils.shouldBe(regex68.firstMatch(input0), results);
    input1 = "abcd";
    results = null;
    v8_regexp_utils.shouldBe(regex68.firstMatch(input1), results);
    let regex69 = core.RegExp.new("\\W{2,3}");
    input0 = "ab====cd";
    results = JSArrayOfString().of(["==="]);
    v8_regexp_utils.shouldBe(regex69.firstMatch(input0), results);
    input1 = "ab==cd";
    results = JSArrayOfString().of(["=="]);
    v8_regexp_utils.shouldBe(regex69.firstMatch(input1), results);
    input2 = "a.b.c";
    results = null;
    v8_regexp_utils.shouldBe(regex69.firstMatch(input2), results);
    let regex70 = core.RegExp.new("\\W{2,3}?");
    input0 = "ab====cd";
    results = JSArrayOfString().of(["=="]);
    v8_regexp_utils.shouldBe(regex70.firstMatch(input0), results);
    input1 = "ab==cd";
    results = JSArrayOfString().of(["=="]);
    v8_regexp_utils.shouldBe(regex70.firstMatch(input1), results);
    input2 = "a.b.c";
    results = null;
    v8_regexp_utils.shouldBe(regex70.firstMatch(input2), results);
    let regex71 = core.RegExp.new("[\\u0100]");
    input0 = "Ā";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex71.firstMatch(input0), results);
    input1 = "ZĀ";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex71.firstMatch(input1), results);
    input2 = "ĀZ";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex71.firstMatch(input2), results);
    let regex72 = core.RegExp.new("[Z\\u0100]");
    input0 = "ZĀ";
    results = JSArrayOfString().of(["Z"]);
    v8_regexp_utils.shouldBe(regex72.firstMatch(input0), results);
    input1 = "Ā";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex72.firstMatch(input1), results);
    input2 = "ĀZ";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex72.firstMatch(input2), results);
    let regex73 = core.RegExp.new("[\\u0100\\u0200]");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex73.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex73.firstMatch(input1), results);
    let regex74 = core.RegExp.new("[\\u0100-\\u0200]");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex74.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex74.firstMatch(input1), results);
    input2 = "abđcd";
    results = JSArrayOfString().of(["đ"]);
    v8_regexp_utils.shouldBe(regex74.firstMatch(input2), results);
    let regex75 = core.RegExp.new("[z-\\u0200]");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex75.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex75.firstMatch(input1), results);
    input2 = "abđcd";
    results = JSArrayOfString().of(["đ"]);
    v8_regexp_utils.shouldBe(regex75.firstMatch(input2), results);
    input3 = "abzcd";
    results = JSArrayOfString().of(["z"]);
    v8_regexp_utils.shouldBe(regex75.firstMatch(input3), results);
    input4 = "ab|cd";
    results = JSArrayOfString().of(["|"]);
    v8_regexp_utils.shouldBe(regex75.firstMatch(input4), results);
    let regex76 = core.RegExp.new("[Q\\u0100\\u0200]");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex76.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex76.firstMatch(input1), results);
    input2 = "Q?";
    results = JSArrayOfString().of(["Q"]);
    v8_regexp_utils.shouldBe(regex76.firstMatch(input2), results);
    let regex77 = core.RegExp.new("[Q\\u0100-\\u0200]");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex77.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex77.firstMatch(input1), results);
    input2 = "abđcd";
    results = JSArrayOfString().of(["đ"]);
    v8_regexp_utils.shouldBe(regex77.firstMatch(input2), results);
    input3 = "Q?";
    results = JSArrayOfString().of(["Q"]);
    v8_regexp_utils.shouldBe(regex77.firstMatch(input3), results);
    let regex78 = core.RegExp.new("[Qz-\\u0200]");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex78.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex78.firstMatch(input1), results);
    input2 = "abđcd";
    results = JSArrayOfString().of(["đ"]);
    v8_regexp_utils.shouldBe(regex78.firstMatch(input2), results);
    input3 = "abzcd";
    results = JSArrayOfString().of(["z"]);
    v8_regexp_utils.shouldBe(regex78.firstMatch(input3), results);
    input4 = "ab|cd";
    results = JSArrayOfString().of(["|"]);
    v8_regexp_utils.shouldBe(regex78.firstMatch(input4), results);
    input5 = "Q?";
    results = JSArrayOfString().of(["Q"]);
    v8_regexp_utils.shouldBe(regex78.firstMatch(input5), results);
    let regex79 = core.RegExp.new("[\\u0100\\u0200]{1,3}");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex79.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex79.firstMatch(input1), results);
    input2 = "abȀĀȀĀcd";
    results = JSArrayOfString().of(["ȀĀȀ"]);
    v8_regexp_utils.shouldBe(regex79.firstMatch(input2), results);
    let regex80 = core.RegExp.new("[\\u0100\\u0200]{1,3}?");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex80.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex80.firstMatch(input1), results);
    input2 = "abȀĀȀĀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex80.firstMatch(input2), results);
    let regex81 = core.RegExp.new("[Q\\u0100\\u0200]{1,3}");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex81.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex81.firstMatch(input1), results);
    input2 = "abȀĀȀĀcd";
    results = JSArrayOfString().of(["ȀĀȀ"]);
    v8_regexp_utils.shouldBe(regex81.firstMatch(input2), results);
    let regex82 = core.RegExp.new("[Q\\u0100\\u0200]{1,3}?");
    input0 = "abĀcd";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex82.firstMatch(input0), results);
    input1 = "abȀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex82.firstMatch(input1), results);
    input2 = "abȀĀȀĀcd";
    results = JSArrayOfString().of(["Ȁ"]);
    v8_regexp_utils.shouldBe(regex82.firstMatch(input2), results);
    let regex86 = core.RegExp.new("[^\\u0100\\u0200]X");
    input0 = "AX";
    results = JSArrayOfString().of(["AX"]);
    v8_regexp_utils.shouldBe(regex86.firstMatch(input0), results);
    input1 = "ŐX";
    results = JSArrayOfString().of(["ŐX"]);
    v8_regexp_utils.shouldBe(regex86.firstMatch(input1), results);
    input2 = "ԀX";
    results = JSArrayOfString().of(["ԀX"]);
    v8_regexp_utils.shouldBe(regex86.firstMatch(input2), results);
    input3 = "ĀX";
    results = null;
    v8_regexp_utils.shouldBe(regex86.firstMatch(input3), results);
    input4 = "ȀX";
    results = null;
    v8_regexp_utils.shouldBe(regex86.firstMatch(input4), results);
    let regex87 = core.RegExp.new("[^Q\\u0100\\u0200]X");
    input0 = "AX";
    results = JSArrayOfString().of(["AX"]);
    v8_regexp_utils.shouldBe(regex87.firstMatch(input0), results);
    input1 = "ŐX";
    results = JSArrayOfString().of(["ŐX"]);
    v8_regexp_utils.shouldBe(regex87.firstMatch(input1), results);
    input2 = "ԀX";
    results = JSArrayOfString().of(["ԀX"]);
    v8_regexp_utils.shouldBe(regex87.firstMatch(input2), results);
    input3 = "ĀX";
    results = null;
    v8_regexp_utils.shouldBe(regex87.firstMatch(input3), results);
    input4 = "ȀX";
    results = null;
    v8_regexp_utils.shouldBe(regex87.firstMatch(input4), results);
    input5 = "QX";
    results = null;
    v8_regexp_utils.shouldBe(regex87.firstMatch(input5), results);
    let regex88 = core.RegExp.new("[^\\u0100-\\u0200]X");
    input0 = "AX";
    results = JSArrayOfString().of(["AX"]);
    v8_regexp_utils.shouldBe(regex88.firstMatch(input0), results);
    input1 = "ԀX";
    results = JSArrayOfString().of(["ԀX"]);
    v8_regexp_utils.shouldBe(regex88.firstMatch(input1), results);
    input2 = "ĀX";
    results = null;
    v8_regexp_utils.shouldBe(regex88.firstMatch(input2), results);
    input3 = "ŐX";
    results = null;
    v8_regexp_utils.shouldBe(regex88.firstMatch(input3), results);
    input4 = "ȀX";
    results = null;
    v8_regexp_utils.shouldBe(regex88.firstMatch(input4), results);
    let regex91 = core.RegExp.new("[z-\\u0100]", {caseSensitive: false});
    input0 = "z";
    results = JSArrayOfString().of(["z"]);
    v8_regexp_utils.shouldBe(regex91.firstMatch(input0), results);
    input1 = "Z";
    results = JSArrayOfString().of(["Z"]);
    v8_regexp_utils.shouldBe(regex91.firstMatch(input1), results);
    input2 = "Ā";
    results = JSArrayOfString().of(["Ā"]);
    v8_regexp_utils.shouldBe(regex91.firstMatch(input2), results);
    input3 = "Ă";
    results = null;
    v8_regexp_utils.shouldBe(regex91.firstMatch(input3), results);
    input4 = "y";
    results = null;
    v8_regexp_utils.shouldBe(regex91.firstMatch(input4), results);
    let regex92 = core.RegExp.new("[\\xFF]");
    input0 = ">ÿ<";
    results = JSArrayOfString().of(["ÿ"]);
    v8_regexp_utils.shouldBe(regex92.firstMatch(input0), results);
    let regex93 = core.RegExp.new("[\\xff]");
    input0 = ">ÿ<";
    results = JSArrayOfString().of(["ÿ"]);
    v8_regexp_utils.shouldBe(regex93.firstMatch(input0), results);
    let regex94 = core.RegExp.new("[^\\xFF]");
    input0 = "XYZ";
    results = JSArrayOfString().of(["X"]);
    v8_regexp_utils.shouldBe(regex94.firstMatch(input0), results);
    let regex95 = core.RegExp.new("[^\\xff]");
    input0 = "XYZ";
    results = JSArrayOfString().of(["X"]);
    v8_regexp_utils.shouldBe(regex95.firstMatch(input0), results);
    input1 = "ģ";
    results = JSArrayOfString().of(["ģ"]);
    v8_regexp_utils.shouldBe(regex95.firstMatch(input1), results);
    let regex96 = core.RegExp.new("^[ac]*b");
    input0 = "xb";
    results = null;
    v8_regexp_utils.shouldBe(regex96.firstMatch(input0), results);
    let regex97 = core.RegExp.new("^[ac\\u0100]*b");
    input0 = "xb";
    results = null;
    v8_regexp_utils.shouldBe(regex97.firstMatch(input0), results);
    let regex98 = core.RegExp.new("^[^x]*b", {caseSensitive: false});
    input0 = "xb";
    results = null;
    v8_regexp_utils.shouldBe(regex98.firstMatch(input0), results);
    let regex99 = core.RegExp.new("^[^x]*b");
    input0 = "xb";
    results = null;
    v8_regexp_utils.shouldBe(regex99.firstMatch(input0), results);
    let regex100 = core.RegExp.new("^\\d*b");
    input0 = "xb";
    results = null;
    v8_regexp_utils.shouldBe(regex100.firstMatch(input0), results);
    let regex102 = core.RegExp.new("^\\u0085$", {caseSensitive: false});
    input0 = "";
    results = JSArrayOfString().of([""]);
    v8_regexp_utils.shouldBe(regex102.firstMatch(input0), results);
    let regex103 = core.RegExp.new("^\\xe1\\x88\\xb4");
    input0 = "á´";
    results = JSArrayOfString().of(["á´"]);
    v8_regexp_utils.shouldBe(regex103.firstMatch(input0), results);
    let regex104 = core.RegExp.new("^\\xe1\\x88\\xb4");
    input0 = "á´";
    results = JSArrayOfString().of(["á´"]);
    v8_regexp_utils.shouldBe(regex104.firstMatch(input0), results);
    let regex105 = core.RegExp.new("(.{1,5})");
    input0 = "abcdefg";
    results = JSArrayOfString().of(["abcde", "abcde"]);
    v8_regexp_utils.shouldBe(regex105.firstMatch(input0), results);
    input1 = "ab";
    results = JSArrayOfString().of(["ab", "ab"]);
    v8_regexp_utils.shouldBe(regex105.firstMatch(input1), results);
    let regex106 = core.RegExp.new("a*\\u0100*\\w");
    input0 = "a";
    results = JSArrayOfString().of(["a"]);
    v8_regexp_utils.shouldBe(regex106.firstMatch(input0), results);
    let regex107 = core.RegExp.new("[\\S\\s]*");
    input0 = "abc\n\rтестxyz";
    results = JSArrayOfString().of(["abc\n\rтестxyz"]);
    v8_regexp_utils.shouldBe(regex107.firstMatch(input0), results);
    let regexGlobal0 = core.RegExp.new("[^a]+");
    input0 = "bcd";
    results = JSArrayOfString().of(["bcd"]);
    v8_regexp_utils.shouldBe(v8_regexp_utils.firstMatch(input0, regexGlobal0), results);
    input1 = "ĀaYɖZ";
    results = JSArrayOfString().of(["Ā", "YɖZ"]);
    expect$.Expect.listEquals(regexGlobal0.allMatches(input1)[dartx.map](core.String)(dart.fn(m => m.group(0), MatchToString()))[dartx.toList](), results);
    let regexGlobal1 = core.RegExp.new("\\S\\S");
    input0 = "A£BC";
    results = JSArrayOfString().of(["A£", "BC"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal1), results);
    let regexGlobal2 = core.RegExp.new("\\S{2}");
    input0 = "A£BC";
    results = JSArrayOfString().of(["A£", "BC"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal2), results);
    let regexGlobal3 = core.RegExp.new("\\W\\W");
    input0 = "+£==";
    results = JSArrayOfString().of(["+£", "=="]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal3), results);
    let regexGlobal4 = core.RegExp.new("\\W{2}");
    input0 = "+£==";
    results = JSArrayOfString().of(["+£", "=="]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal4), results);
    let regexGlobal5 = core.RegExp.new("\\S");
    input0 = "тест";
    results = JSArrayOfString().of(["т", "е", "с", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal5), results);
    let regexGlobal6 = core.RegExp.new("[\\S]");
    input0 = "тест";
    results = JSArrayOfString().of(["т", "е", "с", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal6), results);
    let regexGlobal7 = core.RegExp.new("\\D");
    input0 = "тест";
    results = JSArrayOfString().of(["т", "е", "с", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal7), results);
    let regexGlobal8 = core.RegExp.new("[\\D]");
    input0 = "тест";
    results = JSArrayOfString().of(["т", "е", "с", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal8), results);
    let regexGlobal9 = core.RegExp.new("\\W");
    input0 = "⑂␵⑁⑂";
    results = JSArrayOfString().of(["⑂", "␵", "⑁", "⑂"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal9), results);
    let regexGlobal10 = core.RegExp.new("[\\W]");
    input0 = "⑂␵⑁⑂";
    results = JSArrayOfString().of(["⑂", "␵", "⑁", "⑂"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal10), results);
    let regexGlobal11 = core.RegExp.new("[\\u041f\\S]");
    input0 = "тест";
    results = JSArrayOfString().of(["т", "е", "с", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal11), results);
    let regexGlobal12 = core.RegExp.new(".[^\\S].");
    input0 = "abc defтуxyz\npqr";
    results = JSArrayOfString().of(["c d", "z\np"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal12), results);
    let regexGlobal13 = core.RegExp.new(".[^\\S\\n].");
    input0 = "abc defтуxyz\npqr";
    results = JSArrayOfString().of(["c d"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal13), results);
    let regexGlobal14 = core.RegExp.new("[\\W]");
    input0 = "+⑂";
    results = JSArrayOfString().of(["+", "⑂"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal14), results);
    let regexGlobal15 = core.RegExp.new("[^a-zA-Z]");
    input0 = "+⑂";
    results = JSArrayOfString().of(["+", "⑂"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal15), results);
    let regexGlobal16 = core.RegExp.new("[^a-zA-Z]");
    input0 = "Aт";
    results = JSArrayOfString().of(["т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal16), results);
    let regexGlobal17 = core.RegExp.new("[\\S]");
    input0 = "Aт";
    results = JSArrayOfString().of(["A", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal17), results);
    let regexGlobal19 = core.RegExp.new("[\\D]");
    input0 = "Aт";
    results = JSArrayOfString().of(["A", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal19), results);
    let regexGlobal21 = core.RegExp.new("[^a-z]");
    input0 = "AТ";
    results = JSArrayOfString().of(["A", "Т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal21), results);
    let regexGlobal24 = core.RegExp.new("[\\S]");
    input0 = "Aт";
    results = JSArrayOfString().of(["A", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal24), results);
    let regexGlobal25 = core.RegExp.new("[^A-Z]");
    input0 = "aт";
    results = JSArrayOfString().of(["a", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal25), results);
    let regexGlobal26 = core.RegExp.new("[\\W]");
    input0 = "+⑂";
    results = JSArrayOfString().of(["+", "⑂"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal26), results);
    let regexGlobal27 = core.RegExp.new("[\\D]");
    input0 = "Mт";
    results = JSArrayOfString().of(["M", "т"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal27), results);
    let regexGlobal28 = core.RegExp.new("[^a]+", {caseSensitive: false});
    input0 = "bcd";
    results = JSArrayOfString().of(["bcd"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal28), results);
    input1 = "ĀaYɖZ";
    results = JSArrayOfString().of(["Ā", "YɖZ"]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input1, regexGlobal28), results);
    let regexGlobal29 = core.RegExp.new("(a|)");
    input0 = "catac";
    results = JSArrayOfString().of(["", "a", "", "a", "", ""]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input0, regexGlobal29), results);
    input1 = "aɖa";
    results = JSArrayOfString().of(["a", "", "a", ""]);
    expect$.Expect.listEquals(v8_regexp_utils.allStringMatches(input1, regexGlobal29), results);
  };
  dart.fn(pcre$45test$454_test.main, VoidTovoid$());
  v8_regexp_utils.assertEquals = function(actual, expected, message) {
    if (message === void 0) message = null;
    expect$.Expect.equals(actual, expected, message);
  };
  dart.fn(v8_regexp_utils.assertEquals, dynamicAnddynamic__Tovoid());
  v8_regexp_utils.assertTrue = function(actual, message) {
    if (message === void 0) message = null;
    expect$.Expect.isTrue(actual, message);
  };
  dart.fn(v8_regexp_utils.assertTrue, dynamic__Tovoid());
  v8_regexp_utils.assertFalse = function(actual, message) {
    if (message === void 0) message = null;
    expect$.Expect.isFalse(actual, message);
  };
  dart.fn(v8_regexp_utils.assertFalse, dynamic__Tovoid());
  v8_regexp_utils.assertThrows = function(fn, testid) {
    if (testid === void 0) testid = null;
    expect$.Expect.throws(VoidTovoid()._check(fn), null, dart.str`Test ${testid}`);
  };
  dart.fn(v8_regexp_utils.assertThrows, dynamic__Tovoid$());
  v8_regexp_utils.assertNull = function(actual, testid) {
    if (testid === void 0) testid = null;
    expect$.Expect.isNull(actual, dart.str`Test ${testid}`);
  };
  dart.fn(v8_regexp_utils.assertNull, dynamic__Tovoid$());
  v8_regexp_utils.assertToStringEquals = function(str, match, testid) {
    let actual = [];
    for (let i = 0; i <= dart.notNull(core.num._check(dart.dload(match, 'groupCount'))); i++) {
      let g = dart.dsend(match, 'group', i);
      actual[dartx.add](g == null ? "" : g);
    }
    expect$.Expect.equals(str, actual[dartx.join](","), dart.str`Test ${testid}`);
  };
  dart.fn(v8_regexp_utils.assertToStringEquals, dynamicAnddynamicAndnumTovoid());
  v8_regexp_utils.shouldBeTrue = function(actual) {
    expect$.Expect.isTrue(actual);
  };
  dart.fn(v8_regexp_utils.shouldBeTrue, dynamicTovoid());
  v8_regexp_utils.shouldBeFalse = function(actual) {
    expect$.Expect.isFalse(actual);
  };
  dart.fn(v8_regexp_utils.shouldBeFalse, dynamicTovoid());
  v8_regexp_utils.shouldBeNull = function(actual) {
    expect$.Expect.isNull(actual);
  };
  dart.fn(v8_regexp_utils.shouldBeNull, dynamicTovoid());
  v8_regexp_utils.shouldBe = function(actual, expected, message) {
    if (message === void 0) message = null;
    if (expected == null) {
      expect$.Expect.isNull(actual, message);
    } else {
      expect$.Expect.equals(dart.dload(expected, 'length'), dart.dsend(dart.dload(actual, 'groupCount'), '+', 1));
      for (let i = 0; i <= dart.notNull(core.num._check(dart.dload(actual, 'groupCount'))); i++) {
        expect$.Expect.equals(dart.dindex(expected, i), dart.dsend(actual, 'group', i), message);
      }
    }
  };
  dart.fn(v8_regexp_utils.shouldBe, dynamicAnddynamic__Tovoid());
  v8_regexp_utils.firstMatch = function(str, pattern) {
    return pattern.firstMatch(str);
  };
  dart.fn(v8_regexp_utils.firstMatch, StringAndRegExpToMatch());
  v8_regexp_utils.allStringMatches = function(str, pattern) {
    return pattern.allMatches(str)[dartx.map](core.String)(dart.fn(m => m.group(0), MatchToString()))[dartx.toList]();
  };
  dart.fn(v8_regexp_utils.allStringMatches, StringAndRegExpToListOfString());
  v8_regexp_utils.description = function(str) {
  };
  dart.fn(v8_regexp_utils.description, dynamicTovoid());
  // Exports:
  exports.pcre$45test$454_test = pcre$45test$454_test;
  exports.v8_regexp_utils = v8_regexp_utils;
});
