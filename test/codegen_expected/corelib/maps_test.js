dart_library.library('corelib/maps_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__maps_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const maps_test = Object.create(null);
  let dynamicAnddynamicTovoid = () => (dynamicAnddynamicTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic, dart.dynamic])))();
  let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic])))();
  let VoidToint = () => (VoidToint = dart.constFn(dart.definiteFunctionType(core.int, [])))();
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.definiteFunctionType(dart.dynamic, [])))();
  maps_test.main = function() {
    let key1 = "key1";
    let key2 = "key2";
    let key3 = "key3";
    let key4 = "key4";
    let key5 = "key5";
    let key6 = "key6";
    let key7 = "key7";
    let key8 = "key8";
    let value1 = 10;
    let value2 = 20;
    let value3 = 30;
    let value4 = 40;
    let value5 = 50;
    let value6 = 60;
    let value7 = 70;
    let value8 = 80;
    let map = core.Map.new();
    map[dartx.set](key1, value1);
    map[dartx.set](key1, value2);
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key2));
    expect$.Expect.equals(1, collection.Maps.length(map));
    map[dartx.set](key1, value1);
    map[dartx.set](key2, value2);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key3, value3);
    map[dartx.set](key4, value4);
    map[dartx.set](key5, value5);
    map[dartx.set](key6, value6);
    map[dartx.set](key7, value7);
    map[dartx.set](key8, value8);
    expect$.Expect.equals(8, collection.Maps.length(map));
    map[dartx.remove](key4);
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key4));
    expect$.Expect.equals(7, collection.Maps.length(map));
    collection.Maps.clear(map);
    expect$.Expect.equals(0, collection.Maps.length(map));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key1));
    expect$.Expect.equals(false, map[dartx.containsKey](key1));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key2));
    expect$.Expect.equals(false, map[dartx.containsKey](key2));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key3));
    expect$.Expect.equals(false, map[dartx.containsKey](key3));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key4));
    expect$.Expect.equals(false, map[dartx.containsKey](key4));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key5));
    expect$.Expect.equals(false, map[dartx.containsKey](key5));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key6));
    expect$.Expect.equals(false, map[dartx.containsKey](key6));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key7));
    expect$.Expect.equals(false, map[dartx.containsKey](key7));
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key8));
    expect$.Expect.equals(false, map[dartx.containsKey](key8));
    map[dartx.set](key1, value1);
    expect$.Expect.equals(1, collection.Maps.length(map));
    map[dartx.set](key2, value2);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key3, value3);
    map[dartx.remove](key3);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key4, value4);
    map[dartx.remove](key4);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key5, value5);
    map[dartx.remove](key5);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key6, value6);
    map[dartx.remove](key6);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key7, value7);
    map[dartx.remove](key7);
    expect$.Expect.equals(2, collection.Maps.length(map));
    map[dartx.set](key8, value8);
    map[dartx.remove](key8);
    expect$.Expect.equals(2, collection.Maps.length(map));
    expect$.Expect.equals(true, collection.Maps.containsKey(map, key1));
    expect$.Expect.equals(true, collection.Maps.containsValue(map, value1));
    let other_map = core.Map.new();
    function testForEachMap(key, value) {
      other_map[dartx.set](key, value);
    }
    dart.fn(testForEachMap, dynamicAnddynamicTovoid());
    collection.Maps.forEach(map, testForEachMap);
    expect$.Expect.equals(true, other_map[dartx.containsKey](key1));
    expect$.Expect.equals(true, other_map[dartx.containsKey](key2));
    expect$.Expect.equals(true, other_map[dartx.containsValue](value1));
    expect$.Expect.equals(true, other_map[dartx.containsValue](value2));
    expect$.Expect.equals(2, collection.Maps.length(other_map));
    function testForEachCollection(value) {
      other_map[dartx.set](value, value);
    }
    dart.fn(testForEachCollection, dynamicTovoid());
    let values = collection.Maps.getValues(map);
    other_map = core.Map.new();
    values[dartx.forEach](testForEachCollection);
    expect$.Expect.equals(true, !dart.test(other_map[dartx.containsKey](key1)));
    expect$.Expect.equals(true, !dart.test(other_map[dartx.containsKey](key2)));
    expect$.Expect.equals(true, !dart.test(other_map[dartx.containsValue](key1)));
    expect$.Expect.equals(true, !dart.test(other_map[dartx.containsValue](key2)));
    expect$.Expect.equals(true, other_map[dartx.containsKey](value1));
    expect$.Expect.equals(true, other_map[dartx.containsKey](value2));
    expect$.Expect.equals(true, other_map[dartx.containsValue](value1));
    expect$.Expect.equals(true, other_map[dartx.containsValue](value2));
    expect$.Expect.equals(2, other_map[dartx.length]);
    other_map[dartx.clear]();
    map[dartx.clear]();
    expect$.Expect.equals(false, collection.Maps.containsKey(map, key1));
    collection.Maps.putIfAbsent(map, key1, dart.fn(() => 10, VoidToint()));
    expect$.Expect.equals(true, map[dartx.containsKey](key1));
    expect$.Expect.equals(10, map[dartx.get](key1));
    expect$.Expect.equals(10, collection.Maps.putIfAbsent(map, key1, dart.fn(() => 11, VoidToint())));
  };
  dart.fn(maps_test.main, VoidTodynamic());
  // Exports:
  exports.maps_test = maps_test;
});
