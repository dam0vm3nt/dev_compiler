dart_library.library('corelib/compare_to_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__compare_to_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const compare_to_test = Object.create(null);
  let dynamicTodynamic = () => (dynamicTodynamic = dart.constFn(dart.definiteFunctionType(dart.dynamic, [dart.dynamic])))();
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.definiteFunctionType(dart.dynamic, [])))();
  compare_to_test.negate = function(x) {
    return dart.dsend(x, 'unary-');
  };
  dart.fn(compare_to_test.negate, dynamicTodynamic());
  compare_to_test.main = function() {
    let inf = core.double.INFINITY;
    let nan = core.double.NAN;
    let mnan = compare_to_test.negate(nan);
    expect$.Expect.equals(0, (-dart.notNull(inf))[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](-499.0));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](-499));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](-0.0));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](0));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](0.0));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](499.0));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](499));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](inf));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](nan));
    expect$.Expect.equals(-1, (-dart.notNull(inf))[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, (-499.0)[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(0, (-499.0)[dartx.compareTo](-499.0));
    expect$.Expect.equals(0, (-499.0)[dartx.compareTo](-499));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](-0.0));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](0));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](0.0));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](499.0));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](499));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](inf));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](nan));
    expect$.Expect.equals(-1, (-499.0)[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, (-499)[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(0, (-499)[dartx.compareTo](-499.0));
    expect$.Expect.equals(0, (-499)[dartx.compareTo](-499));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](-0.0));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](0));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](0.0));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](499.0));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](499));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](inf));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](nan));
    expect$.Expect.equals(-1, (-499)[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, (-0.0)[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, (-0.0)[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, (-0.0)[dartx.compareTo](-499));
    expect$.Expect.equals(0, (-0.0)[dartx.compareTo](-0.0));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](0));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](0.0));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](499.0));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](499));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](inf));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](nan));
    expect$.Expect.equals(-1, (-0.0)[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, (0)[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, (0)[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, (0)[dartx.compareTo](-499));
    expect$.Expect.equals(1, (0)[dartx.compareTo](-0.0));
    expect$.Expect.equals(0, (0)[dartx.compareTo](0));
    expect$.Expect.equals(0, (0)[dartx.compareTo](0.0));
    expect$.Expect.equals(-1, (0)[dartx.compareTo](499.0));
    expect$.Expect.equals(-1, (0)[dartx.compareTo](499));
    expect$.Expect.equals(-1, (0)[dartx.compareTo](inf));
    expect$.Expect.equals(-1, (0)[dartx.compareTo](nan));
    expect$.Expect.equals(-1, (0)[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, 0.0[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, 0.0[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, 0.0[dartx.compareTo](-499));
    expect$.Expect.equals(1, 0.0[dartx.compareTo](-0.0));
    expect$.Expect.equals(0, 0.0[dartx.compareTo](0));
    expect$.Expect.equals(0, 0.0[dartx.compareTo](0.0));
    expect$.Expect.equals(-1, 0.0[dartx.compareTo](499.0));
    expect$.Expect.equals(-1, 0.0[dartx.compareTo](499));
    expect$.Expect.equals(-1, 0.0[dartx.compareTo](inf));
    expect$.Expect.equals(-1, 0.0[dartx.compareTo](nan));
    expect$.Expect.equals(-1, 0.0[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, 499.0[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, 499.0[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, 499.0[dartx.compareTo](-499));
    expect$.Expect.equals(1, 499.0[dartx.compareTo](-0.0));
    expect$.Expect.equals(1, 499.0[dartx.compareTo](0));
    expect$.Expect.equals(1, 499.0[dartx.compareTo](0.0));
    expect$.Expect.equals(0, 499.0[dartx.compareTo](499.0));
    expect$.Expect.equals(0, 499.0[dartx.compareTo](499));
    expect$.Expect.equals(-1, 499.0[dartx.compareTo](inf));
    expect$.Expect.equals(-1, 499.0[dartx.compareTo](nan));
    expect$.Expect.equals(-1, 499.0[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, (499)[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, (499)[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, (499)[dartx.compareTo](-499));
    expect$.Expect.equals(1, (499)[dartx.compareTo](-0.0));
    expect$.Expect.equals(1, (499)[dartx.compareTo](0));
    expect$.Expect.equals(1, (499)[dartx.compareTo](0.0));
    expect$.Expect.equals(0, (499)[dartx.compareTo](499.0));
    expect$.Expect.equals(0, (499)[dartx.compareTo](499));
    expect$.Expect.equals(-1, (499)[dartx.compareTo](inf));
    expect$.Expect.equals(-1, (499)[dartx.compareTo](nan));
    expect$.Expect.equals(-1, (499)[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, inf[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, inf[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, inf[dartx.compareTo](-499));
    expect$.Expect.equals(1, inf[dartx.compareTo](-0.0));
    expect$.Expect.equals(1, inf[dartx.compareTo](0));
    expect$.Expect.equals(1, inf[dartx.compareTo](0.0));
    expect$.Expect.equals(1, inf[dartx.compareTo](499.0));
    expect$.Expect.equals(1, inf[dartx.compareTo](499));
    expect$.Expect.equals(0, inf[dartx.compareTo](inf));
    expect$.Expect.equals(-1, inf[dartx.compareTo](nan));
    expect$.Expect.equals(-1, inf[dartx.compareTo](core.num._check(mnan)));
    expect$.Expect.equals(1, nan[dartx.compareTo](-dart.notNull(inf)));
    expect$.Expect.equals(1, nan[dartx.compareTo](-499.0));
    expect$.Expect.equals(1, nan[dartx.compareTo](-499));
    expect$.Expect.equals(1, nan[dartx.compareTo](-0.0));
    expect$.Expect.equals(1, nan[dartx.compareTo](0));
    expect$.Expect.equals(1, nan[dartx.compareTo](0.0));
    expect$.Expect.equals(1, nan[dartx.compareTo](499.0));
    expect$.Expect.equals(1, nan[dartx.compareTo](499));
    expect$.Expect.equals(1, nan[dartx.compareTo](inf));
    expect$.Expect.equals(0, nan[dartx.compareTo](nan));
    expect$.Expect.equals(0, nan[dartx.compareTo](core.num._check(mnan)));
  };
  dart.fn(compare_to_test.main, VoidTodynamic());
  // Exports:
  exports.compare_to_test = compare_to_test;
});
